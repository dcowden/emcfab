;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 9/27/2011 9:06:30 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EFD2	F01A			GOTO	_main
$0008	$EFC4	F000			GOTO	_interrupt
$0188	$	_interrupt:
$0188	$C003	F1E9			MOVFF	STACK_3, STSAVED_3
$018C	$C002	F1E8			MOVFF	STACK_2, STSAVED_2
$0190	$C001	F1E7			MOVFF	STACK_1, STSAVED_1
$0194	$C000	F1E6			MOVFF	STACK_0, STSAVED_0
$0198	$CFE9	F12E			MOVFF	FSR0L, ?saveFSR0
$019C	$CFEA	F12F			MOVFF	FSR0H, ?saveFSR0+1
$01A0	$CFE1	F130			MOVFF	FSR1L, ?saveFSR1
$01A4	$CFE2	F131			MOVFF	FSR1H, ?saveFSR1+1
;extruder.c,572 :: 			void interrupt ( void ){
;extruder.c,576 :: 			if ( INTCON.INT0IF ){
$01A8	$A2F2	    			BTFSS	INTCON, 1, 0
$01AA	$D018	    			BRA	L_interrupt_32
;extruder.c,580 :: 			if ( DIR_PIN ){
$01AC	$A082	    			BTFSS	PORTC, 0, 0
$01AE	$D007	    			BRA	L_interrupt_33
;extruder.c,581 :: 			motorPulses += stepMultiplier;
$01B0	$5019	    			MOVF	_stepMultiplier, 0, 0
$01B2	$2615	    			ADDWF	_motorPulses, 1, 0
$01B4	$0E00	    			MOVLW	0
$01B6	$2216	    			ADDWFC	_motorPulses+1, 1, 0
$01B8	$2217	    			ADDWFC	_motorPulses+2, 1, 0
$01BA	$2218	    			ADDWFC	_motorPulses+3, 1, 0
;extruder.c,582 :: 			}
$01BC	$D00E	    			BRA	L_interrupt_34
$01BE	$	L_interrupt_33:
;extruder.c,584 :: 			motorPulses -= stepMultiplier;
$01BE	$C019	F000			MOVFF	_stepMultiplier, STACK_0
$01C2	$0E00	    			MOVLW	0
$01C4	$6E01	    			MOVWF	STACK_0+1, 0
$01C6	$6E02	    			MOVWF	STACK_0+2, 0
$01C8	$6E03	    			MOVWF	STACK_0+3, 0
$01CA	$5000	    			MOVF	STACK_0, 0, 0
$01CC	$5E15	    			SUBWF	_motorPulses, 1, 0
$01CE	$5001	    			MOVF	STACK_0+1, 0, 0
$01D0	$5A16	    			SUBWFB	_motorPulses+1, 1, 0
$01D2	$5002	    			MOVF	STACK_0+2, 0, 0
$01D4	$5A17	    			SUBWFB	_motorPulses+2, 1, 0
$01D6	$5003	    			MOVF	STACK_0+3, 0, 0
$01D8	$5A18	    			SUBWFB	_motorPulses+3, 1, 0
;extruder.c,585 :: 			}
$01DA	$	L_interrupt_34:
;extruder.c,586 :: 			INTCON.INT0IF = 0;
$01DA	$92F2	    			BCF	INTCON, 1, 0
;extruder.c,587 :: 			}
$01DC	$	L_interrupt_32:
;extruder.c,588 :: 			if  ( PIR3.IC2QEIF ){
$01DC	$A4A4	    			BTFSS	PIR3, 2, 0
$01DE	$D011	    			BRA	L_interrupt_35
;extruder.c,594 :: 			if ( QEICON.F5 = 1 ){
$01E0	$8AB6	    			BSF	QEICON, 5, 0
$01E2	$AAB6	    			BTFSS	QEICON, 5, 0
$01E4	$D007	    			BRA	L_interrupt_36
;extruder.c,596 :: 			motorTurns++;
$01E6	$0E01	    			MOVLW	1
$01E8	$261A	    			ADDWF	_motorTurns, 1, 0
$01EA	$0E00	    			MOVLW	0
$01EC	$221B	    			ADDWFC	_motorTurns+1, 1, 0
$01EE	$221C	    			ADDWFC	_motorTurns+2, 1, 0
$01F0	$221D	    			ADDWFC	_motorTurns+3, 1, 0
;extruder.c,597 :: 			}
$01F2	$D006	    			BRA	L_interrupt_37
$01F4	$	L_interrupt_36:
;extruder.c,600 :: 			motorTurns--;
$01F4	$0E01	    			MOVLW	1
$01F6	$5E1A	    			SUBWF	_motorTurns, 1, 0
$01F8	$0E00	    			MOVLW	0
$01FA	$5A1B	    			SUBWFB	_motorTurns+1, 1, 0
$01FC	$5A1C	    			SUBWFB	_motorTurns+2, 1, 0
$01FE	$5A1D	    			SUBWFB	_motorTurns+3, 1, 0
;extruder.c,601 :: 			}
$0200	$	L_interrupt_37:
;extruder.c,602 :: 			PIR3.IC2QEIF = 0;
$0200	$94A4	    			BCF	PIR3, 2, 0
;extruder.c,603 :: 			}
$0202	$	L_interrupt_35:
;extruder.c,605 :: 			}
$0202	$	L_Interrupt_end:
$0202	$C12E	FFE9			MOVFF	?saveFSR0, FSR0L
$0206	$C12F	FFEA			MOVFF	?saveFSR0+1, FSR0H
$020A	$C130	FFE1			MOVFF	?saveFSR1, FSR1L
$020E	$C131	FFE2			MOVFF	?saveFSR1+1, FSR1H
$0212	$C1E9	F003			MOVFF	STSAVED_3, STACK_3
$0216	$C1E8	F002			MOVFF	STSAVED_2, STACK_2
$021A	$C1E7	F001			MOVFF	STSAVED_1, STACK_1
$021E	$C1E6	F000			MOVFF	STSAVED_0, STACK_0
$0222	$0011	    			RETFIE
$0224	$	_SETFUN32:
$0224	$0100	    			MOVLB	0
$0226	$840B	    			BSF	STACK_11, 2, 0
$0228	$AE0B	    			BTFSS	STACK_11, 7, 0
$022A	$EF1E	F001			GOTO	SETFUN32EEE
$022E	$0E01	    			MOVLW	0x01
$0230	$6E03	    			MOVWF	STACK_3, 0
$0232	$6A02	    			CLRF	STACK_2, 0
$0234	$6A01	    			CLRF	STACK_1, 0
$0236	$6A00	    			CLRF	STACK_0, 0
$0238	$360A	    			RLCF	STACK_10, F, 0
$023A	$3202	    			RRCF	STACK_2, F, 0
$023C	$	SETFUN32EEE:
$023C	$0EFF	    			MOVLW	0xFF
$023E	$0012	    			RETURN
$000C	$	_FIXSIGN32:
$000C	$0100	    			MOVLB	0
$000E	$AE0A	    			BTFSS	STACK_10, 7, 0
$0010	$9E02	    			BCF	STACK_2, 7, 0
$0012	$0E00	    			MOVLW	0
$0014	$0012	    			RETURN
$0240	$	_SETFOV32:
$0240	$0100	    			MOVLB	0
$0242	$820B	    			BSF	STACK_11, 1, 0
$0244	$AE0B	    			BTFSS	STACK_11, 7, 0
$0246	$EF2B	F001			GOTO	SETFOV32EEE
$024A	$6803	    			SETF	STACK_3, 0
$024C	$6802	    			SETF	STACK_2, 0
$024E	$6801	    			SETF	STACK_1, 0
$0250	$6800	    			SETF	STACK_0, 0
$0252	$360A	    			RLCF	STACK_10, F, 0
$0254	$3202	    			RRCF	STACK_2, F, 0
$0256	$	SETFOV32EEE:
$0256	$0EFF	    			MOVLW	0xFF
$0258	$0012	    			RETURN
$025A	$	_RES032:
$025A	$0100	    			MOVLB	0
$025C	$6A02	    			CLRF	STACK_2, 0
$025E	$6A01	    			CLRF	STACK_1, 0
$0260	$6A00	    			CLRF	STACK_0, 0
$0262	$6A08	    			CLRF	STACK_8, 0
$0264	$6A03	    			CLRF	STACK_3, 0
$0266	$0E00	    			MOVLW	0
$0268	$0012	    			RETURN
$026A	$	_NRM4032:
$026A	$0100	    			MOVLB	0
$026C	$B00C	    			BTFSC	STACK_12, 0, 0
$026E	$EF78	F001			GOTO	NRMRND4032
$0272	$A20C	    			BTFSS	STACK_12, 1, 0
$0274	$EF20	F002			GOTO	NRM40JPSETFOV32
$0278	$	NRM4032:
$0278	$6A0E	    			CLRF	STACK_14, 0
$027A	$0E00	    			MOVLW	0x00
$027C	$6402	    			CPFSGT	STACK_2, 0
$027E	$EF8F	F001			GOTO	NRM4032A
$0282	$	TNIB4032:
$0282	$0EF0	    			MOVLW	0xF0
$0284	$1402	    			ANDWF	STACK_2, W, 0
$0286	$A4D8	    			BTFSS	STATUS, Z, 0
$0288	$EF5A	F001			GOTO	NORM4032
$028C	$3A02	    			SWAPF	STACK_2, F, 0
$028E	$3801	    			SWAPF	STACK_1, W, 0
$0290	$0B0F	    			ANDLW	0x0F
$0292	$2602	    			ADDWF	STACK_2, F, 0
$0294	$3801	    			SWAPF	STACK_1, W, 0
$0296	$0BF0	    			ANDLW	0xF0
$0298	$6E01	    			MOVWF	STACK_1, 0
$029A	$3800	    			SWAPF	STACK_0, W, 0
$029C	$0B0F	    			ANDLW	0x0F
$029E	$2601	    			ADDWF	STACK_1, F, 0
$02A0	$3800	    			SWAPF	STACK_0, W, 0
$02A2	$0BF0	    			ANDLW	0xF0
$02A4	$6E00	    			MOVWF	STACK_0, 0
$02A6	$3808	    			SWAPF	STACK_8, W, 0
$02A8	$0B0F	    			ANDLW	0x0F
$02AA	$2600	    			ADDWF	STACK_0, F, 0
$02AC	$3808	    			SWAPF	STACK_8, W, 0
$02AE	$0BF0	    			ANDLW	0xF0
$02B0	$6E08	    			MOVWF	STACK_8, 0
$02B2	$840E	    			BSF	STACK_14, 2, 0
$02B4	$	NORM4032:
$02B4	$90D8	    			BCF	STATUS, C, 0
$02B6	$BE02	    			BTFSC	STACK_2, 7, 0
$02B8	$EF73	F001			GOTO	TNORMUN4032
$02BC	$3608	    			RLCF	STACK_8, F, 0
$02BE	$3600	    			RLCF	STACK_0, F, 0
$02C0	$3601	    			RLCF	STACK_1, F, 0
$02C2	$3602	    			RLCF	STACK_2, F, 0
$02C4	$2A0E	    			INCF	STACK_14, F, 0
$02C6	$BE02	    			BTFSC	STACK_2, 7, 0
$02C8	$EF73	F001			GOTO	TNORMUN4032
$02CC	$3608	    			RLCF	STACK_8, F, 0
$02CE	$3600	    			RLCF	STACK_0, F, 0
$02D0	$3601	    			RLCF	STACK_1, F, 0
$02D2	$3602	    			RLCF	STACK_2, F, 0
$02D4	$2A0E	    			INCF	STACK_14, F, 0
$02D6	$BE02	    			BTFSC	STACK_2, 7, 0
$02D8	$EF73	F001			GOTO	TNORMUN4032
$02DC	$3608	    			RLCF	STACK_8, F, 0
$02DE	$3600	    			RLCF	STACK_0, F, 0
$02E0	$3601	    			RLCF	STACK_1, F, 0
$02E2	$3602	    			RLCF	STACK_2, F, 0
$02E4	$2A0E	    			INCF	STACK_14, F, 0
$02E6	$	TNORMUN4032:
$02E6	$500E	    			MOVF	STACK_14, W, 0
$02E8	$6403	    			CPFSGT	STACK_3, 0
$02EA	$EF14	F002			GOTO	NRM40JPSETFUN32
$02EE	$5E03	    			SUBWF	STACK_3, F, 0
$02F0	$	NRMRND4032:
$02F0	$BC0B	    			BTFSC	STACK_11, 6, 0
$02F2	$AE08	    			BTFSS	STACK_8, 7, 0
$02F4	$EF1A	F002			GOTO	NRM40JPFIXSIGN32
$02F8	$80D8	    			BSF	STATUS, C, 0
$02FA	$0E80	    			MOVLW	0x80
$02FC	$6408	    			CPFSGT	STACK_8, 0
$02FE	$3000	    			RRCF	STACK_0, W, 0
$0300	$0E00	    			MOVLW	0x00
$0302	$2200	    			ADDWFC	STACK_0, F, 0
$0304	$2201	    			ADDWFC	STACK_1, F, 0
$0306	$2202	    			ADDWFC	STACK_2, F, 0
$0308	$A0D8	    			BTFSS	STATUS, C, 0
$030A	$EF1A	F002			GOTO	NRM40JPFIXSIGN32
$030E	$3202	    			RRCF	STACK_2, F, 0
$0310	$3201	    			RRCF	STACK_1, F, 0
$0312	$3200	    			RRCF	STACK_0, F, 0
$0314	$4A03	    			INFSNZ	STACK_3, F, 0
$0316	$EF20	F002			GOTO	NRM40JPSETFOV32
$031A	$EF1A	F002			GOTO	NRM40JPFIXSIGN32
$031E	$	NRM4032A:
$031E	$C001	F002			MOVFF	STACK_1, STACK_2
$0322	$C000	F001			MOVFF	STACK_0, STACK_1
$0326	$C008	F000			MOVFF	STACK_8, STACK_0
$032A	$6A08	    			CLRF	STACK_8, 0
$032C	$0E00	    			MOVLW	0x00
$032E	$860E	    			BSF	STACK_14, 3, 0
$0330	$6402	    			CPFSGT	STACK_2, 0
$0332	$EFC6	F001			GOTO	NRM4032B
$0336	$	TNIB4032A:
$0336	$0EF0	    			MOVLW	0xF0
$0338	$1402	    			ANDWF	STACK_2, W, 0
$033A	$A4D8	    			BTFSS	STATUS, Z, 0
$033C	$EFAE	F001			GOTO	NORM4032A
$0340	$3A02	    			SWAPF	STACK_2, F, 0
$0342	$3801	    			SWAPF	STACK_1, W, 0
$0344	$0B0F	    			ANDLW	0x0F
$0346	$2602	    			ADDWF	STACK_2, F, 0
$0348	$3801	    			SWAPF	STACK_1, W, 0
$034A	$0BF0	    			ANDLW	0xF0
$034C	$6E01	    			MOVWF	STACK_1, 0
$034E	$3800	    			SWAPF	STACK_0, W, 0
$0350	$0B0F	    			ANDLW	0x0F
$0352	$2601	    			ADDWF	STACK_1, F, 0
$0354	$3800	    			SWAPF	STACK_0, W, 0
$0356	$0BF0	    			ANDLW	0xF0
$0358	$6E00	    			MOVWF	STACK_0, 0
$035A	$840E	    			BSF	STACK_14, 2, 0
$035C	$	NORM4032A:
$035C	$90D8	    			BCF	STATUS, C, 0
$035E	$BE02	    			BTFSC	STACK_2, 7, 0
$0360	$EF73	F001			GOTO	TNORMUN4032
$0364	$3600	    			RLCF	STACK_0, F, 0
$0366	$3601	    			RLCF	STACK_1, F, 0
$0368	$3602	    			RLCF	STACK_2, F, 0
$036A	$2A0E	    			INCF	STACK_14, F, 0
$036C	$BE02	    			BTFSC	STACK_2, 7, 0
$036E	$EF73	F001			GOTO	TNORMUN4032
$0372	$3600	    			RLCF	STACK_0, F, 0
$0374	$3601	    			RLCF	STACK_1, F, 0
$0376	$3602	    			RLCF	STACK_2, F, 0
$0378	$2A0E	    			INCF	STACK_14, F, 0
$037A	$BE02	    			BTFSC	STACK_2, 7, 0
$037C	$EF73	F001			GOTO	TNORMUN4032
$0380	$3600	    			RLCF	STACK_0, F, 0
$0382	$3601	    			RLCF	STACK_1, F, 0
$0384	$3602	    			RLCF	STACK_2, F, 0
$0386	$2A0E	    			INCF	STACK_14, F, 0
$0388	$EF73	F001			GOTO	TNORMUN4032
$038C	$	NRM4032B:
$038C	$C001	F002			MOVFF	STACK_1, STACK_2
$0390	$C000	F001			MOVFF	STACK_0, STACK_1
$0394	$6A00	    			CLRF	STACK_0, 0
$0396	$0E00	    			MOVLW	0x00
$0398	$960E	    			BCF	STACK_14, 3, 0
$039A	$880E	    			BSF	STACK_14, 4, 0
$039C	$6402	    			CPFSGT	STACK_2, 0
$039E	$EFF3	F001			GOTO	NRM4032C
$03A2	$	TNIB4032B:
$03A2	$0EF0	    			MOVLW	0xF0
$03A4	$1402	    			ANDWF	STACK_2, W, 0
$03A6	$A4D8	    			BTFSS	STATUS, Z, 0
$03A8	$EFDE	F001			GOTO	NORM4032B
$03AC	$3A02	    			SWAPF	STACK_2, F, 0
$03AE	$3801	    			SWAPF	STACK_1, W, 0
$03B0	$0B0F	    			ANDLW	0x0F
$03B2	$2602	    			ADDWF	STACK_2, F, 0
$03B4	$3801	    			SWAPF	STACK_1, W, 0
$03B6	$0BF0	    			ANDLW	0xF0
$03B8	$6E01	    			MOVWF	STACK_1, 0
$03BA	$840E	    			BSF	STACK_14, 2, 0
$03BC	$	NORM4032B:
$03BC	$90D8	    			BCF	STATUS, C, 0
$03BE	$BE02	    			BTFSC	STACK_2, 7, 0
$03C0	$EF73	F001			GOTO	TNORMUN4032
$03C4	$3601	    			RLCF	STACK_1, F, 0
$03C6	$3602	    			RLCF	STACK_2, F, 0
$03C8	$2A0E	    			INCF	STACK_14, F, 0
$03CA	$BE02	    			BTFSC	STACK_2, 7, 0
$03CC	$EF73	F001			GOTO	TNORMUN4032
$03D0	$3601	    			RLCF	STACK_1, F, 0
$03D2	$3602	    			RLCF	STACK_2, F, 0
$03D4	$2A0E	    			INCF	STACK_14, F, 0
$03D6	$BE02	    			BTFSC	STACK_2, 7, 0
$03D8	$EF73	F001			GOTO	TNORMUN4032
$03DC	$3601	    			RLCF	STACK_1, F, 0
$03DE	$3602	    			RLCF	STACK_2, F, 0
$03E0	$2A0E	    			INCF	STACK_14, F, 0
$03E2	$EF73	F001			GOTO	TNORMUN4032
$03E6	$	NRM4032C:
$03E6	$C001	F002			MOVFF	STACK_1, STACK_2
$03EA	$6A01	    			CLRF	STACK_1, 0
$03EC	$0E00	    			MOVLW	0x00
$03EE	$860E	    			BSF	STACK_14, 3, 0
$03F0	$6402	    			CPFSGT	STACK_2, 0
$03F2	$EF26	F002			GOTO	NRM40JPRES032
$03F6	$	TNIB4032C:
$03F6	$0EF0	    			MOVLW	0xF0
$03F8	$1402	    			ANDWF	STACK_2, W, 0
$03FA	$A4D8	    			BTFSS	STATUS, Z, 0
$03FC	$EF02	F002			GOTO	NORM4032C
$0400	$3A02	    			SWAPF	STACK_2, F, 0
$0402	$840E	    			BSF	STACK_14, 2, 0
$0404	$	NORM4032C:
$0404	$90D8	    			BCF	STATUS, C, 0
$0406	$BE02	    			BTFSC	STACK_2, 7, 0
$0408	$EF73	F001			GOTO	TNORMUN4032
$040C	$3602	    			RLCF	STACK_2, F, 0
$040E	$2A0E	    			INCF	STACK_14, F, 0
$0410	$BE02	    			BTFSC	STACK_2, 7, 0
$0412	$EF73	F001			GOTO	TNORMUN4032
$0416	$3602	    			RLCF	STACK_2, F, 0
$0418	$2A0E	    			INCF	STACK_14, F, 0
$041A	$BE02	    			BTFSC	STACK_2, 7, 0
$041C	$EF73	F001			GOTO	TNORMUN4032
$0420	$3602	    			RLCF	STACK_2, F, 0
$0422	$2A0E	    			INCF	STACK_14, F, 0
$0424	$EF73	F001			GOTO	TNORMUN4032
$0428	$	NRM40JPSETFUN32:
$0428	$0E01	    			MOVLW	0x01
$042A	$6E0C	    			MOVWF	STACK_12, 0
$042C	$EC12	F001			CALL	_SETFUN32
$0430	$EF2A	F002			GOTO	NRM40EEE
$0434	$	NRM40JPFIXSIGN32:
$0434	$0E02	    			MOVLW	0x02
$0436	$6E0C	    			MOVWF	STACK_12, 0
$0438	$EC06	F000			CALL	_FIXSIGN32
$043C	$EF2A	F002			GOTO	NRM40EEE
$0440	$	NRM40JPSETFOV32:
$0440	$0E04	    			MOVLW	0x04
$0442	$6E0C	    			MOVWF	STACK_12, 0
$0444	$EC20	F001			CALL	_SETFOV32
$0448	$EF2A	F002			GOTO	NRM40EEE
$044C	$	NRM40JPRES032:
$044C	$0E08	    			MOVLW	0x08
$044E	$6E0C	    			MOVWF	STACK_12, 0
$0450	$EC2D	F001			CALL	_RES032
$0454	$	NRM40EEE:
$0454	$0012	    			RETURN
$0456	$	_SETIOV3224:
$0456	$0100	    			MOVLB	0
$0458	$800B	    			BSF	STACK_11, 0, 0
$045A	$AE0B	    			BTFSS	STACK_11, 7, 0
$045C	$EF38	F002			GOTO	SETIOV3224EEE
$0460	$6A02	    			CLRF	STACK_2, 0
$0462	$AE0A	    			BTFSS	STACK_10, 7, 0
$0464	$0EFF	    			MOVLW	0xFF
$0466	$6E02	    			MOVWF	STACK_2, 0
$0468	$6E01	    			MOVWF	STACK_1, 0
$046A	$6E00	    			MOVWF	STACK_0, 0
$046C	$360A	    			RLCF	STACK_10, F, 0
$046E	$3202	    			RRCF	STACK_2, F, 0
$0470	$	SETIOV3224EEE:
$0470	$0EFF	    			MOVLW	0xFF
$0472	$0012	    			RETURN
$0474	$	_Add_32x32_FP:
$0474	$0100	    			MOVLB	0
$0476	$	FPA32:
$0476	$5002	    			MOVF	STACK_2, W, 0
$0478	$1806	    			XORWF	STACK_6, W, 0
$047A	$6E0E	    			MOVWF	STACK_14, 0
$047C	$6A08	    			CLRF	STACK_8, 0
$047E	$6A09	    			CLRF	STACK_9, 0
$0480	$6A0B	    			CLRF	STACK_11, 0
$0482	$5003	    			MOVF	STACK_3, W, 0
$0484	$6407	    			CPFSGT	STACK_7, 0
$0486	$EF2E	F003			GOTO	USEA32
$048A	$	USEB32:
$048A	$5006	    			MOVF	STACK_6, W, 0
$048C	$6E0A	    			MOVWF	STACK_10, 0
$048E	$8E06	    			BSF	STACK_6, 7, 0
$0490	$8E02	    			BSF	STACK_2, 7, 0
$0492	$5003	    			MOVF	STACK_3, W, 0
$0494	$6E0B	    			MOVWF	STACK_11, 0
$0496	$5007	    			MOVF	STACK_7, W, 0
$0498	$6E03	    			MOVWF	STACK_3, 0
$049A	$0E00	    			MOVLW	0x00
$049C	$640B	    			CPFSGT	STACK_11, 0
$049E	$EF7E	F002			GOTO	BRETURN32
$04A2	$500B	    			MOVF	STACK_11, W, 0
$04A4	$5E07	    			SUBWF	STACK_7, F, 0
$04A6	$B4D8	    			BTFSC	STATUS, Z, 0
$04A8	$EF1F	F003			GOTO	BLIGNED32
$04AC	$0E07	    			MOVLW	7
$04AE	$6407	    			CPFSGT	STACK_7, 0
$04B0	$EFED	F002			GOTO	BNIB32
$04B4	$5E07	    			SUBWF	STACK_7, F, 0
$04B6	$C000	F008			MOVFF	STACK_0, STACK_8
$04BA	$C001	F000			MOVFF	STACK_1, STACK_0
$04BE	$C002	F001			MOVFF	STACK_2, STACK_1
$04C2	$6A02	    			CLRF	STACK_2, 0
$04C4	$4E07	    			DCFSNZ	STACK_7, F, 0
$04C6	$EF1F	F003			GOTO	BLIGNED32
$04CA	$6407	    			CPFSGT	STACK_7, 0
$04CC	$EFC2	F002			GOTO	BNIB32A
$04D0	$5E07	    			SUBWF	STACK_7, F, 0
$04D2	$C000	F008			MOVFF	STACK_0, STACK_8
$04D6	$C001	F000			MOVFF	STACK_1, STACK_0
$04DA	$6A01	    			CLRF	STACK_1, 0
$04DC	$4E07	    			DCFSNZ	STACK_7, F, 0
$04DE	$EF1F	F003			GOTO	BLIGNED32
$04E2	$6407	    			CPFSGT	STACK_7, 0
$04E4	$EFA0	F002			GOTO	BNIB32B
$04E8	$5E07	    			SUBWF	STACK_7, F, 0
$04EA	$C000	F008			MOVFF	STACK_0, STACK_8
$04EE	$6A00	    			CLRF	STACK_0, 0
$04F0	$4E07	    			DCFSNZ	STACK_7, F, 0
$04F2	$EF1F	F003			GOTO	BLIGNED32
$04F6	$6407	    			CPFSGT	STACK_7, 0
$04F8	$EF87	F002			GOTO	BNIB32C
$04FC	$	BRETURN32:
$04FC	$C00A	F002			MOVFF	STACK_10, STACK_2
$0500	$C005	F001			MOVFF	STACK_5, STACK_1
$0504	$C004	F000			MOVFF	STACK_4, STACK_0
$0508	$6A08	    			CLRF	STACK_8, 0
$050A	$EF4B	F004			GOTO	ADDEOK
$050E	$	BNIB32C:
$050E	$0E03	    			MOVLW	3
$0510	$6407	    			CPFSGT	STACK_7, 0
$0512	$EF92	F002			GOTO	BLOOP32C
$0516	$5E07	    			SUBWF	STACK_7, F, 0
$0518	$3808	    			SWAPF	STACK_8, W, 0
$051A	$0B0F	    			ANDLW	0x0F
$051C	$6E08	    			MOVWF	STACK_8, 0
$051E	$4E07	    			DCFSNZ	STACK_7, F, 0
$0520	$EF1F	F003			GOTO	BLIGNED32
$0524	$	BLOOP32C:
$0524	$90D8	    			BCF	STATUS, C, 0
$0526	$3208	    			RRCF	STACK_8, F, 0
$0528	$4E07	    			DCFSNZ	STACK_7, F, 0
$052A	$EF1F	F003			GOTO	BLIGNED32
$052E	$90D8	    			BCF	STATUS, C, 0
$0530	$3208	    			RRCF	STACK_8, F, 0
$0532	$4E07	    			DCFSNZ	STACK_7, F, 0
$0534	$EF1F	F003			GOTO	BLIGNED32
$0538	$90D8	    			BCF	STATUS, C, 0
$053A	$3208	    			RRCF	STACK_8, F, 0
$053C	$EF1F	F003			GOTO	BLIGNED32
$0540	$	BNIB32B:
$0540	$0E03	    			MOVLW	3
$0542	$6407	    			CPFSGT	STACK_7, 0
$0544	$EFB1	F002			GOTO	BLOOP32B
$0548	$5E07	    			SUBWF	STACK_7, F, 0
$054A	$3808	    			SWAPF	STACK_8, W, 0
$054C	$0B0F	    			ANDLW	0x0F
$054E	$6E08	    			MOVWF	STACK_8, 0
$0550	$3800	    			SWAPF	STACK_0, W, 0
$0552	$0BF0	    			ANDLW	0xF0
$0554	$2608	    			ADDWF	STACK_8, F, 0
$0556	$3800	    			SWAPF	STACK_0, W, 0
$0558	$0B0F	    			ANDLW	0x0F
$055A	$6E00	    			MOVWF	STACK_0, 0
$055C	$4E07	    			DCFSNZ	STACK_7, F, 0
$055E	$EF1F	F003			GOTO	BLIGNED32
$0562	$	BLOOP32B:
$0562	$90D8	    			BCF	STATUS, C, 0
$0564	$3200	    			RRCF	STACK_0, F, 0
$0566	$3208	    			RRCF	STACK_8, F, 0
$0568	$4E07	    			DCFSNZ	STACK_7, F, 0
$056A	$EF1F	F003			GOTO	BLIGNED32
$056E	$90D8	    			BCF	STATUS, C, 0
$0570	$3200	    			RRCF	STACK_0, F, 0
$0572	$3208	    			RRCF	STACK_8, F, 0
$0574	$4E07	    			DCFSNZ	STACK_7, F, 0
$0576	$EF1F	F003			GOTO	BLIGNED32
$057A	$90D8	    			BCF	STATUS, C, 0
$057C	$3200	    			RRCF	STACK_0, F, 0
$057E	$3208	    			RRCF	STACK_8, F, 0
$0580	$EF1F	F003			GOTO	BLIGNED32
$0584	$	BNIB32A:
$0584	$0E03	    			MOVLW	3
$0586	$6407	    			CPFSGT	STACK_7, 0
$0588	$EFD9	F002			GOTO	BLOOP32A
$058C	$5E07	    			SUBWF	STACK_7, F, 0
$058E	$3808	    			SWAPF	STACK_8, W, 0
$0590	$0B0F	    			ANDLW	0x0F
$0592	$6E08	    			MOVWF	STACK_8, 0
$0594	$3800	    			SWAPF	STACK_0, W, 0
$0596	$0BF0	    			ANDLW	0xF0
$0598	$2608	    			ADDWF	STACK_8, F, 0
$059A	$3800	    			SWAPF	STACK_0, W, 0
$059C	$0B0F	    			ANDLW	0x0F
$059E	$6E00	    			MOVWF	STACK_0, 0
$05A0	$3801	    			SWAPF	STACK_1, W, 0
$05A2	$0BF0	    			ANDLW	0xF0
$05A4	$2600	    			ADDWF	STACK_0, F, 0
$05A6	$3801	    			SWAPF	STACK_1, W, 0
$05A8	$0B0F	    			ANDLW	0x0F
$05AA	$6E01	    			MOVWF	STACK_1, 0
$05AC	$4E07	    			DCFSNZ	STACK_7, F, 0
$05AE	$EF1F	F003			GOTO	BLIGNED32
$05B2	$	BLOOP32A:
$05B2	$90D8	    			BCF	STATUS, C, 0
$05B4	$3201	    			RRCF	STACK_1, F, 0
$05B6	$3200	    			RRCF	STACK_0, F, 0
$05B8	$3208	    			RRCF	STACK_8, F, 0
$05BA	$4E07	    			DCFSNZ	STACK_7, F, 0
$05BC	$EF1F	F003			GOTO	BLIGNED32
$05C0	$90D8	    			BCF	STATUS, C, 0
$05C2	$3201	    			RRCF	STACK_1, F, 0
$05C4	$3200	    			RRCF	STACK_0, F, 0
$05C6	$3208	    			RRCF	STACK_8, F, 0
$05C8	$4E07	    			DCFSNZ	STACK_7, F, 0
$05CA	$EF1F	F003			GOTO	BLIGNED32
$05CE	$90D8	    			BCF	STATUS, C, 0
$05D0	$3201	    			RRCF	STACK_1, F, 0
$05D2	$3200	    			RRCF	STACK_0, F, 0
$05D4	$3208	    			RRCF	STACK_8, F, 0
$05D6	$EF1F	F003			GOTO	BLIGNED32
$05DA	$	BNIB32:
$05DA	$0E03	    			MOVLW	3
$05DC	$6407	    			CPFSGT	STACK_7, 0
$05DE	$EF0A	F003			GOTO	BLOOP32
$05E2	$5E07	    			SUBWF	STACK_7, F, 0
$05E4	$3808	    			SWAPF	STACK_8, W, 0
$05E6	$0B0F	    			ANDLW	0x0F
$05E8	$6E08	    			MOVWF	STACK_8, 0
$05EA	$3800	    			SWAPF	STACK_0, W, 0
$05EC	$0BF0	    			ANDLW	0xF0
$05EE	$2608	    			ADDWF	STACK_8, F, 0
$05F0	$3800	    			SWAPF	STACK_0, W, 0
$05F2	$0B0F	    			ANDLW	0x0F
$05F4	$6E00	    			MOVWF	STACK_0, 0
$05F6	$3801	    			SWAPF	STACK_1, W, 0
$05F8	$0BF0	    			ANDLW	0xF0
$05FA	$2600	    			ADDWF	STACK_0, F, 0
$05FC	$3801	    			SWAPF	STACK_1, W, 0
$05FE	$0B0F	    			ANDLW	0x0F
$0600	$6E01	    			MOVWF	STACK_1, 0
$0602	$3802	    			SWAPF	STACK_2, W, 0
$0604	$0BF0	    			ANDLW	0xF0
$0606	$2601	    			ADDWF	STACK_1, F, 0
$0608	$3802	    			SWAPF	STACK_2, W, 0
$060A	$0B0F	    			ANDLW	0x0F
$060C	$6E02	    			MOVWF	STACK_2, 0
$060E	$4E07	    			DCFSNZ	STACK_7, F, 0
$0610	$EF1F	F003			GOTO	BLIGNED32
$0614	$	BLOOP32:
$0614	$90D8	    			BCF	STATUS, C, 0
$0616	$3202	    			RRCF	STACK_2, F, 0
$0618	$3201	    			RRCF	STACK_1, F, 0
$061A	$3200	    			RRCF	STACK_0, F, 0
$061C	$3208	    			RRCF	STACK_8, F, 0
$061E	$4E07	    			DCFSNZ	STACK_7, F, 0
$0620	$EF1F	F003			GOTO	BLIGNED32
$0624	$90D8	    			BCF	STATUS, C, 0
$0626	$3202	    			RRCF	STACK_2, F, 0
$0628	$3201	    			RRCF	STACK_1, F, 0
$062A	$3200	    			RRCF	STACK_0, F, 0
$062C	$3208	    			RRCF	STACK_8, F, 0
$062E	$4E07	    			DCFSNZ	STACK_7, F, 0
$0630	$EF1F	F003			GOTO	BLIGNED32
$0634	$90D8	    			BCF	STATUS, C, 0
$0636	$3202	    			RRCF	STACK_2, F, 0
$0638	$3201	    			RRCF	STACK_1, F, 0
$063A	$3200	    			RRCF	STACK_0, F, 0
$063C	$3208	    			RRCF	STACK_8, F, 0
$063E	$	BLIGNED32:
$063E	$6A09	    			CLRF	STACK_9, 0
$0640	$0E00	    			MOVLW	0x00
$0642	$AE0E	    			BTFSS	STACK_14, 7, 0
$0644	$EF13	F004			GOTO	AOK32
$0648	$1E08	    			COMF	STACK_8, F, 0
$064A	$1E00	    			COMF	STACK_0, F, 0
$064C	$1E01	    			COMF	STACK_1, F, 0
$064E	$1E02	    			COMF	STACK_2, F, 0
$0650	$2A08	    			INCF	STACK_8, F, 0
$0652	$2200	    			ADDWFC	STACK_0, F, 0
$0654	$2201	    			ADDWFC	STACK_1, F, 0
$0656	$2202	    			ADDWFC	STACK_2, F, 0
$0658	$EF13	F004			GOTO	AOK32
$065C	$	USEA32:
$065C	$5007	    			MOVF	STACK_7, W, 0
$065E	$A4D8	    			BTFSS	STATUS, Z, 0
$0660	$EF34	F003			GOTO	BNE032
$0664	$EF4B	F004			GOTO	ADDEOK
$0668	$	BNE032:
$0668	$6A09	    			CLRF	STACK_9, 0
$066A	$C002	F00A			MOVFF	STACK_2, STACK_10
$066E	$8E02	    			BSF	STACK_2, 7, 0
$0670	$8E06	    			BSF	STACK_6, 7, 0
$0672	$5007	    			MOVF	STACK_7, W, 0
$0674	$5C03	    			SUBWF	STACK_3, W, 0
$0676	$6E07	    			MOVWF	STACK_7, 0
$0678	$B4D8	    			BTFSC	STATUS, Z, 0
$067A	$EF06	F004			GOTO	ALIGNED32
$067E	$0E07	    			MOVLW	7
$0680	$6407	    			CPFSGT	STACK_7, 0
$0682	$EFD4	F003			GOTO	ANIB32
$0686	$5E07	    			SUBWF	STACK_7, F, 0
$0688	$5004	    			MOVF	STACK_4, W, 0
$068A	$6E09	    			MOVWF	STACK_9, 0
$068C	$5005	    			MOVF	STACK_5, W, 0
$068E	$6E04	    			MOVWF	STACK_4, 0
$0690	$5006	    			MOVF	STACK_6, W, 0
$0692	$6E05	    			MOVWF	STACK_5, 0
$0694	$6A06	    			CLRF	STACK_6, 0
$0696	$4E07	    			DCFSNZ	STACK_7, F, 0
$0698	$EF06	F004			GOTO	ALIGNED32
$069C	$0E07	    			MOVLW	7
$069E	$6407	    			CPFSGT	STACK_7, 0
$06A0	$EFA9	F003			GOTO	ANIB32A
$06A4	$5E07	    			SUBWF	STACK_7, F, 0
$06A6	$5004	    			MOVF	STACK_4, W, 0
$06A8	$6E09	    			MOVWF	STACK_9, 0
$06AA	$5005	    			MOVF	STACK_5, W, 0
$06AC	$6E04	    			MOVWF	STACK_4, 0
$06AE	$6A05	    			CLRF	STACK_5, 0
$06B0	$4E07	    			DCFSNZ	STACK_7, F, 0
$06B2	$EF06	F004			GOTO	ALIGNED32
$06B6	$0E07	    			MOVLW	7
$06B8	$6407	    			CPFSGT	STACK_7, 0
$06BA	$EF87	F003			GOTO	ANIB32B
$06BE	$5E07	    			SUBWF	STACK_7, F, 0
$06C0	$5004	    			MOVF	STACK_4, W, 0
$06C2	$6E09	    			MOVWF	STACK_9, 0
$06C4	$6A04	    			CLRF	STACK_4, 0
$06C6	$4E07	    			DCFSNZ	STACK_7, F, 0
$06C8	$EF06	F004			GOTO	ALIGNED32
$06CC	$0E07	    			MOVLW	7
$06CE	$6407	    			CPFSGT	STACK_7, 0
$06D0	$EF6E	F003			GOTO	ANIB32C
$06D4	$C00A	F002			MOVFF	STACK_10, STACK_2
$06D8	$EF4B	F004			GOTO	ADDEOK
$06DC	$	ANIB32C:
$06DC	$0E03	    			MOVLW	3
$06DE	$6407	    			CPFSGT	STACK_7, 0
$06E0	$EF79	F003			GOTO	ALOOP32C
$06E4	$5E07	    			SUBWF	STACK_7, F, 0
$06E6	$3809	    			SWAPF	STACK_9, W, 0
$06E8	$0B0F	    			ANDLW	0x0F
$06EA	$6E09	    			MOVWF	STACK_9, 0
$06EC	$4E07	    			DCFSNZ	STACK_7, F, 0
$06EE	$EF06	F004			GOTO	ALIGNED32
$06F2	$	ALOOP32C:
$06F2	$90D8	    			BCF	STATUS, C, 0
$06F4	$3209	    			RRCF	STACK_9, F, 0
$06F6	$4E07	    			DCFSNZ	STACK_7, F, 0
$06F8	$EF06	F004			GOTO	ALIGNED32
$06FC	$90D8	    			BCF	STATUS, C, 0
$06FE	$3209	    			RRCF	STACK_9, F, 0
$0700	$4E07	    			DCFSNZ	STACK_7, F, 0
$0702	$EF06	F004			GOTO	ALIGNED32
$0706	$90D8	    			BCF	STATUS, C, 0
$0708	$3209	    			RRCF	STACK_9, F, 0
$070A	$EF06	F004			GOTO	ALIGNED32
$070E	$	ANIB32B:
$070E	$0E03	    			MOVLW	3
$0710	$6407	    			CPFSGT	STACK_7, 0
$0712	$EF98	F003			GOTO	ALOOP32B
$0716	$5E07	    			SUBWF	STACK_7, F, 0
$0718	$3809	    			SWAPF	STACK_9, W, 0
$071A	$0B0F	    			ANDLW	0x0F
$071C	$6E09	    			MOVWF	STACK_9, 0
$071E	$3804	    			SWAPF	STACK_4, W, 0
$0720	$0BF0	    			ANDLW	0xF0
$0722	$2609	    			ADDWF	STACK_9, F, 0
$0724	$3804	    			SWAPF	STACK_4, W, 0
$0726	$0B0F	    			ANDLW	0x0F
$0728	$6E04	    			MOVWF	STACK_4, 0
$072A	$4E07	    			DCFSNZ	STACK_7, F, 0
$072C	$EF06	F004			GOTO	ALIGNED32
$0730	$	ALOOP32B:
$0730	$90D8	    			BCF	STATUS, C, 0
$0732	$3204	    			RRCF	STACK_4, F, 0
$0734	$3209	    			RRCF	STACK_9, F, 0
$0736	$4E07	    			DCFSNZ	STACK_7, F, 0
$0738	$EF06	F004			GOTO	ALIGNED32
$073C	$90D8	    			BCF	STATUS, C, 0
$073E	$3204	    			RRCF	STACK_4, F, 0
$0740	$3209	    			RRCF	STACK_9, F, 0
$0742	$4E07	    			DCFSNZ	STACK_7, F, 0
$0744	$EF06	F004			GOTO	ALIGNED32
$0748	$90D8	    			BCF	STATUS, C, 0
$074A	$3204	    			RRCF	STACK_4, F, 0
$074C	$3209	    			RRCF	STACK_9, F, 0
$074E	$EF06	F004			GOTO	ALIGNED32
$0752	$	ANIB32A:
$0752	$0E03	    			MOVLW	3
$0754	$6407	    			CPFSGT	STACK_7, 0
$0756	$EFC0	F003			GOTO	ALOOP32A
$075A	$5E07	    			SUBWF	STACK_7, F, 0
$075C	$3809	    			SWAPF	STACK_9, W, 0
$075E	$0B0F	    			ANDLW	0x0F
$0760	$6E09	    			MOVWF	STACK_9, 0
$0762	$3804	    			SWAPF	STACK_4, W, 0
$0764	$0BF0	    			ANDLW	0xF0
$0766	$2609	    			ADDWF	STACK_9, F, 0
$0768	$3804	    			SWAPF	STACK_4, W, 0
$076A	$0B0F	    			ANDLW	0x0F
$076C	$6E04	    			MOVWF	STACK_4, 0
$076E	$3805	    			SWAPF	STACK_5, W, 0
$0770	$0BF0	    			ANDLW	0xF0
$0772	$2604	    			ADDWF	STACK_4, F, 0
$0774	$3805	    			SWAPF	STACK_5, W, 0
$0776	$0B0F	    			ANDLW	0x0F
$0778	$6E05	    			MOVWF	STACK_5, 0
$077A	$4E07	    			DCFSNZ	STACK_7, F, 0
$077C	$EF06	F004			GOTO	ALIGNED32
$0780	$	ALOOP32A:
$0780	$90D8	    			BCF	STATUS, C, 0
$0782	$3205	    			RRCF	STACK_5, F, 0
$0784	$3204	    			RRCF	STACK_4, F, 0
$0786	$3209	    			RRCF	STACK_9, F, 0
$0788	$4E07	    			DCFSNZ	STACK_7, F, 0
$078A	$EF06	F004			GOTO	ALIGNED32
$078E	$90D8	    			BCF	STATUS, C, 0
$0790	$3205	    			RRCF	STACK_5, F, 0
$0792	$3204	    			RRCF	STACK_4, F, 0
$0794	$3209	    			RRCF	STACK_9, F, 0
$0796	$4E07	    			DCFSNZ	STACK_7, F, 0
$0798	$EF06	F004			GOTO	ALIGNED32
$079C	$90D8	    			BCF	STATUS, C, 0
$079E	$3205	    			RRCF	STACK_5, F, 0
$07A0	$3204	    			RRCF	STACK_4, F, 0
$07A2	$3209	    			RRCF	STACK_9, F, 0
$07A4	$EF06	F004			GOTO	ALIGNED32
$07A8	$	ANIB32:
$07A8	$0E03	    			MOVLW	3
$07AA	$6407	    			CPFSGT	STACK_7, 0
$07AC	$EFF1	F003			GOTO	ALOOP32
$07B0	$5E07	    			SUBWF	STACK_7, F, 0
$07B2	$3809	    			SWAPF	STACK_9, W, 0
$07B4	$0B0F	    			ANDLW	0x0F
$07B6	$6E09	    			MOVWF	STACK_9, 0
$07B8	$3804	    			SWAPF	STACK_4, W, 0
$07BA	$0BF0	    			ANDLW	0xF0
$07BC	$2609	    			ADDWF	STACK_9, F, 0
$07BE	$3804	    			SWAPF	STACK_4, W, 0
$07C0	$0B0F	    			ANDLW	0x0F
$07C2	$6E04	    			MOVWF	STACK_4, 0
$07C4	$3805	    			SWAPF	STACK_5, W, 0
$07C6	$0BF0	    			ANDLW	0xF0
$07C8	$2604	    			ADDWF	STACK_4, F, 0
$07CA	$3805	    			SWAPF	STACK_5, W, 0
$07CC	$0B0F	    			ANDLW	0x0F
$07CE	$6E05	    			MOVWF	STACK_5, 0
$07D0	$3806	    			SWAPF	STACK_6, W, 0
$07D2	$0BF0	    			ANDLW	0xF0
$07D4	$2605	    			ADDWF	STACK_5, F, 0
$07D6	$3806	    			SWAPF	STACK_6, W, 0
$07D8	$0B0F	    			ANDLW	0x0F
$07DA	$6E06	    			MOVWF	STACK_6, 0
$07DC	$4E07	    			DCFSNZ	STACK_7, F, 0
$07DE	$EF06	F004			GOTO	ALIGNED32
$07E2	$	ALOOP32:
$07E2	$90D8	    			BCF	STATUS, C, 0
$07E4	$3206	    			RRCF	STACK_6, F, 0
$07E6	$3205	    			RRCF	STACK_5, F, 0
$07E8	$3204	    			RRCF	STACK_4, F, 0
$07EA	$3209	    			RRCF	STACK_9, F, 0
$07EC	$4E07	    			DCFSNZ	STACK_7, F, 0
$07EE	$EF06	F004			GOTO	ALIGNED32
$07F2	$90D8	    			BCF	STATUS, C, 0
$07F4	$3206	    			RRCF	STACK_6, F, 0
$07F6	$3205	    			RRCF	STACK_5, F, 0
$07F8	$3204	    			RRCF	STACK_4, F, 0
$07FA	$3209	    			RRCF	STACK_9, F, 0
$07FC	$4E07	    			DCFSNZ	STACK_7, F, 0
$07FE	$EF06	F004			GOTO	ALIGNED32
$0802	$90D8	    			BCF	STATUS, C, 0
$0804	$3206	    			RRCF	STACK_6, F, 0
$0806	$3205	    			RRCF	STACK_5, F, 0
$0808	$3204	    			RRCF	STACK_4, F, 0
$080A	$3209	    			RRCF	STACK_9, F, 0
$080C	$	ALIGNED32:
$080C	$6A08	    			CLRF	STACK_8, 0
$080E	$0E00	    			MOVLW	0x00
$0810	$AE0E	    			BTFSS	STACK_14, 7, 0
$0812	$EF13	F004			GOTO	AOK32
$0816	$1E09	    			COMF	STACK_9, F, 0
$0818	$1E04	    			COMF	STACK_4, F, 0
$081A	$1E05	    			COMF	STACK_5, F, 0
$081C	$1E06	    			COMF	STACK_6, F, 0
$081E	$2A09	    			INCF	STACK_9, F, 0
$0820	$2204	    			ADDWFC	STACK_4, F, 0
$0822	$2205	    			ADDWFC	STACK_5, F, 0
$0824	$2206	    			ADDWFC	STACK_6, F, 0
$0826	$	AOK32:
$0826	$5009	    			MOVF	STACK_9, W, 0
$0828	$2608	    			ADDWF	STACK_8, F, 0
$082A	$5004	    			MOVF	STACK_4, W, 0
$082C	$2200	    			ADDWFC	STACK_0, F, 0
$082E	$5005	    			MOVF	STACK_5, W, 0
$0830	$2201	    			ADDWFC	STACK_1, F, 0
$0832	$5006	    			MOVF	STACK_6, W, 0
$0834	$2202	    			ADDWFC	STACK_2, F, 0
$0836	$BE0E	    			BTFSC	STACK_14, 7, 0
$0838	$EF2A	F004			GOTO	ACOMP32
$083C	$A0D8	    			BTFSS	STATUS, C, 0
$083E	$EF39	F004			GOTO	ADDJPNRMRND4032
$0842	$3202	    			RRCF	STACK_2, F, 0
$0844	$3201	    			RRCF	STACK_1, F, 0
$0846	$3200	    			RRCF	STACK_0, F, 0
$0848	$3208	    			RRCF	STACK_8, F, 0
$084A	$3E03	    			INCFSZ	STACK_3, F, 0
$084C	$EF39	F004			GOTO	ADDJPNRMRND4032
$0850	$EF45	F004			GOTO	ADDJPSETFOV32
$0854	$	ACOMP32:
$0854	$B0D8	    			BTFSC	STATUS, C, 0
$0856	$EF3F	F004			GOTO	ADDJPNRM4032
$085A	$0E00	    			MOVLW	0x00
$085C	$1E08	    			COMF	STACK_8, F, 0
$085E	$1E00	    			COMF	STACK_0, F, 0
$0860	$1E01	    			COMF	STACK_1, F, 0
$0862	$1E02	    			COMF	STACK_2, F, 0
$0864	$2A08	    			INCF	STACK_8, F, 0
$0866	$2200	    			ADDWFC	STACK_0, F, 0
$0868	$2201	    			ADDWFC	STACK_1, F, 0
$086A	$2202	    			ADDWFC	STACK_2, F, 0
$086C	$7E0A	    			BTG	STACK_10, 7, 0
$086E	$EF3F	F004			GOTO	ADDJPNRM4032
$0872	$	ADDJPNRMRND4032:
$0872	$0E01	    			MOVLW	0x01
$0874	$6E0C	    			MOVWF	STACK_12, 0
$0876	$EC35	F001			CALL	_NRM4032
$087A	$EF4D	F004			GOTO	ADDEEE
$087E	$	ADDJPNRM4032:
$087E	$0E02	    			MOVLW	0x02
$0880	$6E0C	    			MOVWF	STACK_12, 0
$0882	$EC35	F001			CALL	_NRM4032
$0886	$EF4D	F004			GOTO	ADDEEE
$088A	$	ADDJPSETFOV32:
$088A	$0E04	    			MOVLW	0x04
$088C	$6E0C	    			MOVWF	STACK_12, 0
$088E	$EC20	F001			CALL	_SETFOV32
$0892	$EF4D	F004			GOTO	ADDEEE
$0896	$	ADDEOK:
$0896	$0E00	    			MOVLW	0x00
$0898	$6E0C	    			MOVWF	STACK_12, 0
$089A	$	ADDEEE:
$089A	$0012	    			RETURN
$089C	$	_NRM3232:
$089C	$0100	    			MOVLB	0
$089E	$6A0C	    			CLRF	STACK_12, 0
$08A0	$6A0E	    			CLRF	STACK_14, 0
$08A2	$5002	    			MOVF	STACK_2, W, 0
$08A4	$A4D8	    			BTFSS	STATUS, Z, 0
$08A6	$EF68	F004			GOTO	NORM3232
$08AA	$C001	F002			MOVFF	STACK_1, STACK_2
$08AE	$C000	F001			MOVFF	STACK_0, STACK_1
$08B2	$6A00	    			CLRF	STACK_0, 0
$08B4	$860E	    			BSF	STACK_14, 3, 0
$08B6	$5002	    			MOVF	STACK_2, W, 0
$08B8	$A4D8	    			BTFSS	STATUS, Z, 0
$08BA	$EF68	F004			GOTO	NORM3232
$08BE	$C001	F002			MOVFF	STACK_1, STACK_2
$08C2	$6A01	    			CLRF	STACK_1, 0
$08C4	$960E	    			BCF	STACK_14, 3, 0
$08C6	$880E	    			BSF	STACK_14, 4, 0
$08C8	$5002	    			MOVF	STACK_2, W, 0
$08CA	$B4D8	    			BTFSC	STATUS, Z, 0
$08CC	$EF7A	F004			GOTO	JPNRES032
$08D0	$	NORM3232:
$08D0	$500E	    			MOVF	STACK_14, W, 0
$08D2	$5E03	    			SUBWF	STACK_3, F, 0
$08D4	$A4D8	    			BTFSS	STATUS, Z, 0
$08D6	$A0D8	    			BTFSS	STATUS, C, 0
$08D8	$EF80	F004			GOTO	JPNSETFUN32
$08DC	$90D8	    			BCF	STATUS, C, 0
$08DE	$	NORM3232A:
$08DE	$BE02	    			BTFSC	STACK_2, 7, 0
$08E0	$EF86	F004			GOTO	JMPNFIXSIGN32
$08E4	$3600	    			RLCF	STACK_0, F, 0
$08E6	$3601	    			RLCF	STACK_1, F, 0
$08E8	$3602	    			RLCF	STACK_2, F, 0
$08EA	$2E03	    			DECFSZ	STACK_3, F, 0
$08EC	$EF6F	F004			GOTO	NORM3232A
$08F0	$EF80	F004			GOTO	JPNSETFUN32
$08F4	$	JPNRES032:
$08F4	$0E01	    			MOVLW	0x01
$08F6	$6E0C	    			MOVWF	STACK_12, 0
$08F8	$EC2D	F001			CALL	_RES032
$08FC	$EF8A	F004			GOTO	NORM32EEE
$0900	$	JPNSETFUN32:
$0900	$0E02	    			MOVLW	0x02
$0902	$6E0C	    			MOVWF	STACK_12, 0
$0904	$EC12	F001			CALL	_SETFUN32
$0908	$EF8A	F004			GOTO	NORM32EEE
$090C	$	JMPNFIXSIGN32:
$090C	$0E04	    			MOVLW	0x04
$090E	$6E0C	    			MOVWF	STACK_12, 0
$0910	$EC06	F000			CALL	_FIXSIGN32
$0914	$	NORM32EEE:
$0914	$0012	    			RETURN
$0916	$	_Compare_Double:
$0916	$0100	    			MOVLB	0
$0918	$6A0A	    			CLRF	STACK_10, 0
$091A	$5003	    			MOVF	STACK_3, W, 0
$091C	$A4D8	    			BTFSS	STATUS, Z, 0
$091E	$800A	    			BSF	STACK_10, 0, 0
$0920	$5007	    			MOVF	STACK_7, W, 0
$0922	$A4D8	    			BTFSS	STATUS, Z, 0
$0924	$820A	    			BSF	STACK_10, 1, 0
$0926	$500A	    			MOVF	STACK_10, W, 0
$0928	$B4D8	    			BTFSC	STATUS, Z, 0
$092A	$EFEF	F004			GOTO	COMPARE_EQU
$092E	$0A03	    			XORLW	0x03
$0930	$B4D8	    			BTFSC	STATUS, Z, 0
$0932	$EFA8	F004			GOTO	COMPARE_NOTZERO
$0936	$B00A	    			BTFSC	STACK_10, 0, 0
$0938	$EFA3	F004			GOTO	COMPARE_XNOTZERO
$093C	$	COMPARE_YNOTZERO:
$093C	$AE06	    			BTFSS	STACK_6, 7, 0
$093E	$EFED	F004			GOTO	COMPARE_LT
$0942	$EFEB	F004			GOTO	COMPARE_GT
$0946	$	COMPARE_XNOTZERO:
$0946	$AE02	    			BTFSS	STACK_2, 7, 0
$0948	$EFEB	F004			GOTO	COMPARE_GT
$094C	$EFED	F004			GOTO	COMPARE_LT
$0950	$	COMPARE_NOTZERO:
$0950	$5002	    			MOVF	STACK_2, W, 0
$0952	$0B80	    			ANDLW	0x80
$0954	$6E0A	    			MOVWF	STACK_10, 0
$0956	$9E02	    			BCF	STACK_2, 7, 0
$0958	$5006	    			MOVF	STACK_6, W, 0
$095A	$0B80	    			ANDLW	0x80
$095C	$9E06	    			BCF	STACK_6, 7, 0
$095E	$180A	    			XORWF	STACK_10, W, 0
$0960	$B4D8	    			BTFSC	STATUS, Z, 0
$0962	$EFB9	F004			GOTO	COMPARE_TESTALL
$0966	$500A	    			MOVF	STACK_10, W, 0
$0968	$B4D8	    			BTFSC	STATUS, Z, 0
$096A	$EFEB	F004			GOTO	COMPARE_GT
$096E	$EFED	F004			GOTO	COMPARE_LT
$0972	$	COMPARE_TESTALL:
$0972	$5007	    			MOVF	STACK_7, W, 0
$0974	$5C03	    			SUBWF	STACK_3, W, 0
$0976	$B4D8	    			BTFSC	STATUS, Z, 0
$0978	$EFC3	F004			GOTO	COMPARE_C1
$097C	$A0D8	    			BTFSS	STATUS, C, 0
$097E	$EFDF	F004			GOTO	GT_FALSE
$0982	$EFE5	F004			GOTO	GT_TRUE
$0986	$	COMPARE_C1:
$0986	$5006	    			MOVF	STACK_6, W, 0
$0988	$5C02	    			SUBWF	STACK_2, W, 0
$098A	$B4D8	    			BTFSC	STATUS, Z, 0
$098C	$EFCD	F004			GOTO	COMPARE_C2
$0990	$A0D8	    			BTFSS	STATUS, C, 0
$0992	$EFDF	F004			GOTO	GT_FALSE
$0996	$EFE5	F004			GOTO	GT_TRUE
$099A	$	COMPARE_C2:
$099A	$5005	    			MOVF	STACK_5, W, 0
$099C	$5C01	    			SUBWF	STACK_1, W, 0
$099E	$B4D8	    			BTFSC	STATUS, Z, 0
$09A0	$EFD7	F004			GOTO	COMPARE_C3
$09A4	$A0D8	    			BTFSS	STATUS, C, 0
$09A6	$EFDF	F004			GOTO	GT_FALSE
$09AA	$EFE5	F004			GOTO	GT_TRUE
$09AE	$	COMPARE_C3:
$09AE	$5004	    			MOVF	STACK_4, W, 0
$09B0	$5C00	    			SUBWF	STACK_0, W, 0
$09B2	$B4D8	    			BTFSC	STATUS, Z, 0
$09B4	$EFEF	F004			GOTO	COMPARE_EQU
$09B8	$B0D8	    			BTFSC	STATUS, C, 0
$09BA	$EFE5	F004			GOTO	GT_TRUE
$09BE	$	GT_FALSE:
$09BE	$520A	    			MOVF	STACK_10, F, 0
$09C0	$B4D8	    			BTFSC	STATUS, Z, 0
$09C2	$EFED	F004			GOTO	COMPARE_LT
$09C6	$EFEB	F004			GOTO	COMPARE_GT
$09CA	$	GT_TRUE:
$09CA	$520A	    			MOVF	STACK_10, F, 0
$09CC	$B4D8	    			BTFSC	STATUS, Z, 0
$09CE	$EFEB	F004			GOTO	COMPARE_GT
$09D2	$EFED	F004			GOTO	COMPARE_LT
$09D6	$	COMPARE_GT:
$09D6	$80D8	    			BSF	STATUS, C, 0
$09D8	$0012	    			RETURN
$09DA	$	COMPARE_LT:
$09DA	$90D8	    			BCF	STATUS, C, 0
$09DC	$0012	    			RETURN
$09DE	$	COMPARE_EQU:
$09DE	$80D8	    			BSF	STATUS, C, 0
$09E0	$84D8	    			BSF	STATUS, Z, 0
$09E2	$0012	    			RETURN
$09E4	$0012	    			RETURN
$09E6	$	_Double2Longint:
$09E6	$0100	    			MOVLB	0
$09E8	$	INT3232:
$09E8	$6A0B	    			CLRF	STACK_11, 0
$09EA	$6A0C	    			CLRF	STACK_12, 0
$09EC	$6A08	    			CLRF	STACK_8, 0
$09EE	$5003	    			MOVF	STACK_3, W, 0
$09F0	$B4D8	    			BTFSC	STATUS, Z, 0
$09F2	$EF78	F005			GOTO	INT3232EOK
$09F6	$C002	F00A			MOVFF	STACK_2, STACK_10
$09FA	$8E02	    			BSF	STACK_2, 7, 0
$09FC	$0E9E	    			MOVLW	158
$09FE	$5E03	    			SUBWF	STACK_3, F, 0
$0A00	$AE03	    			BTFSS	STACK_3, 7, 0
$0A02	$EF68	F005			GOTO	SETIOV32
$0A06	$6C03	    			NEGF	STACK_3, 0
$0A08	$0E08	    			MOVLW	8
$0A0A	$5C03	    			SUBWF	STACK_3, W, 0
$0A0C	$A0D8	    			BTFSS	STATUS, C, 0
$0A0E	$EF35	F005			GOTO	TSHIFT3232
$0A12	$6E03	    			MOVWF	STACK_3, 0
$0A14	$3608	    			RLCF	STACK_8, F, 0
$0A16	$C000	F008			MOVFF	STACK_0, STACK_8
$0A1A	$C001	F000			MOVFF	STACK_1, STACK_0
$0A1E	$C002	F001			MOVFF	STACK_2, STACK_1
$0A22	$6A02	    			CLRF	STACK_2, 0
$0A24	$0E08	    			MOVLW	8
$0A26	$5C03	    			SUBWF	STACK_3, W, 0
$0A28	$A0D8	    			BTFSS	STATUS, C, 0
$0A2A	$EF35	F005			GOTO	TSHIFT3232
$0A2E	$6E03	    			MOVWF	STACK_3, 0
$0A30	$3608	    			RLCF	STACK_8, F, 0
$0A32	$C000	F008			MOVFF	STACK_0, STACK_8
$0A36	$C001	F000			MOVFF	STACK_1, STACK_0
$0A3A	$6A01	    			CLRF	STACK_1, 0
$0A3C	$0E08	    			MOVLW	8
$0A3E	$5C03	    			SUBWF	STACK_3, W, 0
$0A40	$A0D8	    			BTFSS	STATUS, C, 0
$0A42	$EF35	F005			GOTO	TSHIFT3232
$0A46	$6E03	    			MOVWF	STACK_3, 0
$0A48	$3608	    			RLCF	STACK_8, F, 0
$0A4A	$C000	F008			MOVFF	STACK_0, STACK_8
$0A4E	$6A00	    			CLRF	STACK_0, 0
$0A50	$0E08	    			MOVLW	8
$0A52	$5C03	    			SUBWF	STACK_3, W, 0
$0A54	$A0D8	    			BTFSS	STATUS, C, 0
$0A56	$EF35	F005			GOTO	TSHIFT3232
$0A5A	$6E03	    			MOVWF	STACK_3, 0
$0A5C	$3608	    			RLCF	STACK_8, F, 0
$0A5E	$6A08	    			CLRF	STACK_8, 0
$0A60	$5003	    			MOVF	STACK_3, W, 0
$0A62	$A4D8	    			BTFSS	STATUS, Z, 0
$0A64	$90D8	    			BCF	STATUS, C, 0
$0A66	$EF41	F005			GOTO	SHIFT3232OK
$0A6A	$	TSHIFT3232:
$0A6A	$5003	    			MOVF	STACK_3, W, 0
$0A6C	$B4D8	    			BTFSC	STATUS, Z, 0
$0A6E	$EF41	F005			GOTO	SHIFT3232OK
$0A72	$	SHIFT3232:
$0A72	$90D8	    			BCF	STATUS, C, 0
$0A74	$3202	    			RRCF	STACK_2, F, 0
$0A76	$3201	    			RRCF	STACK_1, F, 0
$0A78	$3200	    			RRCF	STACK_0, F, 0
$0A7A	$3208	    			RRCF	STACK_8, F, 0
$0A7C	$2E03	    			DECFSZ	STACK_3, F, 0
$0A7E	$EF39	F005			GOTO	SHIFT3232
$0A82	$	SHIFT3232OK:
$0A82	$BC0B	    			BTFSC	STACK_11, 6, 0
$0A84	$A008	    			BTFSS	STACK_8, 0, 0
$0A86	$EF52	F005			GOTO	INT3232OK
$0A8A	$A0D8	    			BTFSS	STATUS, C, 0
$0A8C	$EF52	F005			GOTO	INT3232OK
$0A90	$2A08	    			INCF	STACK_8, F, 0
$0A92	$B4D8	    			BTFSC	STATUS, Z, 0
$0A94	$2A00	    			INCF	STACK_0, F, 0
$0A96	$B4D8	    			BTFSC	STATUS, Z, 0
$0A98	$2A01	    			INCF	STACK_1, F, 0
$0A9A	$B4D8	    			BTFSC	STATUS, Z, 0
$0A9C	$2A02	    			INCF	STACK_2, F, 0
$0A9E	$BE02	    			BTFSC	STACK_2, 7, 0
$0AA0	$EF7C	F005			GOTO	JPISETIOV3224
$0AA4	$	INT3232OK:
$0AA4	$AE0A	    			BTFSS	STACK_10, 7, 0
$0AA6	$EF78	F005			GOTO	INT3232EOK
$0AAA	$1E02	    			COMF	STACK_2, F, 0
$0AAC	$1E01	    			COMF	STACK_1, F, 0
$0AAE	$1E00	    			COMF	STACK_0, F, 0
$0AB0	$1E08	    			COMF	STACK_8, F, 0
$0AB2	$2A08	    			INCF	STACK_8, F, 0
$0AB4	$B4D8	    			BTFSC	STATUS, Z, 0
$0AB6	$2A00	    			INCF	STACK_0, F, 0
$0AB8	$B4D8	    			BTFSC	STATUS, Z, 0
$0ABA	$2A01	    			INCF	STACK_1, F, 0
$0ABC	$B4D8	    			BTFSC	STATUS, Z, 0
$0ABE	$2A02	    			INCF	STACK_2, F, 0
$0AC0	$EF78	F005			GOTO	INT3232EOK
$0AC4	$	IRES032:
$0AC4	$6A02	    			CLRF	STACK_2, 0
$0AC6	$6A01	    			CLRF	STACK_1, 0
$0AC8	$6A00	    			CLRF	STACK_0, 0
$0ACA	$6A08	    			CLRF	STACK_8, 0
$0ACC	$EF78	F005			GOTO	INT3232EOK
$0AD0	$	SETIOV32:
$0AD0	$800B	    			BSF	STACK_11, 0, 0
$0AD2	$AE0B	    			BTFSS	STACK_11, 7, 0
$0AD4	$EF83	F005			GOTO	INT3232EER
$0AD8	$6A02	    			CLRF	STACK_2, 0
$0ADA	$AE0A	    			BTFSS	STACK_10, 7, 0
$0ADC	$EF83	F005			GOTO	INT3232EER
$0AE0	$6E02	    			MOVWF	STACK_2, 0
$0AE2	$6E01	    			MOVWF	STACK_1, 0
$0AE4	$6E00	    			MOVWF	STACK_0, 0
$0AE6	$6E08	    			MOVWF	STACK_8, 0
$0AE8	$360A	    			RLCF	STACK_10, F, 0
$0AEA	$3202	    			RRCF	STACK_2, F, 0
$0AEC	$EF83	F005			GOTO	INT3232EER
$0AF0	$	INT3232EOK:
$0AF0	$6A0C	    			CLRF	STACK_12, 0
$0AF2	$0E00	    			MOVLW	0x00
$0AF4	$EF84	F005			GOTO	INT3232EEE
$0AF8	$	JPISETIOV3224:
$0AF8	$0E01	    			MOVLW	0x01
$0AFA	$6E0C	    			MOVWF	STACK_12, 0
$0AFC	$0E00	    			MOVLW	0x00
$0AFE	$EC2B	F002			CALL	_SETIOV3224
$0B02	$EF84	F005			GOTO	INT3232EEE
$0B06	$	INT3232EER:
$0B06	$0EFF	    			MOVLW	0xFF
$0B08	$	INT3232EEE:
$0B08	$5002	    			MOVF	STACK_2, W, 0
$0B0A	$6E03	    			MOVWF	STACK_3, 0
$0B0C	$5001	    			MOVF	STACK_1, W, 0
$0B0E	$6E02	    			MOVWF	STACK_2, 0
$0B10	$5000	    			MOVF	STACK_0, W, 0
$0B12	$6E01	    			MOVWF	STACK_1, 0
$0B14	$5008	    			MOVF	STACK_8, W, 0
$0B16	$6E00	    			MOVWF	STACK_0, 0
$0B18	$0012	    			RETURN
$0B1A	$	_Longint2Double:
$0B1A	$0100	    			MOVLB	0
$0B1C	$5000	    			MOVF	STACK_0, W, 0
$0B1E	$6E08	    			MOVWF	STACK_8, 0
$0B20	$5001	    			MOVF	STACK_1, W, 0
$0B22	$6E00	    			MOVWF	STACK_0, 0
$0B24	$5002	    			MOVF	STACK_2, W, 0
$0B26	$6E01	    			MOVWF	STACK_1, 0
$0B28	$5003	    			MOVF	STACK_3, W, 0
$0B2A	$6E02	    			MOVWF	STACK_2, 0
$0B2C	$6A03	    			CLRF	STACK_3, 0
$0B2E	$	FLO3232:
$0B2E	$6A0B	    			CLRF	STACK_11, 0
$0B30	$6A0C	    			CLRF	STACK_12, 0
$0B32	$0E9E	    			MOVLW	158
$0B34	$6E03	    			MOVWF	STACK_3, 0
$0B36	$6A0A	    			CLRF	STACK_10, 0
$0B38	$AE02	    			BTFSS	STACK_2, 7, 0
$0B3A	$EFAB	F005			GOTO	FLO3232EEE
$0B3E	$1E08	    			COMF	STACK_8, F, 0
$0B40	$1E00	    			COMF	STACK_0, F, 0
$0B42	$1E01	    			COMF	STACK_1, F, 0
$0B44	$1E02	    			COMF	STACK_2, F, 0
$0B46	$2A08	    			INCF	STACK_8, F, 0
$0B48	$B4D8	    			BTFSC	STATUS, Z, 0
$0B4A	$2A00	    			INCF	STACK_0, F, 0
$0B4C	$B4D8	    			BTFSC	STATUS, Z, 0
$0B4E	$2A01	    			INCF	STACK_1, F, 0
$0B50	$B4D8	    			BTFSC	STATUS, Z, 0
$0B52	$2A02	    			INCF	STACK_2, F, 0
$0B54	$8E0A	    			BSF	STACK_10, 7, 0
$0B56	$	FLO3232EEE:
$0B56	$0E02	    			MOVLW	0x02
$0B58	$6E0C	    			MOVWF	STACK_12, 0
$0B5A	$EC35	F001			CALL	_NRM4032
$0B5E	$0012	    			RETURN
$0B60	$	_Sub_32x32_FP:
$0B60	$0100	    			MOVLB	0
$0B62	$	FPS32:
$0B62	$7E06	    			BTG	STACK_6, 7, 0
$0B64	$EC3A	F002			CALL	_Add_32x32_FP
$0B68	$0012	    			RETURN
$0B6A	$	_Mul_32x32_U:
$0B6A	$0100	    			MOVLB	0
$0B6C	$0E22	    			MOVLW	34
$0B6E	$6E0C	    			MOVWF	STACK_12, 0
$0B70	$6A08	    			CLRF	STACK_8, 0
$0B72	$6A09	    			CLRF	STACK_9, 0
$0B74	$6A0A	    			CLRF	STACK_10, 0
$0B76	$6A0B	    			CLRF	STACK_11, 0
$0B78	$	_NEXT:
$0B78	$060C	    			DECF	STACK_12, F, 0
$0B7A	$B4D8	    			BTFSC	STATUS, Z, 0
$0B7C	$EFE2	F005			GOTO	_EXIT2
$0B80	$90D8	    			BCF	STATUS, C, 0
$0B82	$	_LOOP:
$0B82	$320B	    			RRCF	STACK_11, F, 0
$0B84	$320A	    			RRCF	STACK_10, F, 0
$0B86	$3209	    			RRCF	STACK_9, F, 0
$0B88	$3208	    			RRCF	STACK_8, F, 0
$0B8A	$3203	    			RRCF	STACK_3, F, 0
$0B8C	$3202	    			RRCF	STACK_2, F, 0
$0B8E	$3201	    			RRCF	STACK_1, F, 0
$0B90	$3200	    			RRCF	STACK_0, F, 0
$0B92	$A0D8	    			BTFSS	STATUS, C, 0
$0B94	$EFBC	F005			GOTO	_NEXT
$0B98	$060C	    			DECF	STACK_12, F, 0
$0B9A	$B4D8	    			BTFSC	STATUS, Z, 0
$0B9C	$EFDA	F005			GOTO	_EXIT1
$0BA0	$5004	    			MOVF	STACK_4, W, 0
$0BA2	$2608	    			ADDWF	STACK_8, F, 0
$0BA4	$5005	    			MOVF	STACK_5, W, 0
$0BA6	$2209	    			ADDWFC	STACK_9, F, 0
$0BA8	$5006	    			MOVF	STACK_6, W, 0
$0BAA	$220A	    			ADDWFC	STACK_10, F, 0
$0BAC	$5007	    			MOVF	STACK_7, W, 0
$0BAE	$220B	    			ADDWFC	STACK_11, F, 0
$0BB0	$EFC1	F005			GOTO	_LOOP
$0BB4	$	_EXIT1:
$0BB4	$5004	    			MOVF	STACK_4, W, 0
$0BB6	$2608	    			ADDWF	STACK_8, F, 0
$0BB8	$5005	    			MOVF	STACK_5, W, 0
$0BBA	$2209	    			ADDWFC	STACK_9, F, 0
$0BBC	$5006	    			MOVF	STACK_6, W, 0
$0BBE	$220A	    			ADDWFC	STACK_10, F, 0
$0BC0	$5007	    			MOVF	STACK_7, W, 0
$0BC2	$220B	    			ADDWFC	STACK_11, F, 0
$0BC4	$	_EXIT2:
$0BC4	$0012	    			RETURN
$0BC6	$	_Int2Double:
$0BC6	$0100	    			MOVLB	0
$0BC8	$C000	F008			MOVFF	STACK_0, STACK_8
$0BCC	$5001	    			MOVF	STACK_1, W, 0
$0BCE	$6E00	    			MOVWF	STACK_0, 0
$0BD0	$6A01	    			CLRF	STACK_1, 0
$0BD2	$6A02	    			CLRF	STACK_2, 0
$0BD4	$6A03	    			CLRF	STACK_3, 0
$0BD6	$	FLO1632:
$0BD6	$6A0B	    			CLRF	STACK_11, 0
$0BD8	$6A0C	    			CLRF	STACK_12, 0
$0BDA	$6A01	    			CLRF	STACK_1, 0
$0BDC	$6A02	    			CLRF	STACK_2, 0
$0BDE	$6A03	    			CLRF	STACK_3, 0
$0BE0	$0E96	    			MOVLW	150
$0BE2	$6E03	    			MOVWF	STACK_3, 0
$0BE4	$6A0A	    			CLRF	STACK_10, 0
$0BE6	$AE00	    			BTFSS	STACK_0, 7, 0
$0BE8	$EFFC	F005			GOTO	FLO1632EEE
$0BEC	$1E08	    			COMF	STACK_8, F, 0
$0BEE	$1E00	    			COMF	STACK_0, F, 0
$0BF0	$2A08	    			INCF	STACK_8, F, 0
$0BF2	$B4D8	    			BTFSC	STATUS, Z, 0
$0BF4	$2A00	    			INCF	STACK_0, F, 0
$0BF6	$8E0A	    			BSF	STACK_10, 7, 0
$0BF8	$	FLO1632EEE:
$0BF8	$C000	F001			MOVFF	STACK_0, STACK_1
$0BFC	$C008	F000			MOVFF	STACK_8, STACK_0
$0C00	$6A08	    			CLRF	STACK_8, 0
$0C02	$6A02	    			CLRF	STACK_2, 0
$0C04	$EC4E	F004			CALL	_NRM3232
$0C08	$0012	    			RETURN
$0C0A	$	_Mul_32x32_FP:
$0C0A	$0100	    			MOVLB	0
$0C0C	$	FPM32:
$0C0C	$6A08	    			CLRF	STACK_8, 0
$0C0E	$6A09	    			CLRF	STACK_9, 0
$0C10	$0E00	    			MOVLW	0x00
$0C12	$6207	    			CPFSEQ	STACK_7, 0
$0C14	$6403	    			CPFSGT	STACK_3, 0
$0C16	$EF8B	F006			GOTO	MULJPRES032
$0C1A	$	M32BNE0:
$0C1A	$5002	    			MOVF	STACK_2, W, 0
$0C1C	$1806	    			XORWF	STACK_6, W, 0
$0C1E	$6E0A	    			MOVWF	STACK_10, 0
$0C20	$5007	    			MOVF	STACK_7, W, 0
$0C22	$2603	    			ADDWF	STACK_3, F, 0
$0C24	$0E7E	    			MOVLW	126
$0C26	$A0D8	    			BTFSS	STATUS, C, 0
$0C28	$EF1C	F006			GOTO	MTUN32
$0C2C	$5E03	    			SUBWF	STACK_3, F, 0
$0C2E	$B0D8	    			BTFSC	STATUS, C, 0
$0C30	$EF90	F006			GOTO	MULJPSETFOV32
$0C34	$EF20	F006			GOTO	MOK32
$0C38	$	MTUN32:
$0C38	$5E03	    			SUBWF	STACK_3, F, 0
$0C3A	$A0D8	    			BTFSS	STATUS, C, 0
$0C3C	$EF95	F006			GOTO	MULJPSETFUN32
$0C40	$	MOK32:
$0C40	$8E02	    			BSF	STACK_2, 7, 0
$0C42	$8E06	    			BSF	STACK_6, 7, 0
$0C44	$C002	F00E			MOVFF	STACK_2, STACK_14
$0C48	$C001	F00B			MOVFF	STACK_1, STACK_11
$0C4C	$C000	F00D			MOVFF	STACK_0, STACK_13
$0C50	$5000	    			MOVF	STACK_0, W, 0
$0C52	$0204	    			MULWF	STACK_4, 0
$0C54	$CFF4	F00C			MOVFF	PRODH, STACK_12
$0C58	$5001	    			MOVF	STACK_1, W, 0
$0C5A	$0205	    			MULWF	STACK_5, 0
$0C5C	$CFF4	F000			MOVFF	PRODH, STACK_0
$0C60	$CFF3	F008			MOVFF	PRODL, STACK_8
$0C64	$0204	    			MULWF	STACK_4, 0
$0C66	$50F3	    			MOVF	PRODL, W, 0
$0C68	$260C	    			ADDWF	STACK_12, F, 0
$0C6A	$50F4	    			MOVF	PRODH, W, 0
$0C6C	$2208	    			ADDWFC	STACK_8, F, 0
$0C6E	$0E00	    			MOVLW	0x00
$0C70	$2200	    			ADDWFC	STACK_0, F, 0
$0C72	$500D	    			MOVF	STACK_13, W, 0
$0C74	$0205	    			MULWF	STACK_5, 0
$0C76	$50F3	    			MOVF	PRODL, W, 0
$0C78	$260C	    			ADDWF	STACK_12, F, 0
$0C7A	$50F4	    			MOVF	PRODH, W, 0
$0C7C	$2208	    			ADDWFC	STACK_8, F, 0
$0C7E	$0E00	    			MOVLW	0x00
$0C80	$2200	    			ADDWFC	STACK_0, F, 0
$0C82	$5002	    			MOVF	STACK_2, W, 0
$0C84	$0204	    			MULWF	STACK_4, 0
$0C86	$50F3	    			MOVF	PRODL, W, 0
$0C88	$2608	    			ADDWF	STACK_8, F, 0
$0C8A	$50F4	    			MOVF	PRODH, W, 0
$0C8C	$2200	    			ADDWFC	STACK_0, F, 0
$0C8E	$5002	    			MOVF	STACK_2, W, 0
$0C90	$0205	    			MULWF	STACK_5, 0
$0C92	$6A01	    			CLRF	STACK_1, 0
$0C94	$0E00	    			MOVLW	0x00
$0C96	$2201	    			ADDWFC	STACK_1, F, 0
$0C98	$50F3	    			MOVF	PRODL, W, 0
$0C9A	$2600	    			ADDWF	STACK_0, F, 0
$0C9C	$50F4	    			MOVF	PRODH, W, 0
$0C9E	$2201	    			ADDWFC	STACK_1, F, 0
$0CA0	$500D	    			MOVF	STACK_13, W, 0
$0CA2	$0206	    			MULWF	STACK_6, 0
$0CA4	$50F3	    			MOVF	PRODL, W, 0
$0CA6	$2608	    			ADDWF	STACK_8, F, 0
$0CA8	$50F4	    			MOVF	PRODH, W, 0
$0CAA	$2200	    			ADDWFC	STACK_0, F, 0
$0CAC	$6A02	    			CLRF	STACK_2, 0
$0CAE	$0E00	    			MOVLW	0x00
$0CB0	$2201	    			ADDWFC	STACK_1, F, 0
$0CB2	$2202	    			ADDWFC	STACK_2, F, 0
$0CB4	$500B	    			MOVF	STACK_11, W, 0
$0CB6	$0206	    			MULWF	STACK_6, 0
$0CB8	$50F3	    			MOVF	PRODL, W, 0
$0CBA	$2600	    			ADDWF	STACK_0, F, 0
$0CBC	$50F4	    			MOVF	PRODH, W, 0
$0CBE	$2201	    			ADDWFC	STACK_1, F, 0
$0CC0	$0E00	    			MOVLW	0x00
$0CC2	$2202	    			ADDWFC	STACK_2, F, 0
$0CC4	$500E	    			MOVF	STACK_14, W, 0
$0CC6	$0206	    			MULWF	STACK_6, 0
$0CC8	$50F3	    			MOVF	PRODL, W, 0
$0CCA	$2601	    			ADDWF	STACK_1, F, 0
$0CCC	$50F4	    			MOVF	PRODH, W, 0
$0CCE	$2202	    			ADDWFC	STACK_2, F, 0
$0CD0	$BE02	    			BTFSC	STACK_2, 7, 0
$0CD2	$EF73	F006			GOTO	MROUND32
$0CD6	$3608	    			RLCF	STACK_8, F, 0
$0CD8	$3600	    			RLCF	STACK_0, F, 0
$0CDA	$3601	    			RLCF	STACK_1, F, 0
$0CDC	$3602	    			RLCF	STACK_2, F, 0
$0CDE	$0603	    			DECF	STACK_3, F, 0
$0CE0	$B4D8	    			BTFSC	STATUS, Z, 0
$0CE2	$EF95	F006			GOTO	MULJPSETFUN32
$0CE6	$	MROUND32:
$0CE6	$EF86	F006			GOTO	MUL32OK
$0CEA	$80D8	    			BSF	STATUS, C, 0
$0CEC	$0E80	    			MOVLW	0x80
$0CEE	$6408	    			CPFSGT	STACK_8, 0
$0CF0	$3000	    			RRCF	STACK_0, W, 0
$0CF2	$0E00	    			MOVLW	0x00
$0CF4	$2200	    			ADDWFC	STACK_0, F, 0
$0CF6	$2201	    			ADDWFC	STACK_1, F, 0
$0CF8	$2202	    			ADDWFC	STACK_2, F, 0
$0CFA	$A0D8	    			BTFSS	STATUS, C, 0
$0CFC	$EF86	F006			GOTO	MUL32OK
$0D00	$3202	    			RRCF	STACK_2, F, 0
$0D02	$3201	    			RRCF	STACK_1, F, 0
$0D04	$3200	    			RRCF	STACK_0, F, 0
$0D06	$4A03	    			INFSNZ	STACK_3, F, 0
$0D08	$EF90	F006			GOTO	MULJPSETFOV32
$0D0C	$	MUL32OK:
$0D0C	$AE0A	    			BTFSS	STACK_10, 7, 0
$0D0E	$9E02	    			BCF	STACK_2, 7, 0
$0D10	$0E00	    			MOVLW	0
$0D12	$EF98	F006			GOTO	MULEEE
$0D16	$	MULJPRES032:
$0D16	$0E01	    			MOVLW	0x01
$0D18	$EC2D	F001			CALL	_RES032
$0D1C	$EF98	F006			GOTO	MULEEE
$0D20	$	MULJPSETFOV32:
$0D20	$0E02	    			MOVLW	0x02
$0D22	$EC20	F001			CALL	_SETFOV32
$0D26	$EF98	F006			GOTO	MULEEE
$0D2A	$	MULJPSETFUN32:
$0D2A	$0E04	    			MOVLW	0x04
$0D2C	$EC12	F001			CALL	_SETFUN32
$0D30	$	MULEEE:
$0D30	$0012	    			RETURN
$0D32	$	_Double2Int:
$0D32	$0100	    			MOVLB	0
$0D34	$	INT3216:
$0D34	$6A0B	    			CLRF	STACK_11, 0
$0D36	$5003	    			MOVF	STACK_3, W, 0
$0D38	$B4D8	    			BTFSC	STATUS, Z, 0
$0D3A	$EFE0	F006			GOTO	IRES016
$0D3E	$5002	    			MOVF	STACK_2, W, 0
$0D40	$6E0A	    			MOVWF	STACK_10, 0
$0D42	$8E02	    			BSF	STACK_2, 7, 0
$0D44	$0E8E	    			MOVLW	142
$0D46	$5E03	    			SUBWF	STACK_3, F, 0
$0D48	$AE03	    			BTFSS	STACK_3, 7, 0
$0D4A	$EFE4	F006			GOTO	SETIOV16
$0D4E	$6C03	    			NEGF	STACK_3, 0
$0D50	$0E08	    			MOVLW	8
$0D52	$5C03	    			SUBWF	STACK_3, W, 0
$0D54	$A0D8	    			BTFSS	STATUS, C, 0
$0D56	$EFBF	F006			GOTO	TSHIFT3216
$0D5A	$6E03	    			MOVWF	STACK_3, 0
$0D5C	$3601	    			RLCF	STACK_1, F, 0
$0D5E	$C002	F001			MOVFF	STACK_2, STACK_1
$0D62	$6A02	    			CLRF	STACK_2, 0
$0D64	$0E08	    			MOVLW	8
$0D66	$5C03	    			SUBWF	STACK_3, W, 0
$0D68	$A0D8	    			BTFSS	STATUS, C, 0
$0D6A	$EFBF	F006			GOTO	TSHIFT3216
$0D6E	$6E03	    			MOVWF	STACK_3, 0
$0D70	$3601	    			RLCF	STACK_1, F, 0
$0D72	$6A01	    			CLRF	STACK_1, 0
$0D74	$5003	    			MOVF	STACK_3, W, 0
$0D76	$A4D8	    			BTFSS	STATUS, Z, 0
$0D78	$90D8	    			BCF	STATUS, C, 0
$0D7A	$EFC9	F006			GOTO	SHIFT3216OK
$0D7E	$	TSHIFT3216:
$0D7E	$5003	    			MOVF	STACK_3, W, 0
$0D80	$B4D8	    			BTFSC	STATUS, Z, 0
$0D82	$EFC9	F006			GOTO	SHIFT3216OK
$0D86	$	SHIFT3216:
$0D86	$90D8	    			BCF	STATUS, C, 0
$0D88	$3202	    			RRCF	STACK_2, F, 0
$0D8A	$3201	    			RRCF	STACK_1, F, 0
$0D8C	$2E03	    			DECFSZ	STACK_3, F, 0
$0D8E	$EFC3	F006			GOTO	SHIFT3216
$0D92	$	SHIFT3216OK:
$0D92	$BC0B	    			BTFSC	STACK_11, 6, 0
$0D94	$A001	    			BTFSS	STACK_1, 0, 0
$0D96	$EFD6	F006			GOTO	INT3216OK
$0D9A	$A0D8	    			BTFSS	STATUS, C, 0
$0D9C	$EFD6	F006			GOTO	INT3216OK
$0DA0	$2A01	    			INCF	STACK_1, F, 0
$0DA2	$B4D8	    			BTFSC	STATUS, Z, 0
$0DA4	$2A02	    			INCF	STACK_2, F, 0
$0DA6	$BE02	    			BTFSC	STACK_2, 7, 0
$0DA8	$EFF3	F006			GOTO	JPJSETIOV3224
$0DAC	$	INT3216OK:
$0DAC	$AE0A	    			BTFSS	STACK_10, 7, 0
$0DAE	$EFF9	F006			GOTO	INT3216EOK
$0DB2	$1E02	    			COMF	STACK_2, F, 0
$0DB4	$1E01	    			COMF	STACK_1, F, 0
$0DB6	$2A01	    			INCF	STACK_1, F, 0
$0DB8	$B4D8	    			BTFSC	STATUS, Z, 0
$0DBA	$2A02	    			INCF	STACK_2, F, 0
$0DBC	$EFF9	F006			GOTO	INT3216EOK
$0DC0	$	IRES016:
$0DC0	$6A02	    			CLRF	STACK_2, 0
$0DC2	$6A01	    			CLRF	STACK_1, 0
$0DC4	$EFF9	F006			GOTO	INT3216EOK
$0DC8	$	SETIOV16:
$0DC8	$800B	    			BSF	STACK_11, 0, 0
$0DCA	$AE0B	    			BTFSS	STACK_11, 7, 0
$0DCC	$EFFD	F006			GOTO	INT3216EER
$0DD0	$6A02	    			CLRF	STACK_2, 0
$0DD2	$AE0A	    			BTFSS	STACK_10, 7, 0
$0DD4	$EFFD	F006			GOTO	INT3216EER
$0DD8	$0EFF	    			MOVLW	0xFF
$0DDA	$6E02	    			MOVWF	STACK_2, 0
$0DDC	$6E01	    			MOVWF	STACK_1, 0
$0DDE	$360A	    			RLCF	STACK_10, F, 0
$0DE0	$3202	    			RRCF	STACK_2, F, 0
$0DE2	$EFFD	F006			GOTO	INT3216EER
$0DE6	$	JPJSETIOV3224:
$0DE6	$0E01	    			MOVLW	0x01
$0DE8	$6E0C	    			MOVWF	STACK_12, 0
$0DEA	$EC2B	F002			CALL	_SETIOV3224
$0DEE	$EFFF	F006			GOTO	INT3216EEE
$0DF2	$	INT3216EOK:
$0DF2	$0E00	    			MOVLW	0x00
$0DF4	$6E0C	    			MOVWF	STACK_12, 0
$0DF6	$EFFF	F006			GOTO	INT3216EEE
$0DFA	$	INT3216EER:
$0DFA	$0EFF	    			MOVLW	0xFF
$0DFC	$6E0C	    			MOVWF	STACK_12, 0
$0DFE	$	INT3216EEE:
$0DFE	$5001	    			MOVF	STACK_1, W, 0
$0E00	$6E00	    			MOVWF	STACK_0, 0
$0E02	$5002	    			MOVF	STACK_2, W, 0
$0E04	$6E01	    			MOVWF	STACK_1, 0
$0E06	$0012	    			RETURN
$0E08	$	_modf:
$0E08	$6A04	    			CLRF	STACK_4, 0
$0E0A	$6A05	    			CLRF	STACK_4+1, 0
$0E0C	$6A06	    			CLRF	STACK_4+2, 0
$0E0E	$6A07	    			CLRF	STACK_4+3, 0
$0E10	$C16F	F000			MOVFF	FARG_modf+0, STACK_0
$0E14	$C170	F001			MOVFF	FARG_modf+1, STACK_0+1
$0E18	$C171	F002			MOVFF	FARG_modf+2, STACK_0+2
$0E1C	$C172	F003			MOVFF	FARG_modf+3, STACK_0+3
$0E20	$EC8B	F004			CALL	_compare_double
$0E24	$0E00	    			MOVLW	0
$0E26	$B0D8	    			BTFSC	STATUS, C, 0
$0E28	$0E01	    			MOVLW	1
$0E2A	$6E00	    			MOVWF	STACK_0, 0
$0E2C	$5200	    			MOVF	STACK_0, 1, 0
$0E2E	$E018	    			BZ	L481_ex_L499_ex_L_modf_57
$0E30	$0E00	    			MOVLW	0
$0E32	$6E04	    			MOVWF	STACK_4, 0
$0E34	$0E00	    			MOVLW	0
$0E36	$6E05	    			MOVWF	STACK_4+1, 0
$0E38	$0E00	    			MOVLW	0
$0E3A	$6E06	    			MOVWF	STACK_4+2, 0
$0E3C	$0E7F	    			MOVLW	127
$0E3E	$6E07	    			MOVWF	STACK_4+3, 0
$0E40	$C16F	F000			MOVFF	FARG_modf+0, STACK_0
$0E44	$C170	F001			MOVFF	FARG_modf+1, STACK_0+1
$0E48	$C171	F002			MOVFF	FARG_modf+2, STACK_0+2
$0E4C	$C172	F003			MOVFF	FARG_modf+3, STACK_0+3
$0E50	$EC8B	F004			CALL	_compare_double
$0E54	$0E01	    			MOVLW	1
$0E56	$B0D8	    			BTFSC	STATUS, C, 0
$0E58	$0E00	    			MOVLW	0
$0E5A	$6E00	    			MOVWF	STACK_0, 0
$0E5C	$5200	    			MOVF	STACK_0, 1, 0
$0E5E	$E12F	    			BNZ	L499_ex_L_modf_57
$0E60	$	L481_ex_L499_ex_L_modf_57:
$0E60	$0100	    			MOVLB	0
$0E62	$C16F	F004			MOVFF	FARG_modf+0, STACK_4
$0E66	$C170	F005			MOVFF	FARG_modf+1, STACK_4+1
$0E6A	$C171	F006			MOVFF	FARG_modf+2, STACK_4+2
$0E6E	$C172	F007			MOVFF	FARG_modf+3, STACK_4+3
$0E72	$0E00	    			MOVLW	0
$0E74	$6E00	    			MOVWF	STACK_0, 0
$0E76	$0E00	    			MOVLW	0
$0E78	$6E01	    			MOVWF	STACK_0+1, 0
$0E7A	$0E80	    			MOVLW	128
$0E7C	$6E02	    			MOVWF	STACK_0+2, 0
$0E7E	$0E7F	    			MOVLW	127
$0E80	$6E03	    			MOVWF	STACK_0+3, 0
$0E82	$EC8B	F004			CALL	_compare_double
$0E86	$0E01	    			MOVLW	1
$0E88	$B0D8	    			BTFSC	STATUS, C, 0
$0E8A	$0E00	    			MOVLW	0
$0E8C	$6E00	    			MOVWF	STACK_0, 0
$0E8E	$5200	    			MOVF	STACK_0, 1, 0
$0E90	$E014	    			BZ	L492_ex_L499_ex_L_modf_57
$0E92	$C16F	F004			MOVFF	FARG_modf+0, STACK_4
$0E96	$C170	F005			MOVFF	FARG_modf+1, STACK_4+1
$0E9A	$C171	F006			MOVFF	FARG_modf+2, STACK_4+2
$0E9E	$C172	F007			MOVFF	FARG_modf+3, STACK_4+3
$0EA2	$6A00	    			CLRF	STACK_0, 0
$0EA4	$6A01	    			CLRF	STACK_0+1, 0
$0EA6	$6A02	    			CLRF	STACK_0+2, 0
$0EA8	$6A03	    			CLRF	STACK_0+3, 0
$0EAA	$EC8B	F004			CALL	_compare_double
$0EAE	$0E00	    			MOVLW	0
$0EB0	$B0D8	    			BTFSC	STATUS, C, 0
$0EB2	$0E01	    			MOVLW	1
$0EB4	$6E00	    			MOVWF	STACK_0, 0
$0EB6	$5200	    			MOVF	STACK_0, 1, 0
$0EB8	$E102	    			BNZ	L499_ex_L_modf_57
$0EBA	$	L492_ex_L499_ex_L_modf_57:
$0EBA	$0100	    			MOVLB	0
$0EBC	$D012	    			BRA	L_modf_57
$0EBE	$	L499_ex_L_modf_57:
$0EBE	$0100	    			MOVLB	0
$0EC0	$C173	FFE1			MOVFF	FARG_modf+4, FSR1L
$0EC4	$C174	FFE2			MOVFF	FARG_modf+5, FSR1H
$0EC8	$6AE6	    			CLRF	POSTINC1, 0
$0ECA	$6AE6	    			CLRF	POSTINC1, 0
$0ECC	$6AE6	    			CLRF	POSTINC1, 0
$0ECE	$6AE6	    			CLRF	POSTINC1, 0
$0ED0	$C16F	F000			MOVFF	FARG_modf+0, STACK_0
$0ED4	$C170	F001			MOVFF	FARG_modf+1, STACK_0+1
$0ED8	$C171	F002			MOVFF	FARG_modf+2, STACK_0+2
$0EDC	$C172	F003			MOVFF	FARG_modf+3, STACK_0+3
$0EE0	$0012	    			RETURN
$0EE2	$	L_modf_57:
$0EE2	$0100	    			MOVLB	0
$0EE4	$C172	F000			MOVFF	FARG_modf+3, STACK_0
$0EE8	$6A01	    			CLRF	STACK_0+1, 0
$0EEA	$6A02	    			CLRF	STACK_0+2, 0
$0EEC	$6A03	    			CLRF	STACK_0+3, 0
$0EEE	$0EFF	    			MOVLW	255
$0EF0	$1400	    			ANDWF	STACK_0, 0, 0
$0EF2	$6E0A	    			MOVWF	STACK_10, 0
$0EF4	$0E00	    			MOVLW	0
$0EF6	$6E0B	    			MOVWF	STACK_10+1, 0
$0EF8	$0E00	    			MOVLW	0
$0EFA	$160B	    			ANDWF	STACK_10+1, 1, 0
$0EFC	$0E7F	    			MOVLW	127
$0EFE	$6E00	    			MOVWF	STACK_0, 0
$0F00	$0E00	    			MOVLW	0
$0F02	$6E01	    			MOVWF	STACK_0+1, 0
$0F04	$6E02	    			MOVWF	STACK_0+2, 0
$0F06	$6E03	    			MOVWF	STACK_0+3, 0
$0F08	$5000	    			MOVF	STACK_0, 0, 0
$0F0A	$5C0A	    			SUBWF	STACK_10, 0, 0
$0F0C	$6E08	    			MOVWF	STACK_8, 0
$0F0E	$5001	    			MOVF	STACK_0+1, 0, 0
$0F10	$580B	    			SUBWFB	STACK_10+1, 0, 0
$0F12	$6E09	    			MOVWF	STACK_8+1, 0
$0F14	$0E00	    			MOVLW	0
$0F16	$6E00	    			MOVWF	STACK_0, 0
$0F18	$5009	    			MOVF	STACK_8+1, 0, 0
$0F1A	$5C00	    			SUBWF	STACK_0, 0, 0
$0F1C	$E102	    			BNZ	L_modf_74
$0F1E	$5008	    			MOVF	STACK_8, 0, 0
$0F20	$0818	    			SUBLW	24
$0F22	$	L_modf_74:
$0F22	$0100	    			MOVLB	0
$0F24	$E211	    			BC	L_modf_58
$0F26	$C173	FFE1			MOVFF	FARG_modf+4, FSR1L
$0F2A	$C174	FFE2			MOVFF	FARG_modf+5, FSR1H
$0F2E	$C16F	FFE6			MOVFF	FARG_modf+0, POSTINC1
$0F32	$C170	FFE6			MOVFF	FARG_modf+1, POSTINC1
$0F36	$C171	FFE6			MOVFF	FARG_modf+2, POSTINC1
$0F3A	$C172	FFE6			MOVFF	FARG_modf+3, POSTINC1
$0F3E	$6A00	    			CLRF	STACK_0, 0
$0F40	$6A01	    			CLRF	STACK_0+1, 0
$0F42	$6A02	    			CLRF	STACK_0+2, 0
$0F44	$6A03	    			CLRF	STACK_0+3, 0
$0F46	$0012	    			RETURN
$0F48	$	L_modf_58:
$0F48	$C16F	F000			MOVFF	FARG_modf+0, STACK_0
$0F4C	$C170	F001			MOVFF	FARG_modf+1, STACK_0+1
$0F50	$C171	F002			MOVFF	FARG_modf+2, STACK_0+2
$0F54	$C172	F003			MOVFF	FARG_modf+3, STACK_0+3
$0F58	$ECF3	F004			CALL	_double2longint
$0F5C	$EC8D	F005			CALL	_longint2double
$0F60	$C173	FFE1			MOVFF	FARG_modf+4, FSR1L
$0F64	$C174	FFE2			MOVFF	FARG_modf+5, FSR1H
$0F68	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0F6C	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$0F70	$C002	FFE6			MOVFF	STACK_0+2, POSTINC1
$0F74	$C003	FFE6			MOVFF	STACK_0+3, POSTINC1
$0F78	$C173	FFE9			MOVFF	FARG_modf+4, FSR0L
$0F7C	$C174	FFEA			MOVFF	FARG_modf+5, FSR0H
$0F80	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$0F84	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$0F88	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$0F8C	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$0F90	$C16F	F000			MOVFF	FARG_modf+0, STACK_0
$0F94	$C170	F001			MOVFF	FARG_modf+1, STACK_0+1
$0F98	$C171	F002			MOVFF	FARG_modf+2, STACK_0+2
$0F9C	$C172	F003			MOVFF	FARG_modf+3, STACK_0+3
$0FA0	$ECB0	F005			CALL	_sub_32x32_fp
$0FA4	$0012	    			RETURN
$0FA6	$	_Mul_32x32_S:
$0FA6	$0100	    			MOVLB	0
$0FA8	$6A0D	    			CLRF	STACK_13, 0
$0FAA	$	_IF_FIRST:
$0FAA	$AE03	    			BTFSS	STACK_3, 7, 0
$0FAC	$EFE3	F007			GOTO	_IF_SECOND
$0FB0	$	_INVERCE_FIRST:
$0FB0	$1E00	    			COMF	STACK_0, F, 0
$0FB2	$1E01	    			COMF	STACK_1, F, 0
$0FB4	$1E02	    			COMF	STACK_2, F, 0
$0FB6	$1E03	    			COMF	STACK_3, F, 0
$0FB8	$0E00	    			MOVLW	0
$0FBA	$2A00	    			INCF	STACK_0, F, 0
$0FBC	$2201	    			ADDWFC	STACK_1, F, 0
$0FBE	$2202	    			ADDWFC	STACK_2, F, 0
$0FC0	$2203	    			ADDWFC	STACK_3, F, 0
$0FC2	$0E81	    			MOVLW	129
$0FC4	$260D	    			ADDWF	STACK_13, F, 0
$0FC6	$	_IF_SECOND:
$0FC6	$AE07	    			BTFSS	STACK_7, 7, 0
$0FC8	$EFF0	F007			GOTO	_MULT
$0FCC	$	_INBERSE_SECOND:
$0FCC	$1E04	    			COMF	STACK_4, F, 0
$0FCE	$1E05	    			COMF	STACK_5, F, 0
$0FD0	$1E06	    			COMF	STACK_6, F, 0
$0FD2	$1E07	    			COMF	STACK_7, F, 0
$0FD4	$0E00	    			MOVLW	0
$0FD6	$2A04	    			INCF	STACK_4, F, 0
$0FD8	$2205	    			ADDWFC	STACK_5, F, 0
$0FDA	$2206	    			ADDWFC	STACK_6, F, 0
$0FDC	$2207	    			ADDWFC	STACK_7, F, 0
$0FDE	$2A0D	    			INCF	STACK_13, F, 0
$0FE0	$	_MULT:
$0FE0	$ECB5	F005			CALL	_Mul_32x32_U
$0FE4	$A00D	    			BTFSS	STACK_13, 0, 0
$0FE6	$EF06	F008			GOTO	_EXIT
$0FEA	$1E00	    			COMF	STACK_0, F, 0
$0FEC	$1E01	    			COMF	STACK_1, F, 0
$0FEE	$1E02	    			COMF	STACK_2, F, 0
$0FF0	$1E03	    			COMF	STACK_3, F, 0
$0FF2	$1E08	    			COMF	STACK_8, F, 0
$0FF4	$1E09	    			COMF	STACK_9, F, 0
$0FF6	$1E0A	    			COMF	STACK_10, F, 0
$0FF8	$1E0B	    			COMF	STACK_11, F, 0
$0FFA	$0E00	    			MOVLW	0
$0FFC	$2A00	    			INCF	STACK_0, F, 0
$0FFE	$2201	    			ADDWFC	STACK_1, F, 0
$1000	$2202	    			ADDWFC	STACK_2, F, 0
$1002	$2203	    			ADDWFC	STACK_3, F, 0
$1004	$2208	    			ADDWFC	STACK_8, F, 0
$1006	$2209	    			ADDWFC	STACK_9, F, 0
$1008	$220A	    			ADDWFC	STACK_10, F, 0
$100A	$220B	    			ADDWFC	STACK_11, F, 0
$100C	$	_EXIT:
$100C	$0012	    			RETURN
$100E	$	_dutyInterruptProc:
;duty.c,47 :: 			void dutyInterruptProc(void){
;duty.c,49 :: 			duty_count--;
$100E	$061E	    			DECF	_duty_count, 1, 0
;duty.c,50 :: 			if ( duty_count < setpoint ){
$1010	$501F	    			MOVF	_setpoint, 0, 0
$1012	$5C1E	    			SUBWF	_duty_count, 0, 0
$1014	$E203	    			BC	L_dutyInterruptProc_0
;duty.c,51 :: 			DUTY_PIN = 1;
$1016	$8A83	    			BSF	PORTD, 5, 0
;duty.c,52 :: 			}
$1018	$EF0F	F008			GOTO	L_dutyInterruptProc_1
$101C	$	L_dutyInterruptProc_0:
;duty.c,54 :: 			DUTY_PIN = 0;
$101C	$9A83	    			BCF	PORTD, 5, 0
;duty.c,55 :: 			}
$101E	$	L_dutyInterruptProc_1:
;duty.c,56 :: 			if ( duty_count == 0 ){
$101E	$501E	    			MOVF	_duty_count, 0, 0
$1020	$0A00	    			XORLW	0
$1022	$E102	    			BNZ	L_dutyInterruptProc_2
;duty.c,57 :: 			duty_count = duty_period;
$1024	$C020	F01E			MOVFF	_duty_period, _duty_count
;duty.c,58 :: 			}
$1028	$	L_dutyInterruptProc_2:
;duty.c,59 :: 			}
$1028	$0012	    			RETURN
$102A	$	_readTemp:
;extruder.c,394 :: 			void readTemp(){
;extruder.c,398 :: 			unsigned short res_h = 0;
$102A	$0101	    			MOVLB	1
$102C	$6B39	    			CLRF	readTemp_res_h_L0, 1
;extruder.c,399 :: 			unsigned short res_l = 0;
$102E	$6B3A	    			CLRF	readTemp_res_l_L0, 1
;extruder.c,401 :: 			SPI_PIN = 0;
$1030	$9083	    			BCF	PORTD, 0, 0
;extruder.c,405 :: 			SSPBUF = 0xFF;
$1032	$0EFF	    			MOVLW	255
$1034	$6EC9	    			MOVWF	SSPBUF, 0
;extruder.c,406 :: 			while ( SSPSTAT.BF == 0u );
$1036	$	L_readTemp_12:
$1036	$0101	    			MOVLB	1
$1038	$0E01	    			MOVLW	1
$103A	$14C7	    			ANDWF	SSPSTAT, 0, 0
$103C	$6E01	    			MOVWF	STACK_1, 0
$103E	$5001	    			MOVF	STACK_1, 0, 0
$1040	$0A00	    			XORLW	0
$1042	$E0F9	    			BZ	L_readTemp_12
$1044	$	L_readTemp_13:
;extruder.c,407 :: 			res_h = SSPBUF;
$1044	$CFC9	F139			MOVFF	SSPBUF, readTemp_res_h_L0
;extruder.c,412 :: 			SSPBUF = 0xFF;
$1048	$0EFF	    			MOVLW	255
$104A	$6EC9	    			MOVWF	SSPBUF, 0
;extruder.c,413 :: 			while ( SSPSTAT.BF == 0u);
$104C	$	L_readTemp_14:
$104C	$0101	    			MOVLB	1
$104E	$0E01	    			MOVLW	1
$1050	$14C7	    			ANDWF	SSPSTAT, 0, 0
$1052	$6E01	    			MOVWF	STACK_1, 0
$1054	$5001	    			MOVF	STACK_1, 0, 0
$1056	$0A00	    			XORLW	0
$1058	$E0F9	    			BZ	L_readTemp_14
$105A	$	L_readTemp_15:
;extruder.c,414 :: 			res_l = SSPBUF;
$105A	$CFC9	F13A			MOVFF	SSPBUF, readTemp_res_l_L0
;extruder.c,418 :: 			SPI_PIN = 1;
$105E	$8083	    			BSF	PORTD, 0, 0
;extruder.c,421 :: 			if ( res_l & 0x04 ){
$1060	$A53A	    			BTFSS	readTemp_res_l_L0, 2, 1
$1062	$D00A	    			BRA	L_readTemp_16
;extruder.c,423 :: 			pid_heater.feedback = 2000;
$1064	$0ED0	    			MOVLW	208
$1066	$0100	    			MOVLB	0
$1068	$6F65	    			MOVWF	_pid_heater+4, 1
$106A	$0E07	    			MOVLW	7
$106C	$6F66	    			MOVWF	_pid_heater+5, 1
$106E	$0E00	    			MOVLW	0
$1070	$6F67	    			MOVWF	_pid_heater+6, 1
$1072	$6F68	    			MOVWF	_pid_heater+7, 1
;extruder.c,424 :: 			pid_heater.enable = 0;
$1074	$6BA9	    			CLRF	_pid_heater+72, 1
;extruder.c,425 :: 			}
$1076	$D031	    			BRA	L_readTemp_17
$1078	$	L_readTemp_16:
;extruder.c,434 :: 			if ( heaterGlobalEnable == 1  ){
$1078	$0100	    			MOVLB	0
$107A	$5021	    			MOVF	_heaterGlobalEnable, 0, 0
$107C	$0A01	    			XORLW	1
$107E	$E102	    			BNZ	L_readTemp_18
;extruder.c,435 :: 			pid_heater.enable.F0 = 1;
$1080	$81A9	    			BSF	_pid_heater+72, 0, 1
;extruder.c,436 :: 			}
$1082	$D002	    			BRA	L_readTemp_19
$1084	$	L_readTemp_18:
;extruder.c,438 :: 			pid_heater.enable.F0 = 0;
$1084	$0100	    			MOVLB	0
$1086	$91A9	    			BCF	_pid_heater+72, 0, 1
;extruder.c,439 :: 			}
$1088	$	L_readTemp_19:
;extruder.c,441 :: 			res_temp =  ( res_h << 5 )+ (   res_l >> 3 );
$1088	$0E05	    			MOVLW	5
$108A	$6E00	    			MOVWF	STACK_0, 0
$108C	$C139	F065			MOVFF	readTemp_res_h_L0, _pid_heater+4
$1090	$0E00	    			MOVLW	0
$1092	$6F66	    			MOVWF	_pid_heater+5, 1
$1094	$5000	    			MOVF	STACK_0, 0, 0
$1096	$	L_readTemp_102:
$1096	$E005	    			BZ	L_readTemp_103
$1098	$3765	    			RLCF	_pid_heater+4, 1, 1
$109A	$9165	    			BCF	_pid_heater+4, 0, 1
$109C	$3766	    			RLCF	_pid_heater+5, 1, 1
$109E	$0FFF	    			ADDLW	255
$10A0	$D7FA	    			BRA	L_readTemp_102
$10A2	$	L_readTemp_103:
$10A2	$0100	    			MOVLB	0
$10A4	$C13A	F000			MOVFF	readTemp_res_l_L0, STACK_0
$10A8	$3200	    			RRCF	STACK_0, 1, 0
$10AA	$9E00	    			BCF	STACK_0, 7, 0
$10AC	$3200	    			RRCF	STACK_0, 1, 0
$10AE	$9E00	    			BCF	STACK_0, 7, 0
$10B0	$3200	    			RRCF	STACK_0, 1, 0
$10B2	$9E00	    			BCF	STACK_0, 7, 0
$10B4	$0E00	    			MOVLW	0
$10B6	$6F67	    			MOVWF	_pid_heater+6, 1
$10B8	$6F68	    			MOVWF	_pid_heater+7, 1
$10BA	$5000	    			MOVF	STACK_0, 0, 0
$10BC	$2765	    			ADDWF	_pid_heater+4, 1, 1
$10BE	$B0D8	    			BTFSC	STATUS, C, 0
$10C0	$2B66	    			INCF	_pid_heater+5, 1, 1
;extruder.c,443 :: 			pid_heater.feedback = (res_temp >> 2);
$10C2	$0E00	    			MOVLW	0
$10C4	$6F67	    			MOVWF	_pid_heater+6, 1
$10C6	$6F68	    			MOVWF	_pid_heater+7, 1
$10C8	$3366	    			RRCF	_pid_heater+5, 1, 1
$10CA	$3365	    			RRCF	_pid_heater+4, 1, 1
$10CC	$9F66	    			BCF	_pid_heater+5, 7, 1
$10CE	$3366	    			RRCF	_pid_heater+5, 1, 1
$10D0	$3365	    			RRCF	_pid_heater+4, 1, 1
$10D2	$9F66	    			BCF	_pid_heater+5, 7, 1
$10D4	$0E00	    			MOVLW	0
$10D6	$6F67	    			MOVWF	_pid_heater+6, 1
$10D8	$6F68	    			MOVWF	_pid_heater+7, 1
;extruder.c,445 :: 			}
$10DA	$	L_readTemp_17:
;extruder.c,447 :: 			}
$10DA	$0012	    			RETURN
$10DC	$	_calc_pid:
;pid.c,77 :: 			void calc_pid( struct PIDStruct *ps )
;pid.c,103 :: 			enable = ps->enable;
$10DC	$0E48	    			MOVLW	72
$10DE	$0101	    			MOVLB	1
$10E0	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$10E2	$6EE9	    			MOVWF	FSR0L, 0
$10E4	$0E00	    			MOVLW	0
$10E6	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$10E8	$6EEA	    			MOVWF	FSR0L+1, 0
$10EA	$CFEE	F15F			MOVFF	POSTINC0, calc_pid_enable_L0
;pid.c,104 :: 			maxerror = ps->maxerror;
$10EE	$0E0E	    			MOVLW	14
$10F0	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$10F2	$6EE9	    			MOVWF	FSR0L, 0
$10F4	$0E00	    			MOVLW	0
$10F6	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$10F8	$6EEA	    			MOVWF	FSR0L+1, 0
$10FA	$CFEE	F143			MOVFF	POSTINC0, calc_pid_maxerror_L0
$10FE	$CFEE	F144			MOVFF	POSTINC0, calc_pid_maxerror_L0+1
$1102	$CFEE	F145			MOVFF	POSTINC0, calc_pid_maxerror_L0+2
$1106	$CFEE	F146			MOVFF	POSTINC0, calc_pid_maxerror_L0+3
;pid.c,105 :: 			deadband = ps->deadband;
$110A	$0E0C	    			MOVLW	12
$110C	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$110E	$6EE9	    			MOVWF	FSR0L, 0
$1110	$0E00	    			MOVLW	0
$1112	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1114	$6EEA	    			MOVWF	FSR0L+1, 0
$1116	$CFEE	F160			MOVFF	POSTINC0, calc_pid_deadband_L0
$111A	$CFEE	F161			MOVFF	POSTINC0, calc_pid_deadband_L0+1
;pid.c,106 :: 			maxerror_i = ps->maxerror_i;
$111E	$0E12	    			MOVLW	18
$1120	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1122	$6EE9	    			MOVWF	FSR0L, 0
$1124	$0E00	    			MOVLW	0
$1126	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1128	$6EEA	    			MOVWF	FSR0L+1, 0
$112A	$CFEE	F147			MOVFF	POSTINC0, calc_pid_maxerror_i_L0
$112E	$CFEE	F148			MOVFF	POSTINC0, calc_pid_maxerror_i_L0+1
$1132	$0E00	    			MOVLW	0
$1134	$BF48	    			BTFSC	calc_pid_maxerror_i_L0+1, 7, 1
$1136	$0EFF	    			MOVLW	255
$1138	$6F49	    			MOVWF	calc_pid_maxerror_i_L0+2, 1
$113A	$6F4A	    			MOVWF	calc_pid_maxerror_i_L0+3, 1
$113C	$0E00	    			MOVLW	0
$113E	$BF48	    			BTFSC	calc_pid_maxerror_i_L0+1, 7, 1
$1140	$0EFF	    			MOVLW	255
$1142	$6F49	    			MOVWF	calc_pid_maxerror_i_L0+2, 1
$1144	$6F4A	    			MOVWF	calc_pid_maxerror_i_L0+3, 1
;pid.c,107 :: 			maxerror_d = ps->maxerror_d;
$1146	$0E14	    			MOVLW	20
$1148	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$114A	$6EE9	    			MOVWF	FSR0L, 0
$114C	$0E00	    			MOVLW	0
$114E	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1150	$6EEA	    			MOVWF	FSR0L+1, 0
$1152	$CFEE	F14B			MOVFF	POSTINC0, calc_pid_maxerror_d_L0
$1156	$CFEE	F14C			MOVFF	POSTINC0, calc_pid_maxerror_d_L0+1
$115A	$CFEE	F14D			MOVFF	POSTINC0, calc_pid_maxerror_d_L0+2
$115E	$CFEE	F14E			MOVFF	POSTINC0, calc_pid_maxerror_d_L0+3
;pid.c,108 :: 			maxoutput = ps->maxoutput;
$1162	$0E44	    			MOVLW	68
$1164	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1166	$6EE9	    			MOVWF	FSR0L, 0
$1168	$0E00	    			MOVLW	0
$116A	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$116C	$6EEA	    			MOVWF	FSR0L+1, 0
$116E	$CFEE	F162			MOVFF	POSTINC0, calc_pid_maxoutput_L0
$1172	$CFEE	F163			MOVFF	POSTINC0, calc_pid_maxoutput_L0+1
;pid.c,109 :: 			maxcmd_d = ps->maxcmd_d;
$1176	$0E18	    			MOVLW	24
$1178	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$117A	$6EE9	    			MOVWF	FSR0L, 0
$117C	$0E00	    			MOVLW	0
$117E	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1180	$6EEA	    			MOVWF	FSR0L+1, 0
$1182	$CFEE	F157			MOVFF	POSTINC0, calc_pid_maxcmd_d_L0
$1186	$CFEE	F158			MOVFF	POSTINC0, calc_pid_maxcmd_d_L0+1
$118A	$CFEE	F159			MOVFF	POSTINC0, calc_pid_maxcmd_d_L0+2
$118E	$CFEE	F15A			MOVFF	POSTINC0, calc_pid_maxcmd_d_L0+3
;pid.c,112 :: 			tmp1 = (ps->command - ps->feedback);
$1192	$C139	FFE9			MOVFF	FARG_calc_pid+0, FSR0L
$1196	$C13A	FFEA			MOVFF	FARG_calc_pid+1, FSR0H
$119A	$CFEE	F008			MOVFF	POSTINC0, STACK_8
$119E	$CFEE	F009			MOVFF	POSTINC0, STACK_8+1
$11A2	$CFEE	F00A			MOVFF	POSTINC0, STACK_8+2
$11A6	$CFEE	F00B			MOVFF	POSTINC0, STACK_8+3
$11AA	$0E04	    			MOVLW	4
$11AC	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$11AE	$6EE9	    			MOVWF	FSR0L, 0
$11B0	$0E00	    			MOVLW	0
$11B2	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$11B4	$6EEA	    			MOVWF	FSR0L+1, 0
$11B6	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$11BA	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$11BE	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$11C2	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$11C6	$C008	F000			MOVFF	STACK_8, STACK_0
$11CA	$C009	F001			MOVFF	STACK_8+1, STACK_0+1
$11CE	$C00A	F002			MOVFF	STACK_8+2, STACK_0+2
$11D2	$C00B	F003			MOVFF	STACK_8+3, STACK_0+3
$11D6	$5004	    			MOVF	STACK_4, 0, 0
$11D8	$5E00	    			SUBWF	STACK_0, 1, 0
$11DA	$5005	    			MOVF	STACK_4+1, 0, 0
$11DC	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$11DE	$5006	    			MOVF	STACK_4+2, 0, 0
$11E0	$5A02	    			SUBWFB	STACK_0+2, 1, 0
$11E2	$5007	    			MOVF	STACK_4+3, 0, 0
$11E4	$5A03	    			SUBWFB	STACK_0+3, 1, 0
$11E6	$C000	F13B			MOVFF	STACK_0, calc_pid_tmp1_L0
$11EA	$C001	F13C			MOVFF	STACK_0+1, calc_pid_tmp1_L0+1
$11EE	$C002	F13D			MOVFF	STACK_0+2, calc_pid_tmp1_L0+2
$11F2	$C003	F13E			MOVFF	STACK_0+3, calc_pid_tmp1_L0+3
;pid.c,113 :: 			ps->error = tmp1;
$11F6	$0E08	    			MOVLW	8
$11F8	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$11FA	$6EE1	    			MOVWF	FSR1L, 0
$11FC	$0E00	    			MOVLW	0
$11FE	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1200	$6EE2	    			MOVWF	FSR1L+1, 0
$1202	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$1206	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$120A	$C002	FFE6			MOVFF	STACK_0+2, POSTINC1
$120E	$C003	FFE6			MOVFF	STACK_0+3, POSTINC1
;pid.c,116 :: 			if (maxerror != 0){
$1212	$0E00	    			MOVLW	0
$1214	$6E00	    			MOVWF	STACK_0, 0
$1216	$1946	    			XORWF	calc_pid_maxerror_L0+3, 0, 1
$1218	$E108	    			BNZ	L_calc_pid_29
$121A	$5000	    			MOVF	STACK_0, 0, 0
$121C	$1945	    			XORWF	calc_pid_maxerror_L0+2, 0, 1
$121E	$E105	    			BNZ	L_calc_pid_29
$1220	$5000	    			MOVF	STACK_0, 0, 0
$1222	$1944	    			XORWF	calc_pid_maxerror_L0+1, 0, 1
$1224	$E102	    			BNZ	L_calc_pid_29
$1226	$5143	    			MOVF	calc_pid_maxerror_L0, 0, 1
$1228	$0A00	    			XORLW	0
$122A	$	L_calc_pid_29:
$122A	$E050	    			BZ	L_calc_pid_0
;pid.c,117 :: 			if (tmp1 > maxerror){
$122C	$0E80	    			MOVLW	128
$122E	$1946	    			XORWF	calc_pid_maxerror_L0+3, 0, 1
$1230	$6E00	    			MOVWF	STACK_0, 0
$1232	$0E80	    			MOVLW	128
$1234	$193E	    			XORWF	calc_pid_tmp1_L0+3, 0, 1
$1236	$5C00	    			SUBWF	STACK_0, 0, 0
$1238	$E108	    			BNZ	L_calc_pid_30
$123A	$513D	    			MOVF	calc_pid_tmp1_L0+2, 0, 1
$123C	$5D45	    			SUBWF	calc_pid_maxerror_L0+2, 0, 1
$123E	$E105	    			BNZ	L_calc_pid_30
$1240	$513C	    			MOVF	calc_pid_tmp1_L0+1, 0, 1
$1242	$5D44	    			SUBWF	calc_pid_maxerror_L0+1, 0, 1
$1244	$E102	    			BNZ	L_calc_pid_30
$1246	$513B	    			MOVF	calc_pid_tmp1_L0, 0, 1
$1248	$5D43	    			SUBWF	calc_pid_maxerror_L0, 0, 1
$124A	$	L_calc_pid_30:
$124A	$E210	    			BC	L_calc_pid_1
;pid.c,118 :: 			tmp1 = maxerror;
$124C	$C143	F13B			MOVFF	calc_pid_maxerror_L0, calc_pid_tmp1_L0
$1250	$C144	F13C			MOVFF	calc_pid_maxerror_L0+1, calc_pid_tmp1_L0+1
$1254	$C145	F13D			MOVFF	calc_pid_maxerror_L0+2, calc_pid_tmp1_L0+2
$1258	$C146	F13E			MOVFF	calc_pid_maxerror_L0+3, calc_pid_tmp1_L0+3
;pid.c,120 :: 			ps->enable = 0u;
$125C	$0E48	    			MOVLW	72
$125E	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1260	$6EE1	    			MOVWF	FSR1L, 0
$1262	$0E00	    			MOVLW	0
$1264	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1266	$6EE2	    			MOVWF	FSR1L+1, 0
$1268	$6AE6	    			CLRF	POSTINC1, 0
;pid.c,121 :: 			}
$126A	$D030	    			BRA	L_calc_pid_2
$126C	$	L_calc_pid_1:
;pid.c,122 :: 			else if (tmp1 < -maxerror){
$126C	$0101	    			MOVLB	1
$126E	$6A04	    			CLRF	STACK_4, 0
$1270	$6A05	    			CLRF	STACK_4+1, 0
$1272	$6A06	    			CLRF	STACK_4+2, 0
$1274	$6A07	    			CLRF	STACK_4+3, 0
$1276	$5143	    			MOVF	calc_pid_maxerror_L0, 0, 1
$1278	$5E04	    			SUBWF	STACK_4, 1, 0
$127A	$5144	    			MOVF	calc_pid_maxerror_L0+1, 0, 1
$127C	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$127E	$5145	    			MOVF	calc_pid_maxerror_L0+2, 0, 1
$1280	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$1282	$5146	    			MOVF	calc_pid_maxerror_L0+3, 0, 1
$1284	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$1286	$0E80	    			MOVLW	128
$1288	$193E	    			XORWF	calc_pid_tmp1_L0+3, 0, 1
$128A	$6E00	    			MOVWF	STACK_0, 0
$128C	$0E80	    			MOVLW	128
$128E	$1807	    			XORWF	STACK_4+3, 0, 0
$1290	$5C00	    			SUBWF	STACK_0, 0, 0
$1292	$E108	    			BNZ	L_calc_pid_31
$1294	$5006	    			MOVF	STACK_4+2, 0, 0
$1296	$5D3D	    			SUBWF	calc_pid_tmp1_L0+2, 0, 1
$1298	$E105	    			BNZ	L_calc_pid_31
$129A	$5005	    			MOVF	STACK_4+1, 0, 0
$129C	$5D3C	    			SUBWF	calc_pid_tmp1_L0+1, 0, 1
$129E	$E102	    			BNZ	L_calc_pid_31
$12A0	$5004	    			MOVF	STACK_4, 0, 0
$12A2	$5D3B	    			SUBWF	calc_pid_tmp1_L0, 0, 1
$12A4	$	L_calc_pid_31:
$12A4	$E213	    			BC	L_calc_pid_3
;pid.c,123 :: 			tmp1 = -maxerror;
$12A6	$6B3B	    			CLRF	calc_pid_tmp1_L0, 1
$12A8	$6B3C	    			CLRF	calc_pid_tmp1_L0+1, 1
$12AA	$6B3D	    			CLRF	calc_pid_tmp1_L0+2, 1
$12AC	$6B3E	    			CLRF	calc_pid_tmp1_L0+3, 1
$12AE	$5143	    			MOVF	calc_pid_maxerror_L0, 0, 1
$12B0	$5F3B	    			SUBWF	calc_pid_tmp1_L0, 1, 1
$12B2	$5144	    			MOVF	calc_pid_maxerror_L0+1, 0, 1
$12B4	$5B3C	    			SUBWFB	calc_pid_tmp1_L0+1, 1, 1
$12B6	$5145	    			MOVF	calc_pid_maxerror_L0+2, 0, 1
$12B8	$5B3D	    			SUBWFB	calc_pid_tmp1_L0+2, 1, 1
$12BA	$5146	    			MOVF	calc_pid_maxerror_L0+3, 0, 1
$12BC	$5B3E	    			SUBWFB	calc_pid_tmp1_L0+3, 1, 1
;pid.c,124 :: 			ps->enable = 0u;
$12BE	$0E48	    			MOVLW	72
$12C0	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$12C2	$6EE1	    			MOVWF	FSR1L, 0
$12C4	$0E00	    			MOVLW	0
$12C6	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$12C8	$6EE2	    			MOVWF	FSR1L+1, 0
$12CA	$6AE6	    			CLRF	POSTINC1, 0
;pid.c,125 :: 			}
$12CC	$	L_calc_pid_3:
$12CC	$	L_calc_pid_2:
;pid.c,126 :: 			}
$12CC	$	L_calc_pid_0:
;pid.c,129 :: 			if (tmp1 > deadband) {
$12CC	$0101	    			MOVLB	1
$12CE	$0101	    			MOVLB	1
$12D0	$0E80	    			MOVLW	128
$12D2	$BF61	    			BTFSC	calc_pid_deadband_L0+1, 7, 1
$12D4	$0E7F	    			MOVLW	127
$12D6	$6E00	    			MOVWF	STACK_0, 0
$12D8	$0E80	    			MOVLW	128
$12DA	$193E	    			XORWF	calc_pid_tmp1_L0+3, 0, 1
$12DC	$5C00	    			SUBWF	STACK_0, 0, 0
$12DE	$E10C	    			BNZ	L_calc_pid_32
$12E0	$0E00	    			MOVLW	0
$12E2	$BF61	    			BTFSC	calc_pid_deadband_L0+1, 7, 1
$12E4	$0EFF	    			MOVLW	255
$12E6	$6E00	    			MOVWF	STACK_0, 0
$12E8	$513D	    			MOVF	calc_pid_tmp1_L0+2, 0, 1
$12EA	$5C00	    			SUBWF	STACK_0, 0, 0
$12EC	$E105	    			BNZ	L_calc_pid_32
$12EE	$513C	    			MOVF	calc_pid_tmp1_L0+1, 0, 1
$12F0	$5D61	    			SUBWF	calc_pid_deadband_L0+1, 0, 1
$12F2	$E102	    			BNZ	L_calc_pid_32
$12F4	$513B	    			MOVF	calc_pid_tmp1_L0, 0, 1
$12F6	$5D60	    			SUBWF	calc_pid_deadband_L0, 0, 1
$12F8	$	L_calc_pid_32:
$12F8	$E212	    			BC	L_calc_pid_4
;pid.c,130 :: 			tmp1 -= deadband;
$12FA	$C160	F000			MOVFF	calc_pid_deadband_L0, STACK_0
$12FE	$C161	F001			MOVFF	calc_pid_deadband_L0+1, STACK_0+1
$1302	$0E00	    			MOVLW	0
$1304	$BF61	    			BTFSC	calc_pid_deadband_L0+1, 7, 1
$1306	$0EFF	    			MOVLW	255
$1308	$6E02	    			MOVWF	STACK_0+2, 0
$130A	$6E03	    			MOVWF	STACK_0+3, 0
$130C	$5000	    			MOVF	STACK_0, 0, 0
$130E	$5F3B	    			SUBWF	calc_pid_tmp1_L0, 1, 1
$1310	$5001	    			MOVF	STACK_0+1, 0, 0
$1312	$5B3C	    			SUBWFB	calc_pid_tmp1_L0+1, 1, 1
$1314	$5002	    			MOVF	STACK_0+2, 0, 0
$1316	$5B3D	    			SUBWFB	calc_pid_tmp1_L0+2, 1, 1
$1318	$5003	    			MOVF	STACK_0+3, 0, 0
$131A	$5B3E	    			SUBWFB	calc_pid_tmp1_L0+3, 1, 1
;pid.c,131 :: 			}
$131C	$D034	    			BRA	L_calc_pid_5
$131E	$	L_calc_pid_4:
;pid.c,132 :: 			else if (tmp1 < -deadband){
$131E	$0101	    			MOVLB	1
$1320	$5160	    			MOVF	calc_pid_deadband_L0, 0, 1
$1322	$0800	    			SUBLW	0
$1324	$6E04	    			MOVWF	STACK_4, 0
$1326	$C161	F005			MOVFF	calc_pid_deadband_L0+1, STACK_4+1
$132A	$6AE8	    			CLRF	WREG, 0
$132C	$5605	    			SUBFWB	STACK_4+1, 1, 0
$132E	$0E80	    			MOVLW	128
$1330	$193E	    			XORWF	calc_pid_tmp1_L0+3, 0, 1
$1332	$6E00	    			MOVWF	STACK_0, 0
$1334	$0E80	    			MOVLW	128
$1336	$BE05	    			BTFSC	STACK_4+1, 7, 0
$1338	$0E7F	    			MOVLW	127
$133A	$5C00	    			SUBWF	STACK_0, 0, 0
$133C	$E10C	    			BNZ	L_calc_pid_33
$133E	$0E00	    			MOVLW	0
$1340	$BE05	    			BTFSC	STACK_4+1, 7, 0
$1342	$0EFF	    			MOVLW	255
$1344	$5D3D	    			SUBWF	calc_pid_tmp1_L0+2, 0, 1
$1346	$E107	    			BNZ	L_calc_pid_33
$1348	$0E00	    			MOVLW	0
$134A	$BE05	    			BTFSC	STACK_4+1, 7, 0
$134C	$0EFF	    			MOVLW	255
$134E	$5D3C	    			SUBWF	calc_pid_tmp1_L0+1, 0, 1
$1350	$E102	    			BNZ	L_calc_pid_33
$1352	$5004	    			MOVF	STACK_4, 0, 0
$1354	$5D3B	    			SUBWF	calc_pid_tmp1_L0, 0, 1
$1356	$	L_calc_pid_33:
$1356	$E20A	    			BC	L_calc_pid_6
;pid.c,133 :: 			tmp1 += deadband;
$1358	$5160	    			MOVF	calc_pid_deadband_L0, 0, 1
$135A	$273B	    			ADDWF	calc_pid_tmp1_L0, 1, 1
$135C	$5161	    			MOVF	calc_pid_deadband_L0+1, 0, 1
$135E	$233C	    			ADDWFC	calc_pid_tmp1_L0+1, 1, 1
$1360	$0E00	    			MOVLW	0
$1362	$BF61	    			BTFSC	calc_pid_deadband_L0+1, 7, 1
$1364	$0EFF	    			MOVLW	255
$1366	$233D	    			ADDWFC	calc_pid_tmp1_L0+2, 1, 1
$1368	$233E	    			ADDWFC	calc_pid_tmp1_L0+3, 1, 1
;pid.c,134 :: 			}
$136A	$D00D	    			BRA	L_calc_pid_7
$136C	$	L_calc_pid_6:
;pid.c,136 :: 			tmp1 = 0;
$136C	$0101	    			MOVLB	1
$136E	$6B3B	    			CLRF	calc_pid_tmp1_L0, 1
$1370	$6B3C	    			CLRF	calc_pid_tmp1_L0+1, 1
$1372	$6B3D	    			CLRF	calc_pid_tmp1_L0+2, 1
$1374	$6B3E	    			CLRF	calc_pid_tmp1_L0+3, 1
;pid.c,138 :: 			ps->error_i = 0;
$1376	$0E1C	    			MOVLW	28
$1378	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$137A	$6EE1	    			MOVWF	FSR1L, 0
$137C	$0E00	    			MOVLW	0
$137E	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1380	$6EE2	    			MOVWF	FSR1L+1, 0
$1382	$6AE6	    			CLRF	POSTINC1, 0
$1384	$6AE6	    			CLRF	POSTINC1, 0
;pid.c,139 :: 			}
$1386	$	L_calc_pid_7:
$1386	$	L_calc_pid_5:
;pid.c,142 :: 			error_i = ps->error_i;
$1386	$0E1C	    			MOVLW	28
$1388	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$138A	$6EE9	    			MOVWF	FSR0L, 0
$138C	$0E00	    			MOVLW	0
$138E	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1390	$6EEA	    			MOVWF	FSR0L+1, 0
$1392	$CFEE	F14F			MOVFF	POSTINC0, calc_pid_error_i_L0
$1396	$CFEE	F150			MOVFF	POSTINC0, calc_pid_error_i_L0+1
$139A	$0E00	    			MOVLW	0
$139C	$BF50	    			BTFSC	calc_pid_error_i_L0+1, 7, 1
$139E	$0EFF	    			MOVLW	255
$13A0	$6F51	    			MOVWF	calc_pid_error_i_L0+2, 1
$13A2	$6F52	    			MOVWF	calc_pid_error_i_L0+3, 1
$13A4	$0E00	    			MOVLW	0
$13A6	$BF50	    			BTFSC	calc_pid_error_i_L0+1, 7, 1
$13A8	$0EFF	    			MOVLW	255
$13AA	$6F51	    			MOVWF	calc_pid_error_i_L0+2, 1
$13AC	$6F52	    			MOVWF	calc_pid_error_i_L0+3, 1
;pid.c,143 :: 			if (enable != 0u) {
$13AE	$515F	    			MOVF	calc_pid_enable_L0, 0, 1
$13B0	$0A00	    			XORLW	0
$13B2	$B4D8	    			BTFSC	STATUS, Z, 0
$13B4	$D066	    			BRA	L_calc_pid_8
;pid.c,145 :: 			if ( ps->limit_state == 0u ){
$13B6	$0E49	    			MOVLW	73
$13B8	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$13BA	$6EE9	    			MOVWF	FSR0L, 0
$13BC	$0E00	    			MOVLW	0
$13BE	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$13C0	$6EEA	    			MOVWF	FSR0L+1, 0
$13C2	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$13C6	$5004	    			MOVF	STACK_4, 0, 0
$13C8	$0A00	    			XORLW	0
$13CA	$E108	    			BNZ	L_calc_pid_9
;pid.c,147 :: 			error_i += tmp1;
$13CC	$513B	    			MOVF	calc_pid_tmp1_L0, 0, 1
$13CE	$274F	    			ADDWF	calc_pid_error_i_L0, 1, 1
$13D0	$513C	    			MOVF	calc_pid_tmp1_L0+1, 0, 1
$13D2	$2350	    			ADDWFC	calc_pid_error_i_L0+1, 1, 1
$13D4	$513D	    			MOVF	calc_pid_tmp1_L0+2, 0, 1
$13D6	$2351	    			ADDWFC	calc_pid_error_i_L0+2, 1, 1
$13D8	$513E	    			MOVF	calc_pid_tmp1_L0+3, 0, 1
$13DA	$2352	    			ADDWFC	calc_pid_error_i_L0+3, 1, 1
;pid.c,148 :: 			}
$13DC	$	L_calc_pid_9:
;pid.c,151 :: 			if (maxerror_i != 0u)	{
$13DC	$0E00	    			MOVLW	0
$13DE	$6E00	    			MOVWF	STACK_0, 0
$13E0	$194A	    			XORWF	calc_pid_maxerror_i_L0+3, 0, 1
$13E2	$E108	    			BNZ	L_calc_pid_34
$13E4	$5000	    			MOVF	STACK_0, 0, 0
$13E6	$1949	    			XORWF	calc_pid_maxerror_i_L0+2, 0, 1
$13E8	$E105	    			BNZ	L_calc_pid_34
$13EA	$5000	    			MOVF	STACK_0, 0, 0
$13EC	$1948	    			XORWF	calc_pid_maxerror_i_L0+1, 0, 1
$13EE	$E102	    			BNZ	L_calc_pid_34
$13F0	$5147	    			MOVF	calc_pid_maxerror_i_L0, 0, 1
$13F2	$0A00	    			XORLW	0
$13F4	$	L_calc_pid_34:
$13F4	$E042	    			BZ	L_calc_pid_10
;pid.c,152 :: 			if (error_i > maxerror_i){
$13F6	$0E80	    			MOVLW	128
$13F8	$194A	    			XORWF	calc_pid_maxerror_i_L0+3, 0, 1
$13FA	$6E00	    			MOVWF	STACK_0, 0
$13FC	$0E80	    			MOVLW	128
$13FE	$1952	    			XORWF	calc_pid_error_i_L0+3, 0, 1
$1400	$5C00	    			SUBWF	STACK_0, 0, 0
$1402	$E108	    			BNZ	L_calc_pid_35
$1404	$5151	    			MOVF	calc_pid_error_i_L0+2, 0, 1
$1406	$5D49	    			SUBWF	calc_pid_maxerror_i_L0+2, 0, 1
$1408	$E105	    			BNZ	L_calc_pid_35
$140A	$5150	    			MOVF	calc_pid_error_i_L0+1, 0, 1
$140C	$5D48	    			SUBWF	calc_pid_maxerror_i_L0+1, 0, 1
$140E	$E102	    			BNZ	L_calc_pid_35
$1410	$514F	    			MOVF	calc_pid_error_i_L0, 0, 1
$1412	$5D47	    			SUBWF	calc_pid_maxerror_i_L0, 0, 1
$1414	$	L_calc_pid_35:
$1414	$E209	    			BC	L_calc_pid_11
;pid.c,153 :: 			error_i = maxerror_i;
$1416	$C147	F14F			MOVFF	calc_pid_maxerror_i_L0, calc_pid_error_i_L0
$141A	$C148	F150			MOVFF	calc_pid_maxerror_i_L0+1, calc_pid_error_i_L0+1
$141E	$C149	F151			MOVFF	calc_pid_maxerror_i_L0+2, calc_pid_error_i_L0+2
$1422	$C14A	F152			MOVFF	calc_pid_maxerror_i_L0+3, calc_pid_error_i_L0+3
;pid.c,154 :: 			}
$1426	$D029	    			BRA	L_calc_pid_12
$1428	$	L_calc_pid_11:
;pid.c,155 :: 			else if (error_i < (-maxerror_i)){
$1428	$0101	    			MOVLB	1
$142A	$6A04	    			CLRF	STACK_4, 0
$142C	$6A05	    			CLRF	STACK_4+1, 0
$142E	$6A06	    			CLRF	STACK_4+2, 0
$1430	$6A07	    			CLRF	STACK_4+3, 0
$1432	$5147	    			MOVF	calc_pid_maxerror_i_L0, 0, 1
$1434	$5E04	    			SUBWF	STACK_4, 1, 0
$1436	$5148	    			MOVF	calc_pid_maxerror_i_L0+1, 0, 1
$1438	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$143A	$5149	    			MOVF	calc_pid_maxerror_i_L0+2, 0, 1
$143C	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$143E	$514A	    			MOVF	calc_pid_maxerror_i_L0+3, 0, 1
$1440	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$1442	$0E80	    			MOVLW	128
$1444	$1952	    			XORWF	calc_pid_error_i_L0+3, 0, 1
$1446	$6E00	    			MOVWF	STACK_0, 0
$1448	$0E80	    			MOVLW	128
$144A	$1807	    			XORWF	STACK_4+3, 0, 0
$144C	$5C00	    			SUBWF	STACK_0, 0, 0
$144E	$E108	    			BNZ	L_calc_pid_36
$1450	$5006	    			MOVF	STACK_4+2, 0, 0
$1452	$5D51	    			SUBWF	calc_pid_error_i_L0+2, 0, 1
$1454	$E105	    			BNZ	L_calc_pid_36
$1456	$5005	    			MOVF	STACK_4+1, 0, 0
$1458	$5D50	    			SUBWF	calc_pid_error_i_L0+1, 0, 1
$145A	$E102	    			BNZ	L_calc_pid_36
$145C	$5004	    			MOVF	STACK_4, 0, 0
$145E	$5D4F	    			SUBWF	calc_pid_error_i_L0, 0, 1
$1460	$	L_calc_pid_36:
$1460	$E20C	    			BC	L_calc_pid_13
;pid.c,156 :: 			error_i = -maxerror_i;
$1462	$6B4F	    			CLRF	calc_pid_error_i_L0, 1
$1464	$6B50	    			CLRF	calc_pid_error_i_L0+1, 1
$1466	$6B51	    			CLRF	calc_pid_error_i_L0+2, 1
$1468	$6B52	    			CLRF	calc_pid_error_i_L0+3, 1
$146A	$5147	    			MOVF	calc_pid_maxerror_i_L0, 0, 1
$146C	$5F4F	    			SUBWF	calc_pid_error_i_L0, 1, 1
$146E	$5148	    			MOVF	calc_pid_maxerror_i_L0+1, 0, 1
$1470	$5B50	    			SUBWFB	calc_pid_error_i_L0+1, 1, 1
$1472	$5149	    			MOVF	calc_pid_maxerror_i_L0+2, 0, 1
$1474	$5B51	    			SUBWFB	calc_pid_error_i_L0+2, 1, 1
$1476	$514A	    			MOVF	calc_pid_maxerror_i_L0+3, 0, 1
$1478	$5B52	    			SUBWFB	calc_pid_error_i_L0+3, 1, 1
;pid.c,157 :: 			}
$147A	$	L_calc_pid_13:
$147A	$	L_calc_pid_12:
;pid.c,158 :: 			}
$147A	$	L_calc_pid_10:
;pid.c,159 :: 			}
$147A	$0101	    			MOVLB	1
$147C	$0101	    			MOVLB	1
$147E	$0101	    			MOVLB	1
$1480	$D004	    			BRA	L_calc_pid_14
$1482	$	L_calc_pid_8:
;pid.c,162 :: 			error_i = 0;
$1482	$6B4F	    			CLRF	calc_pid_error_i_L0, 1
$1484	$6B50	    			CLRF	calc_pid_error_i_L0+1, 1
$1486	$6B51	    			CLRF	calc_pid_error_i_L0+2, 1
$1488	$6B52	    			CLRF	calc_pid_error_i_L0+3, 1
;pid.c,163 :: 			}
$148A	$	L_calc_pid_14:
;pid.c,164 :: 			ps->error_i = error_i;
$148A	$0101	    			MOVLB	1
$148C	$0E1C	    			MOVLW	28
$148E	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1490	$6EE1	    			MOVWF	FSR1L, 0
$1492	$0E00	    			MOVLW	0
$1494	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1496	$6EE2	    			MOVWF	FSR1L+1, 0
$1498	$C14F	FFE6			MOVFF	calc_pid_error_i_L0, POSTINC1
$149C	$C150	FFE6			MOVFF	calc_pid_error_i_L0+1, POSTINC1
;pid.c,167 :: 			error_d =  (tmp1 - ps->prev_error);
$14A0	$0E1E	    			MOVLW	30
$14A2	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$14A4	$6E04	    			MOVWF	STACK_4, 0
$14A6	$0E00	    			MOVLW	0
$14A8	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$14AA	$6E05	    			MOVWF	STACK_4+1, 0
$14AC	$C004	FFE9			MOVFF	STACK_4, FSR0L
$14B0	$C005	FFEA			MOVFF	STACK_4+1, FSR0H
$14B4	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$14B8	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$14BC	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$14C0	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$14C4	$C13B	F153			MOVFF	calc_pid_tmp1_L0, calc_pid_error_d_L0
$14C8	$C13C	F154			MOVFF	calc_pid_tmp1_L0+1, calc_pid_error_d_L0+1
$14CC	$C13D	F155			MOVFF	calc_pid_tmp1_L0+2, calc_pid_error_d_L0+2
$14D0	$C13E	F156			MOVFF	calc_pid_tmp1_L0+3, calc_pid_error_d_L0+3
$14D4	$5000	    			MOVF	STACK_0, 0, 0
$14D6	$5F53	    			SUBWF	calc_pid_error_d_L0, 1, 1
$14D8	$5001	    			MOVF	STACK_0+1, 0, 0
$14DA	$5B54	    			SUBWFB	calc_pid_error_d_L0+1, 1, 1
$14DC	$5002	    			MOVF	STACK_0+2, 0, 0
$14DE	$5B55	    			SUBWFB	calc_pid_error_d_L0+2, 1, 1
$14E0	$5003	    			MOVF	STACK_0+3, 0, 0
$14E2	$5B56	    			SUBWFB	calc_pid_error_d_L0+3, 1, 1
;pid.c,168 :: 			ps->prev_error = tmp1;
$14E4	$C004	FFE1			MOVFF	STACK_4, FSR1L
$14E8	$C005	FFE2			MOVFF	STACK_4+1, FSR1H
$14EC	$C13B	FFE6			MOVFF	calc_pid_tmp1_L0, POSTINC1
$14F0	$C13C	FFE6			MOVFF	calc_pid_tmp1_L0+1, POSTINC1
$14F4	$C13D	FFE6			MOVFF	calc_pid_tmp1_L0+2, POSTINC1
$14F8	$C13E	FFE6			MOVFF	calc_pid_tmp1_L0+3, POSTINC1
;pid.c,170 :: 			if (maxerror_d != 0u) {
$14FC	$0E00	    			MOVLW	0
$14FE	$6E00	    			MOVWF	STACK_0, 0
$1500	$194E	    			XORWF	calc_pid_maxerror_d_L0+3, 0, 1
$1502	$E108	    			BNZ	L_calc_pid_37
$1504	$5000	    			MOVF	STACK_0, 0, 0
$1506	$194D	    			XORWF	calc_pid_maxerror_d_L0+2, 0, 1
$1508	$E105	    			BNZ	L_calc_pid_37
$150A	$5000	    			MOVF	STACK_0, 0, 0
$150C	$194C	    			XORWF	calc_pid_maxerror_d_L0+1, 0, 1
$150E	$E102	    			BNZ	L_calc_pid_37
$1510	$514B	    			MOVF	calc_pid_maxerror_d_L0, 0, 1
$1512	$0A00	    			XORLW	0
$1514	$	L_calc_pid_37:
$1514	$E042	    			BZ	L_calc_pid_15
;pid.c,171 :: 			if (error_d > maxerror_d){
$1516	$0E80	    			MOVLW	128
$1518	$194E	    			XORWF	calc_pid_maxerror_d_L0+3, 0, 1
$151A	$6E00	    			MOVWF	STACK_0, 0
$151C	$0E80	    			MOVLW	128
$151E	$1956	    			XORWF	calc_pid_error_d_L0+3, 0, 1
$1520	$5C00	    			SUBWF	STACK_0, 0, 0
$1522	$E108	    			BNZ	L_calc_pid_38
$1524	$5155	    			MOVF	calc_pid_error_d_L0+2, 0, 1
$1526	$5D4D	    			SUBWF	calc_pid_maxerror_d_L0+2, 0, 1
$1528	$E105	    			BNZ	L_calc_pid_38
$152A	$5154	    			MOVF	calc_pid_error_d_L0+1, 0, 1
$152C	$5D4C	    			SUBWF	calc_pid_maxerror_d_L0+1, 0, 1
$152E	$E102	    			BNZ	L_calc_pid_38
$1530	$5153	    			MOVF	calc_pid_error_d_L0, 0, 1
$1532	$5D4B	    			SUBWF	calc_pid_maxerror_d_L0, 0, 1
$1534	$	L_calc_pid_38:
$1534	$E209	    			BC	L_calc_pid_16
;pid.c,172 :: 			error_d = maxerror_d;
$1536	$C14B	F153			MOVFF	calc_pid_maxerror_d_L0, calc_pid_error_d_L0
$153A	$C14C	F154			MOVFF	calc_pid_maxerror_d_L0+1, calc_pid_error_d_L0+1
$153E	$C14D	F155			MOVFF	calc_pid_maxerror_d_L0+2, calc_pid_error_d_L0+2
$1542	$C14E	F156			MOVFF	calc_pid_maxerror_d_L0+3, calc_pid_error_d_L0+3
;pid.c,173 :: 			}
$1546	$D029	    			BRA	L_calc_pid_17
$1548	$	L_calc_pid_16:
;pid.c,174 :: 			else if (error_d < -maxerror_d){
$1548	$0101	    			MOVLB	1
$154A	$6A04	    			CLRF	STACK_4, 0
$154C	$6A05	    			CLRF	STACK_4+1, 0
$154E	$6A06	    			CLRF	STACK_4+2, 0
$1550	$6A07	    			CLRF	STACK_4+3, 0
$1552	$514B	    			MOVF	calc_pid_maxerror_d_L0, 0, 1
$1554	$5E04	    			SUBWF	STACK_4, 1, 0
$1556	$514C	    			MOVF	calc_pid_maxerror_d_L0+1, 0, 1
$1558	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$155A	$514D	    			MOVF	calc_pid_maxerror_d_L0+2, 0, 1
$155C	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$155E	$514E	    			MOVF	calc_pid_maxerror_d_L0+3, 0, 1
$1560	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$1562	$0E80	    			MOVLW	128
$1564	$1956	    			XORWF	calc_pid_error_d_L0+3, 0, 1
$1566	$6E00	    			MOVWF	STACK_0, 0
$1568	$0E80	    			MOVLW	128
$156A	$1807	    			XORWF	STACK_4+3, 0, 0
$156C	$5C00	    			SUBWF	STACK_0, 0, 0
$156E	$E108	    			BNZ	L_calc_pid_39
$1570	$5006	    			MOVF	STACK_4+2, 0, 0
$1572	$5D55	    			SUBWF	calc_pid_error_d_L0+2, 0, 1
$1574	$E105	    			BNZ	L_calc_pid_39
$1576	$5005	    			MOVF	STACK_4+1, 0, 0
$1578	$5D54	    			SUBWF	calc_pid_error_d_L0+1, 0, 1
$157A	$E102	    			BNZ	L_calc_pid_39
$157C	$5004	    			MOVF	STACK_4, 0, 0
$157E	$5D53	    			SUBWF	calc_pid_error_d_L0, 0, 1
$1580	$	L_calc_pid_39:
$1580	$E20C	    			BC	L_calc_pid_18
;pid.c,175 :: 			error_d = -maxerror_d;
$1582	$6B53	    			CLRF	calc_pid_error_d_L0, 1
$1584	$6B54	    			CLRF	calc_pid_error_d_L0+1, 1
$1586	$6B55	    			CLRF	calc_pid_error_d_L0+2, 1
$1588	$6B56	    			CLRF	calc_pid_error_d_L0+3, 1
$158A	$514B	    			MOVF	calc_pid_maxerror_d_L0, 0, 1
$158C	$5F53	    			SUBWF	calc_pid_error_d_L0, 1, 1
$158E	$514C	    			MOVF	calc_pid_maxerror_d_L0+1, 0, 1
$1590	$5B54	    			SUBWFB	calc_pid_error_d_L0+1, 1, 1
$1592	$514D	    			MOVF	calc_pid_maxerror_d_L0+2, 0, 1
$1594	$5B55	    			SUBWFB	calc_pid_error_d_L0+2, 1, 1
$1596	$514E	    			MOVF	calc_pid_maxerror_d_L0+3, 0, 1
$1598	$5B56	    			SUBWFB	calc_pid_error_d_L0+3, 1, 1
;pid.c,176 :: 			}
$159A	$	L_calc_pid_18:
$159A	$	L_calc_pid_17:
;pid.c,177 :: 			}
$159A	$	L_calc_pid_15:
;pid.c,178 :: 			ps->error_d = error_d;
$159A	$0101	    			MOVLB	1
$159C	$0101	    			MOVLB	1
$159E	$0101	    			MOVLB	1
$15A0	$0E22	    			MOVLW	34
$15A2	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$15A4	$6EE1	    			MOVWF	FSR1L, 0
$15A6	$0E00	    			MOVLW	0
$15A8	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$15AA	$6EE2	    			MOVWF	FSR1L+1, 0
$15AC	$C153	FFE6			MOVFF	calc_pid_error_d_L0, POSTINC1
$15B0	$C154	FFE6			MOVFF	calc_pid_error_d_L0+1, POSTINC1
$15B4	$C155	FFE6			MOVFF	calc_pid_error_d_L0+2, POSTINC1
$15B8	$C156	FFE6			MOVFF	calc_pid_error_d_L0+3, POSTINC1
;pid.c,182 :: 			cmd_d =  (long)(ps->command - ps->prev_cmd);
$15BC	$C139	FFE9			MOVFF	FARG_calc_pid+0, FSR0L
$15C0	$C13A	FFEA			MOVFF	FARG_calc_pid+1, FSR0H
$15C4	$CFEE	F15B			MOVFF	POSTINC0, calc_pid_cmd_d_L0
$15C8	$CFEE	F15C			MOVFF	POSTINC0, calc_pid_cmd_d_L0+1
$15CC	$CFEE	F15D			MOVFF	POSTINC0, calc_pid_cmd_d_L0+2
$15D0	$CFEE	F15E			MOVFF	POSTINC0, calc_pid_cmd_d_L0+3
$15D4	$0E26	    			MOVLW	38
$15D6	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$15D8	$6E04	    			MOVWF	STACK_4, 0
$15DA	$0E00	    			MOVLW	0
$15DC	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$15DE	$6E05	    			MOVWF	STACK_4+1, 0
$15E0	$C004	FFE9			MOVFF	STACK_4, FSR0L
$15E4	$C005	FFEA			MOVFF	STACK_4+1, FSR0H
$15E8	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$15EC	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$15F0	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$15F4	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$15F8	$5000	    			MOVF	STACK_0, 0, 0
$15FA	$5F5B	    			SUBWF	calc_pid_cmd_d_L0, 1, 1
$15FC	$5001	    			MOVF	STACK_0+1, 0, 0
$15FE	$5B5C	    			SUBWFB	calc_pid_cmd_d_L0+1, 1, 1
$1600	$5002	    			MOVF	STACK_0+2, 0, 0
$1602	$5B5D	    			SUBWFB	calc_pid_cmd_d_L0+2, 1, 1
$1604	$5003	    			MOVF	STACK_0+3, 0, 0
$1606	$5B5E	    			SUBWFB	calc_pid_cmd_d_L0+3, 1, 1
;pid.c,183 :: 			ps->prev_cmd = ps->command;
$1608	$C139	FFE9			MOVFF	FARG_calc_pid+0, FSR0L
$160C	$C13A	FFEA			MOVFF	FARG_calc_pid+1, FSR0H
$1610	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1614	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$1618	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$161C	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$1620	$C004	FFE1			MOVFF	STACK_4, FSR1L
$1624	$C005	FFE2			MOVFF	STACK_4+1, FSR1H
$1628	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$162C	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$1630	$C002	FFE6			MOVFF	STACK_0+2, POSTINC1
$1634	$C003	FFE6			MOVFF	STACK_0+3, POSTINC1
;pid.c,186 :: 			if (maxcmd_d != 0u) {
$1638	$0E00	    			MOVLW	0
$163A	$6E00	    			MOVWF	STACK_0, 0
$163C	$195A	    			XORWF	calc_pid_maxcmd_d_L0+3, 0, 1
$163E	$E108	    			BNZ	L_calc_pid_40
$1640	$5000	    			MOVF	STACK_0, 0, 0
$1642	$1959	    			XORWF	calc_pid_maxcmd_d_L0+2, 0, 1
$1644	$E105	    			BNZ	L_calc_pid_40
$1646	$5000	    			MOVF	STACK_0, 0, 0
$1648	$1958	    			XORWF	calc_pid_maxcmd_d_L0+1, 0, 1
$164A	$E102	    			BNZ	L_calc_pid_40
$164C	$5157	    			MOVF	calc_pid_maxcmd_d_L0, 0, 1
$164E	$0A00	    			XORLW	0
$1650	$	L_calc_pid_40:
$1650	$E042	    			BZ	L_calc_pid_19
;pid.c,187 :: 			if (cmd_d > maxcmd_d){
$1652	$0E80	    			MOVLW	128
$1654	$195A	    			XORWF	calc_pid_maxcmd_d_L0+3, 0, 1
$1656	$6E00	    			MOVWF	STACK_0, 0
$1658	$0E80	    			MOVLW	128
$165A	$195E	    			XORWF	calc_pid_cmd_d_L0+3, 0, 1
$165C	$5C00	    			SUBWF	STACK_0, 0, 0
$165E	$E108	    			BNZ	L_calc_pid_41
$1660	$515D	    			MOVF	calc_pid_cmd_d_L0+2, 0, 1
$1662	$5D59	    			SUBWF	calc_pid_maxcmd_d_L0+2, 0, 1
$1664	$E105	    			BNZ	L_calc_pid_41
$1666	$515C	    			MOVF	calc_pid_cmd_d_L0+1, 0, 1
$1668	$5D58	    			SUBWF	calc_pid_maxcmd_d_L0+1, 0, 1
$166A	$E102	    			BNZ	L_calc_pid_41
$166C	$515B	    			MOVF	calc_pid_cmd_d_L0, 0, 1
$166E	$5D57	    			SUBWF	calc_pid_maxcmd_d_L0, 0, 1
$1670	$	L_calc_pid_41:
$1670	$E209	    			BC	L_calc_pid_20
;pid.c,188 :: 			cmd_d = maxcmd_d;
$1672	$C157	F15B			MOVFF	calc_pid_maxcmd_d_L0, calc_pid_cmd_d_L0
$1676	$C158	F15C			MOVFF	calc_pid_maxcmd_d_L0+1, calc_pid_cmd_d_L0+1
$167A	$C159	F15D			MOVFF	calc_pid_maxcmd_d_L0+2, calc_pid_cmd_d_L0+2
$167E	$C15A	F15E			MOVFF	calc_pid_maxcmd_d_L0+3, calc_pid_cmd_d_L0+3
;pid.c,189 :: 			}
$1682	$D029	    			BRA	L_calc_pid_21
$1684	$	L_calc_pid_20:
;pid.c,190 :: 			else if (cmd_d < -maxcmd_d){
$1684	$0101	    			MOVLB	1
$1686	$6A04	    			CLRF	STACK_4, 0
$1688	$6A05	    			CLRF	STACK_4+1, 0
$168A	$6A06	    			CLRF	STACK_4+2, 0
$168C	$6A07	    			CLRF	STACK_4+3, 0
$168E	$5157	    			MOVF	calc_pid_maxcmd_d_L0, 0, 1
$1690	$5E04	    			SUBWF	STACK_4, 1, 0
$1692	$5158	    			MOVF	calc_pid_maxcmd_d_L0+1, 0, 1
$1694	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$1696	$5159	    			MOVF	calc_pid_maxcmd_d_L0+2, 0, 1
$1698	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$169A	$515A	    			MOVF	calc_pid_maxcmd_d_L0+3, 0, 1
$169C	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$169E	$0E80	    			MOVLW	128
$16A0	$195E	    			XORWF	calc_pid_cmd_d_L0+3, 0, 1
$16A2	$6E00	    			MOVWF	STACK_0, 0
$16A4	$0E80	    			MOVLW	128
$16A6	$1807	    			XORWF	STACK_4+3, 0, 0
$16A8	$5C00	    			SUBWF	STACK_0, 0, 0
$16AA	$E108	    			BNZ	L_calc_pid_42
$16AC	$5006	    			MOVF	STACK_4+2, 0, 0
$16AE	$5D5D	    			SUBWF	calc_pid_cmd_d_L0+2, 0, 1
$16B0	$E105	    			BNZ	L_calc_pid_42
$16B2	$5005	    			MOVF	STACK_4+1, 0, 0
$16B4	$5D5C	    			SUBWF	calc_pid_cmd_d_L0+1, 0, 1
$16B6	$E102	    			BNZ	L_calc_pid_42
$16B8	$5004	    			MOVF	STACK_4, 0, 0
$16BA	$5D5B	    			SUBWF	calc_pid_cmd_d_L0, 0, 1
$16BC	$	L_calc_pid_42:
$16BC	$E20C	    			BC	L_calc_pid_22
;pid.c,191 :: 			cmd_d = -maxcmd_d;
$16BE	$6B5B	    			CLRF	calc_pid_cmd_d_L0, 1
$16C0	$6B5C	    			CLRF	calc_pid_cmd_d_L0+1, 1
$16C2	$6B5D	    			CLRF	calc_pid_cmd_d_L0+2, 1
$16C4	$6B5E	    			CLRF	calc_pid_cmd_d_L0+3, 1
$16C6	$5157	    			MOVF	calc_pid_maxcmd_d_L0, 0, 1
$16C8	$5F5B	    			SUBWF	calc_pid_cmd_d_L0, 1, 1
$16CA	$5158	    			MOVF	calc_pid_maxcmd_d_L0+1, 0, 1
$16CC	$5B5C	    			SUBWFB	calc_pid_cmd_d_L0+1, 1, 1
$16CE	$5159	    			MOVF	calc_pid_maxcmd_d_L0+2, 0, 1
$16D0	$5B5D	    			SUBWFB	calc_pid_cmd_d_L0+2, 1, 1
$16D2	$515A	    			MOVF	calc_pid_maxcmd_d_L0+3, 0, 1
$16D4	$5B5E	    			SUBWFB	calc_pid_cmd_d_L0+3, 1, 1
;pid.c,192 :: 			}
$16D6	$	L_calc_pid_22:
$16D6	$	L_calc_pid_21:
;pid.c,193 :: 			}
$16D6	$	L_calc_pid_19:
;pid.c,194 :: 			ps->cmd_d = cmd_d;
$16D6	$0101	    			MOVLB	1
$16D8	$0101	    			MOVLB	1
$16DA	$0101	    			MOVLB	1
$16DC	$0E2A	    			MOVLW	42
$16DE	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$16E0	$6EE1	    			MOVWF	FSR1L, 0
$16E2	$0E00	    			MOVLW	0
$16E4	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$16E6	$6EE2	    			MOVWF	FSR1L+1, 0
$16E8	$C15B	FFE6			MOVFF	calc_pid_cmd_d_L0, POSTINC1
$16EC	$C15C	FFE6			MOVFF	calc_pid_cmd_d_L0+1, POSTINC1
$16F0	$C15D	FFE6			MOVFF	calc_pid_cmd_d_L0+2, POSTINC1
$16F4	$C15E	FFE6			MOVFF	calc_pid_cmd_d_L0+3, POSTINC1
;pid.c,197 :: 			output=0;
$16F8	$6B64	    			CLRF	calc_pid_output_L0, 1
$16FA	$6B65	    			CLRF	calc_pid_output_L0+1, 1
;pid.c,198 :: 			if (enable != 0u) {
$16FC	$515F	    			MOVF	calc_pid_enable_L0, 0, 1
$16FE	$0A00	    			XORLW	0
$1700	$B4D8	    			BTFSC	STATUS, Z, 0
$1702	$D190	    			BRA	L_calc_pid_23
;pid.c,205 :: 			(float)ps->bias + ( (float)ps->pgain * tmp1 ) +
$1704	$0E2E	    			MOVLW	46
$1706	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1708	$6EE9	    			MOVWF	FSR0L, 0
$170A	$0E00	    			MOVLW	0
$170C	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$170E	$6EEA	    			MOVWF	FSR0L+1, 0
$1710	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1714	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$1718	$ECE3	F005			CALL	_int2double
$171C	$C000	F16B			MOVFF	STACK_0, FLOC_calc_pid+48
$1720	$C001	F16C			MOVFF	STACK_0+1, FLOC_calc_pid+49
$1724	$C002	F16D			MOVFF	STACK_0+2, FLOC_calc_pid+50
$1728	$C003	F16E			MOVFF	STACK_0+3, FLOC_calc_pid+51
$172C	$0E30	    			MOVLW	48
$172E	$0101	    			MOVLB	1
$1730	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1732	$6EE9	    			MOVWF	FSR0L, 0
$1734	$0E00	    			MOVLW	0
$1736	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1738	$6EEA	    			MOVWF	FSR0L+1, 0
$173A	$CFEE	F167			MOVFF	POSTINC0, FLOC_calc_pid+44
$173E	$CFEE	F168			MOVFF	POSTINC0, FLOC_calc_pid+45
$1742	$CFEE	F169			MOVFF	POSTINC0, FLOC_calc_pid+46
$1746	$CFEE	F16A			MOVFF	POSTINC0, FLOC_calc_pid+47
$174A	$C13B	F000			MOVFF	calc_pid_tmp1_L0, STACK_0
$174E	$C13C	F001			MOVFF	calc_pid_tmp1_L0+1, STACK_0+1
$1752	$C13D	F002			MOVFF	calc_pid_tmp1_L0+2, STACK_0+2
$1756	$C13E	F003			MOVFF	calc_pid_tmp1_L0+3, STACK_0+3
$175A	$EC8D	F005			CALL	_longint2double
$175E	$C167	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$1762	$C168	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$1766	$C169	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$176A	$C16A	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$176E	$EC05	F006			CALL	_mul_32x32_fp
$1772	$C16B	F004			MOVFF	FLOC_calc_pid+48, STACK_4
$1776	$C16C	F005			MOVFF	FLOC_calc_pid+49, STACK_4+1
$177A	$C16D	F006			MOVFF	FLOC_calc_pid+50, STACK_4+2
$177E	$C16E	F007			MOVFF	FLOC_calc_pid+51, STACK_4+3
$1782	$EC3A	F002			CALL	_add_32x32_fp
$1786	$C000	F167			MOVFF	STACK_0, FLOC_calc_pid+44
$178A	$C001	F168			MOVFF	STACK_0+1, FLOC_calc_pid+45
$178E	$C002	F169			MOVFF	STACK_0+2, FLOC_calc_pid+46
$1792	$C003	F16A			MOVFF	STACK_0+3, FLOC_calc_pid+47
;pid.c,206 :: 			((float)ps->error_i * (float)ps->igain) +
$1796	$0E1C	    			MOVLW	28
$1798	$0101	    			MOVLB	1
$179A	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$179C	$6EE9	    			MOVWF	FSR0L, 0
$179E	$0E00	    			MOVLW	0
$17A0	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$17A2	$6EEA	    			MOVWF	FSR0L+1, 0
$17A4	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$17A8	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$17AC	$ECE3	F005			CALL	_int2double
$17B0	$0E34	    			MOVLW	52
$17B2	$0101	    			MOVLB	1
$17B4	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$17B6	$6EE9	    			MOVWF	FSR0L, 0
$17B8	$0E00	    			MOVLW	0
$17BA	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$17BC	$6EEA	    			MOVWF	FSR0L+1, 0
$17BE	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$17C2	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$17C6	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$17CA	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$17CE	$EC05	F006			CALL	_mul_32x32_fp
$17D2	$C167	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$17D6	$C168	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$17DA	$C169	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$17DE	$C16A	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$17E2	$EC3A	F002			CALL	_add_32x32_fp
$17E6	$C000	F16B			MOVFF	STACK_0, FLOC_calc_pid+48
$17EA	$C001	F16C			MOVFF	STACK_0+1, FLOC_calc_pid+49
$17EE	$C002	F16D			MOVFF	STACK_0+2, FLOC_calc_pid+50
$17F2	$C003	F16E			MOVFF	STACK_0+3, FLOC_calc_pid+51
;pid.c,207 :: 			((float)ps->dgain * (float)ps->error_d);
$17F6	$0E38	    			MOVLW	56
$17F8	$0101	    			MOVLB	1
$17FA	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$17FC	$6EE9	    			MOVWF	FSR0L, 0
$17FE	$0E00	    			MOVLW	0
$1800	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1802	$6EEA	    			MOVWF	FSR0L+1, 0
$1804	$CFEE	F167			MOVFF	POSTINC0, FLOC_calc_pid+44
$1808	$CFEE	F168			MOVFF	POSTINC0, FLOC_calc_pid+45
$180C	$CFEE	F169			MOVFF	POSTINC0, FLOC_calc_pid+46
$1810	$CFEE	F16A			MOVFF	POSTINC0, FLOC_calc_pid+47
$1814	$0E22	    			MOVLW	34
$1816	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1818	$6EE9	    			MOVWF	FSR0L, 0
$181A	$0E00	    			MOVLW	0
$181C	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$181E	$6EEA	    			MOVWF	FSR0L+1, 0
$1820	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1824	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$1828	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$182C	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$1830	$EC8D	F005			CALL	_longint2double
$1834	$C167	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$1838	$C168	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$183C	$C169	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$1840	$C16A	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$1844	$EC05	F006			CALL	_mul_32x32_fp
$1848	$C16B	F004			MOVFF	FLOC_calc_pid+48, STACK_4
$184C	$C16C	F005			MOVFF	FLOC_calc_pid+49, STACK_4+1
$1850	$C16D	F006			MOVFF	FLOC_calc_pid+50, STACK_4+2
$1854	$C16E	F007			MOVFF	FLOC_calc_pid+51, STACK_4+3
$1858	$EC3A	F002			CALL	_add_32x32_fp
$185C	$C000	F167			MOVFF	STACK_0, FLOC_calc_pid+44
$1860	$C001	F168			MOVFF	STACK_0+1, FLOC_calc_pid+45
$1864	$C002	F169			MOVFF	STACK_0+2, FLOC_calc_pid+46
$1868	$C003	F16A			MOVFF	STACK_0+3, FLOC_calc_pid+47
$186C	$C167	F13F			MOVFF	FLOC_calc_pid+44, calc_pid_tmp2_L0
$1870	$C168	F140			MOVFF	FLOC_calc_pid+45, calc_pid_tmp2_L0+1
$1874	$C169	F141			MOVFF	FLOC_calc_pid+46, calc_pid_tmp2_L0+2
$1878	$C16A	F142			MOVFF	FLOC_calc_pid+47, calc_pid_tmp2_L0+3
;pid.c,210 :: 			tmp2 += ((float)ps->command * (float)ps->ff0gain );
$187C	$C139	FFE9			MOVFF	FARG_calc_pid+0, FSR0L
$1880	$C13A	FFEA			MOVFF	FARG_calc_pid+1, FSR0H
$1884	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1888	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$188C	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$1890	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$1894	$EC8D	F005			CALL	_longint2double
$1898	$0E3C	    			MOVLW	60
$189A	$0101	    			MOVLB	1
$189C	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$189E	$6EE9	    			MOVWF	FSR0L, 0
$18A0	$0E00	    			MOVLW	0
$18A2	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$18A4	$6EEA	    			MOVWF	FSR0L+1, 0
$18A6	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$18AA	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$18AE	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$18B2	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$18B6	$EC05	F006			CALL	_mul_32x32_fp
$18BA	$C167	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$18BE	$C168	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$18C2	$C169	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$18C6	$C16A	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$18CA	$EC3A	F002			CALL	_add_32x32_fp
$18CE	$C000	F167			MOVFF	STACK_0, FLOC_calc_pid+44
$18D2	$C001	F168			MOVFF	STACK_0+1, FLOC_calc_pid+45
$18D6	$C002	F169			MOVFF	STACK_0+2, FLOC_calc_pid+46
$18DA	$C003	F16A			MOVFF	STACK_0+3, FLOC_calc_pid+47
$18DE	$C167	F13F			MOVFF	FLOC_calc_pid+44, calc_pid_tmp2_L0
$18E2	$C168	F140			MOVFF	FLOC_calc_pid+45, calc_pid_tmp2_L0+1
$18E6	$C169	F141			MOVFF	FLOC_calc_pid+46, calc_pid_tmp2_L0+2
$18EA	$C16A	F142			MOVFF	FLOC_calc_pid+47, calc_pid_tmp2_L0+3
;pid.c,212 :: 			tmp2 += ((float)ps->cmd_d * (float)ps->ff1gain);
$18EE	$0E2A	    			MOVLW	42
$18F0	$0101	    			MOVLB	1
$18F2	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$18F4	$6EE9	    			MOVWF	FSR0L, 0
$18F6	$0E00	    			MOVLW	0
$18F8	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$18FA	$6EEA	    			MOVWF	FSR0L+1, 0
$18FC	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1900	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$1904	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$1908	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$190C	$EC8D	F005			CALL	_longint2double
$1910	$0E40	    			MOVLW	64
$1912	$0101	    			MOVLB	1
$1914	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1916	$6EE9	    			MOVWF	FSR0L, 0
$1918	$0E00	    			MOVLW	0
$191A	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$191C	$6EEA	    			MOVWF	FSR0L+1, 0
$191E	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$1922	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$1926	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$192A	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$192E	$EC05	F006			CALL	_mul_32x32_fp
$1932	$C167	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$1936	$C168	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$193A	$C169	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$193E	$C16A	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$1942	$EC3A	F002			CALL	_add_32x32_fp
$1946	$C000	F167			MOVFF	STACK_0, FLOC_calc_pid+44
$194A	$C001	F168			MOVFF	STACK_0+1, FLOC_calc_pid+45
$194E	$C002	F169			MOVFF	STACK_0+2, FLOC_calc_pid+46
$1952	$C003	F16A			MOVFF	STACK_0+3, FLOC_calc_pid+47
$1956	$C167	F13F			MOVFF	FLOC_calc_pid+44, calc_pid_tmp2_L0
$195A	$C168	F140			MOVFF	FLOC_calc_pid+45, calc_pid_tmp2_L0+1
$195E	$C169	F141			MOVFF	FLOC_calc_pid+46, calc_pid_tmp2_L0+2
$1962	$C16A	F142			MOVFF	FLOC_calc_pid+47, calc_pid_tmp2_L0+3
;pid.c,218 :: 			limitstate=0u;
$1966	$0101	    			MOVLB	1
$1968	$6B66	    			CLRF	calc_pid_limitstate_L0, 1
;pid.c,220 :: 			if ( tmp2 > maxoutput){
$196A	$C162	F000			MOVFF	calc_pid_maxoutput_L0, STACK_0
$196E	$C163	F001			MOVFF	calc_pid_maxoutput_L0+1, STACK_0+1
$1972	$ECE3	F005			CALL	_int2double
$1976	$C167	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$197A	$C168	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$197E	$C169	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$1982	$C16A	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$1986	$EC8B	F004			CALL	_compare_double
$198A	$0E01	    			MOVLW	1
$198C	$B0D8	    			BTFSC	STATUS, C, 0
$198E	$0E00	    			MOVLW	0
$1990	$6E00	    			MOVWF	STACK_0, 0
$1992	$5200	    			MOVF	STACK_0, 1, 0
$1994	$E008	    			BZ	L_calc_pid_24
;pid.c,221 :: 			output = maxoutput;
$1996	$C162	F164			MOVFF	calc_pid_maxoutput_L0, calc_pid_output_L0
$199A	$C163	F165			MOVFF	calc_pid_maxoutput_L0+1, calc_pid_output_L0+1
;pid.c,222 :: 			limitstate=1u;
$199E	$0E01	    			MOVLW	1
$19A0	$0101	    			MOVLB	1
$19A2	$6F66	    			MOVWF	calc_pid_limitstate_L0, 1
;pid.c,223 :: 			}
$19A4	$D03C	    			BRA	L_calc_pid_25
$19A6	$	L_calc_pid_24:
;pid.c,224 :: 			else if ( tmp2 < -maxoutput ){
$19A6	$0101	    			MOVLB	1
$19A8	$5162	    			MOVF	calc_pid_maxoutput_L0, 0, 1
$19AA	$0800	    			SUBLW	0
$19AC	$6E00	    			MOVWF	STACK_0, 0
$19AE	$C163	F001			MOVFF	calc_pid_maxoutput_L0+1, STACK_0+1
$19B2	$6AE8	    			CLRF	WREG, 0
$19B4	$5601	    			SUBFWB	STACK_0+1, 1, 0
$19B6	$ECE3	F005			CALL	_int2double
$19BA	$C000	F004			MOVFF	STACK_0, STACK_4
$19BE	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$19C2	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$19C6	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$19CA	$C13F	F000			MOVFF	calc_pid_tmp2_L0, STACK_0
$19CE	$C140	F001			MOVFF	calc_pid_tmp2_L0+1, STACK_0+1
$19D2	$C141	F002			MOVFF	calc_pid_tmp2_L0+2, STACK_0+2
$19D6	$C142	F003			MOVFF	calc_pid_tmp2_L0+3, STACK_0+3
$19DA	$EC8B	F004			CALL	_compare_double
$19DE	$0E01	    			MOVLW	1
$19E0	$B0D8	    			BTFSC	STATUS, C, 0
$19E2	$0E00	    			MOVLW	0
$19E4	$6E00	    			MOVWF	STACK_0, 0
$19E6	$5200	    			MOVF	STACK_0, 1, 0
$19E8	$E00B	    			BZ	L_calc_pid_26
;pid.c,225 :: 			output = -maxoutput;
$19EA	$0101	    			MOVLB	1
$19EC	$5162	    			MOVF	calc_pid_maxoutput_L0, 0, 1
$19EE	$0800	    			SUBLW	0
$19F0	$6F64	    			MOVWF	calc_pid_output_L0, 1
$19F2	$C163	F165			MOVFF	calc_pid_maxoutput_L0+1, calc_pid_output_L0+1
$19F6	$6AE8	    			CLRF	WREG, 0
$19F8	$5765	    			SUBFWB	calc_pid_output_L0+1, 1, 1
;pid.c,226 :: 			limitstate=1u;
$19FA	$0E01	    			MOVLW	1
$19FC	$6F66	    			MOVWF	calc_pid_limitstate_L0, 1
;pid.c,227 :: 			}
$19FE	$D00F	    			BRA	L_calc_pid_27
$1A00	$	L_calc_pid_26:
;pid.c,229 :: 			output = (int)tmp2;
$1A00	$0101	    			MOVLB	1
$1A02	$C13F	F000			MOVFF	calc_pid_tmp2_L0, STACK_0
$1A06	$C140	F001			MOVFF	calc_pid_tmp2_L0+1, STACK_0+1
$1A0A	$C141	F002			MOVFF	calc_pid_tmp2_L0+2, STACK_0+2
$1A0E	$C142	F003			MOVFF	calc_pid_tmp2_L0+3, STACK_0+3
$1A12	$EC99	F006			CALL	_double2int
$1A16	$C000	F164			MOVFF	STACK_0, calc_pid_output_L0
$1A1A	$C001	F165			MOVFF	STACK_0+1, calc_pid_output_L0+1
;pid.c,230 :: 			}
$1A1E	$	L_calc_pid_27:
$1A1E	$	L_calc_pid_25:
;pid.c,232 :: 			}
$1A1E	$0100	    			MOVLB	0
$1A20	$0100	    			MOVLB	0
$1A22	$D004	    			BRA	L_calc_pid_28
$1A24	$	L_calc_pid_23:
;pid.c,235 :: 			output = 0;
$1A24	$0101	    			MOVLB	1
$1A26	$6B64	    			CLRF	calc_pid_output_L0, 1
$1A28	$6B65	    			CLRF	calc_pid_output_L0+1, 1
;pid.c,236 :: 			limitstate = 0;
$1A2A	$6B66	    			CLRF	calc_pid_limitstate_L0, 1
;pid.c,237 :: 			}
$1A2C	$	L_calc_pid_28:
;pid.c,239 :: 			ps->output = output;
$1A2C	$0E46	    			MOVLW	70
$1A2E	$0101	    			MOVLB	1
$1A30	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1A32	$6EE1	    			MOVWF	FSR1L, 0
$1A34	$0E00	    			MOVLW	0
$1A36	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1A38	$6EE2	    			MOVWF	FSR1L+1, 0
$1A3A	$C164	FFE6			MOVFF	calc_pid_output_L0, POSTINC1
$1A3E	$C165	FFE6			MOVFF	calc_pid_output_L0+1, POSTINC1
;pid.c,240 :: 			ps->limit_state = limitstate;
$1A42	$0E49	    			MOVLW	73
$1A44	$2539	    			ADDWF	FARG_calc_pid+0, 0, 1
$1A46	$6EE1	    			MOVWF	FSR1L, 0
$1A48	$0E00	    			MOVLW	0
$1A4A	$213A	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1A4C	$6EE2	    			MOVWF	FSR1L+1, 0
$1A4E	$C166	FFE6			MOVFF	calc_pid_limitstate_L0, POSTINC1
;pid.c,242 :: 			}
$1A52	$0012	    			RETURN
$1A54	$	_calcMotorPosition:
;extruder.c,496 :: 			void calcMotorPosition(){
;extruder.c,497 :: 			long axis_adjust = 0;
$1A54	$0101	    			MOVLB	1
$1A56	$6B39	    			CLRF	calcMotorPosition_axis_adjust_L0, 1
$1A58	$6B3A	    			CLRF	calcMotorPosition_axis_adjust_L0+1, 1
$1A5A	$6B3B	    			CLRF	calcMotorPosition_axis_adjust_L0+2, 1
$1A5C	$6B3C	    			CLRF	calcMotorPosition_axis_adjust_L0+3, 1
;extruder.c,498 :: 			long turn_adjust = 0;
$1A5E	$6B3D	    			CLRF	calcMotorPosition_turn_adjust_L0, 1
$1A60	$6B3E	    			CLRF	calcMotorPosition_turn_adjust_L0+1, 1
$1A62	$6B3F	    			CLRF	calcMotorPosition_turn_adjust_L0+2, 1
$1A64	$6B40	    			CLRF	calcMotorPosition_turn_adjust_L0+3, 1
;extruder.c,499 :: 			double dx = 0.0; //for temporary computations
$1A66	$6B41	    			CLRF	calcMotorPosition_dx_L0, 1
$1A68	$6B42	    			CLRF	calcMotorPosition_dx_L0+1, 1
$1A6A	$6B43	    			CLRF	calcMotorPosition_dx_L0+2, 1
$1A6C	$6B44	    			CLRF	calcMotorPosition_dx_L0+3, 1
;extruder.c,501 :: 			double stepsToAdd = 0.0;
$1A6E	$6B45	    			CLRF	calcMotorPosition_stepsToAdd_L0, 1
$1A70	$6B46	    			CLRF	calcMotorPosition_stepsToAdd_L0+1, 1
$1A72	$6B47	    			CLRF	calcMotorPosition_stepsToAdd_L0+2, 1
$1A74	$6B48	    			CLRF	calcMotorPosition_stepsToAdd_L0+3, 1
;extruder.c,502 :: 			if  ( pid_motor.command > AXIS_MAX || pid_motor.feedback > AXIS_MAX ){
$1A76	$0E80	    			MOVLW	128
$1A78	$0A77	    			XORLW	119
$1A7A	$6E00	    			MOVWF	STACK_0, 0
$1A7C	$0E80	    			MOVLW	128
$1A7E	$0100	    			MOVLB	0
$1A80	$19AE	    			XORWF	_pid_motor+3, 0, 1
$1A82	$5C00	    			SUBWF	STACK_0, 0, 0
$1A84	$E108	    			BNZ	L_calcMotorPosition_105
$1A86	$51AD	    			MOVF	_pid_motor+2, 0, 1
$1A88	$0835	    			SUBLW	53
$1A8A	$E105	    			BNZ	L_calcMotorPosition_105
$1A8C	$51AC	    			MOVF	_pid_motor+1, 0, 1
$1A8E	$0894	    			SUBLW	148
$1A90	$E102	    			BNZ	L_calcMotorPosition_105
$1A92	$51AB	    			MOVF	_pid_motor+0, 0, 1
$1A94	$0800	    			SUBLW	0
$1A96	$	L_calcMotorPosition_105:
$1A96	$E311	    			BNC	L181_ex_L_calcMotorPosition_26
$1A98	$0E80	    			MOVLW	128
$1A9A	$0A77	    			XORLW	119
$1A9C	$6E00	    			MOVWF	STACK_0, 0
$1A9E	$0E80	    			MOVLW	128
$1AA0	$0100	    			MOVLB	0
$1AA2	$19B2	    			XORWF	_pid_motor+7, 0, 1
$1AA4	$5C00	    			SUBWF	STACK_0, 0, 0
$1AA6	$E108	    			BNZ	L_calcMotorPosition_106
$1AA8	$51B1	    			MOVF	_pid_motor+6, 0, 1
$1AAA	$0835	    			SUBLW	53
$1AAC	$E105	    			BNZ	L_calcMotorPosition_106
$1AAE	$51B0	    			MOVF	_pid_motor+5, 0, 1
$1AB0	$0894	    			SUBLW	148
$1AB2	$E102	    			BNZ	L_calcMotorPosition_106
$1AB4	$51AF	    			MOVF	_pid_motor+4, 0, 1
$1AB6	$0800	    			SUBLW	0
$1AB8	$	L_calcMotorPosition_106:
$1AB8	$E211	    			BC	L_calcMotorPosition_26
$1ABA	$	L181_ex_L_calcMotorPosition_26:
;extruder.c,504 :: 			axis_adjust = -AXIS_ADJUST;
$1ABA	$0E00	    			MOVLW	0
$1ABC	$0101	    			MOVLB	1
$1ABE	$6F39	    			MOVWF	calcMotorPosition_axis_adjust_L0, 1
$1AC0	$0E7C	    			MOVLW	124
$1AC2	$6F3A	    			MOVWF	calcMotorPosition_axis_adjust_L0+1, 1
$1AC4	$0E28	    			MOVLW	40
$1AC6	$6F3B	    			MOVWF	calcMotorPosition_axis_adjust_L0+2, 1
$1AC8	$0EE8	    			MOVLW	232
$1ACA	$6F3C	    			MOVWF	calcMotorPosition_axis_adjust_L0+3, 1
;extruder.c,505 :: 			turn_adjust = -TURN_ADJUST;
$1ACC	$0EC0	    			MOVLW	192
$1ACE	$6F3D	    			MOVWF	calcMotorPosition_turn_adjust_L0, 1
$1AD0	$0EF2	    			MOVLW	242
$1AD2	$6F3E	    			MOVWF	calcMotorPosition_turn_adjust_L0+1, 1
$1AD4	$0EFC	    			MOVLW	252
$1AD6	$6F3F	    			MOVWF	calcMotorPosition_turn_adjust_L0+2, 1
$1AD8	$0EFF	    			MOVLW	255
$1ADA	$6F40	    			MOVWF	calcMotorPosition_turn_adjust_L0+3, 1
;extruder.c,506 :: 			}
$1ADC	$	L_calcMotorPosition_26:
;extruder.c,507 :: 			if ( pid_motor.command < AXIS_MIN || pid_motor.feedback < AXIS_MIN ){
$1ADC	$0E80	    			MOVLW	128
$1ADE	$0100	    			MOVLB	0
$1AE0	$19AE	    			XORWF	_pid_motor+3, 0, 1
$1AE2	$6E00	    			MOVWF	STACK_0, 0
$1AE4	$0E80	    			MOVLW	128
$1AE6	$0A88	    			XORLW	136
$1AE8	$5C00	    			SUBWF	STACK_0, 0, 0
$1AEA	$E108	    			BNZ	L_calcMotorPosition_107
$1AEC	$0ECA	    			MOVLW	202
$1AEE	$5DAD	    			SUBWF	_pid_motor+2, 0, 1
$1AF0	$E105	    			BNZ	L_calcMotorPosition_107
$1AF2	$0E6C	    			MOVLW	108
$1AF4	$5DAC	    			SUBWF	_pid_motor+1, 0, 1
$1AF6	$E102	    			BNZ	L_calcMotorPosition_107
$1AF8	$0E00	    			MOVLW	0
$1AFA	$5DAB	    			SUBWF	_pid_motor+0, 0, 1
$1AFC	$	L_calcMotorPosition_107:
$1AFC	$E311	    			BNC	L195_ex_L_calcMotorPosition_29
$1AFE	$0E80	    			MOVLW	128
$1B00	$0100	    			MOVLB	0
$1B02	$19B2	    			XORWF	_pid_motor+7, 0, 1
$1B04	$6E00	    			MOVWF	STACK_0, 0
$1B06	$0E80	    			MOVLW	128
$1B08	$0A88	    			XORLW	136
$1B0A	$5C00	    			SUBWF	STACK_0, 0, 0
$1B0C	$E108	    			BNZ	L_calcMotorPosition_108
$1B0E	$0ECA	    			MOVLW	202
$1B10	$5DB1	    			SUBWF	_pid_motor+6, 0, 1
$1B12	$E105	    			BNZ	L_calcMotorPosition_108
$1B14	$0E6C	    			MOVLW	108
$1B16	$5DB0	    			SUBWF	_pid_motor+5, 0, 1
$1B18	$E102	    			BNZ	L_calcMotorPosition_108
$1B1A	$0E00	    			MOVLW	0
$1B1C	$5DAF	    			SUBWF	_pid_motor+4, 0, 1
$1B1E	$	L_calcMotorPosition_108:
$1B1E	$E211	    			BC	L_calcMotorPosition_29
$1B20	$	L195_ex_L_calcMotorPosition_29:
;extruder.c,509 :: 			axis_adjust = AXIS_ADJUST;
$1B20	$0E00	    			MOVLW	0
$1B22	$0101	    			MOVLB	1
$1B24	$6F39	    			MOVWF	calcMotorPosition_axis_adjust_L0, 1
$1B26	$0E84	    			MOVLW	132
$1B28	$6F3A	    			MOVWF	calcMotorPosition_axis_adjust_L0+1, 1
$1B2A	$0ED7	    			MOVLW	215
$1B2C	$6F3B	    			MOVWF	calcMotorPosition_axis_adjust_L0+2, 1
$1B2E	$0E17	    			MOVLW	23
$1B30	$6F3C	    			MOVWF	calcMotorPosition_axis_adjust_L0+3, 1
;extruder.c,510 :: 			turn_adjust = TURN_ADJUST;
$1B32	$0E40	    			MOVLW	64
$1B34	$6F3D	    			MOVWF	calcMotorPosition_turn_adjust_L0, 1
$1B36	$0E0D	    			MOVLW	13
$1B38	$6F3E	    			MOVWF	calcMotorPosition_turn_adjust_L0+1, 1
$1B3A	$0E03	    			MOVLW	3
$1B3C	$6F3F	    			MOVWF	calcMotorPosition_turn_adjust_L0+2, 1
$1B3E	$0E00	    			MOVLW	0
$1B40	$6F40	    			MOVWF	calcMotorPosition_turn_adjust_L0+3, 1
;extruder.c,512 :: 			}
$1B42	$	L_calcMotorPosition_29:
;extruder.c,513 :: 			if ( axis_adjust != 0 ){
$1B42	$0E00	    			MOVLW	0
$1B44	$6E00	    			MOVWF	STACK_0, 0
$1B46	$0101	    			MOVLB	1
$1B48	$193C	    			XORWF	calcMotorPosition_axis_adjust_L0+3, 0, 1
$1B4A	$E108	    			BNZ	L_calcMotorPosition_109
$1B4C	$5000	    			MOVF	STACK_0, 0, 0
$1B4E	$193B	    			XORWF	calcMotorPosition_axis_adjust_L0+2, 0, 1
$1B50	$E105	    			BNZ	L_calcMotorPosition_109
$1B52	$5000	    			MOVF	STACK_0, 0, 0
$1B54	$193A	    			XORWF	calcMotorPosition_axis_adjust_L0+1, 0, 1
$1B56	$E102	    			BNZ	L_calcMotorPosition_109
$1B58	$5139	    			MOVF	calcMotorPosition_axis_adjust_L0, 0, 1
$1B5A	$0A00	    			XORLW	0
$1B5C	$	L_calcMotorPosition_109:
$1B5C	$E029	    			BZ	L_calcMotorPosition_30
;extruder.c,514 :: 			pid_motor.command += axis_adjust;
$1B5E	$0101	    			MOVLB	1
$1B60	$5139	    			MOVF	calcMotorPosition_axis_adjust_L0, 0, 1
$1B62	$0100	    			MOVLB	0
$1B64	$27AB	    			ADDWF	_pid_motor+0, 1, 1
$1B66	$0101	    			MOVLB	1
$1B68	$513A	    			MOVF	calcMotorPosition_axis_adjust_L0+1, 0, 1
$1B6A	$0100	    			MOVLB	0
$1B6C	$23AC	    			ADDWFC	_pid_motor+1, 1, 1
$1B6E	$0101	    			MOVLB	1
$1B70	$513B	    			MOVF	calcMotorPosition_axis_adjust_L0+2, 0, 1
$1B72	$0100	    			MOVLB	0
$1B74	$23AD	    			ADDWFC	_pid_motor+2, 1, 1
$1B76	$0101	    			MOVLB	1
$1B78	$513C	    			MOVF	calcMotorPosition_axis_adjust_L0+3, 0, 1
$1B7A	$0100	    			MOVLB	0
$1B7C	$23AE	    			ADDWFC	_pid_motor+3, 1, 1
;extruder.c,515 :: 			pid_motor.feedback += axis_adjust;
$1B7E	$0101	    			MOVLB	1
$1B80	$5139	    			MOVF	calcMotorPosition_axis_adjust_L0, 0, 1
$1B82	$0100	    			MOVLB	0
$1B84	$27AF	    			ADDWF	_pid_motor+4, 1, 1
$1B86	$0101	    			MOVLB	1
$1B88	$513A	    			MOVF	calcMotorPosition_axis_adjust_L0+1, 0, 1
$1B8A	$0100	    			MOVLB	0
$1B8C	$23B0	    			ADDWFC	_pid_motor+5, 1, 1
$1B8E	$0101	    			MOVLB	1
$1B90	$513B	    			MOVF	calcMotorPosition_axis_adjust_L0+2, 0, 1
$1B92	$0100	    			MOVLB	0
$1B94	$23B1	    			ADDWFC	_pid_motor+6, 1, 1
$1B96	$0101	    			MOVLB	1
$1B98	$513C	    			MOVF	calcMotorPosition_axis_adjust_L0+3, 0, 1
$1B9A	$0100	    			MOVLB	0
$1B9C	$23B2	    			ADDWFC	_pid_motor+7, 1, 1
;extruder.c,516 :: 			motorTurns += turn_adjust;
$1B9E	$0101	    			MOVLB	1
$1BA0	$513D	    			MOVF	calcMotorPosition_turn_adjust_L0, 0, 1
$1BA2	$261A	    			ADDWF	_motorTurns, 1, 0
$1BA4	$513E	    			MOVF	calcMotorPosition_turn_adjust_L0+1, 0, 1
$1BA6	$221B	    			ADDWFC	_motorTurns+1, 1, 0
$1BA8	$513F	    			MOVF	calcMotorPosition_turn_adjust_L0+2, 0, 1
$1BAA	$221C	    			ADDWFC	_motorTurns+2, 1, 0
$1BAC	$5140	    			MOVF	calcMotorPosition_turn_adjust_L0+3, 0, 1
$1BAE	$221D	    			ADDWFC	_motorTurns+3, 1, 0
;extruder.c,517 :: 			}
$1BB0	$	L_calcMotorPosition_30:
;extruder.c,520 :: 			if ( meltFlowComp == 1){
$1BB0	$5022	    			MOVF	_meltFlowComp, 0, 0
$1BB2	$0A01	    			XORLW	1
$1BB4	$A4D8	    			BTFSS	STATUS, Z, 0
$1BB6	$D0B1	    			BRA	L_calcMotorPosition_31
;extruder.c,523 :: 			dx = PMF * (double)(( (double)motorPulses - (double)xMelt ));
$1BB8	$C015	F000			MOVFF	_motorPulses, STACK_0
$1BBC	$C016	F001			MOVFF	_motorPulses+1, STACK_0+1
$1BC0	$C017	F002			MOVFF	_motorPulses+2, STACK_0+2
$1BC4	$C018	F003			MOVFF	_motorPulses+3, STACK_0+3
$1BC8	$EC8D	F005			CALL	_longint2double
$1BCC	$C000	F149			MOVFF	STACK_0, FLOC_calcMotorPosition+16
$1BD0	$C001	F14A			MOVFF	STACK_0+1, FLOC_calcMotorPosition+17
$1BD4	$C002	F14B			MOVFF	STACK_0+2, FLOC_calcMotorPosition+18
$1BD8	$C003	F14C			MOVFF	STACK_0+3, FLOC_calcMotorPosition+19
$1BDC	$C023	F004			MOVFF	_xMelt, STACK_4
$1BE0	$C024	F005			MOVFF	_xMelt+1, STACK_4+1
$1BE4	$C025	F006			MOVFF	_xMelt+2, STACK_4+2
$1BE8	$C026	F007			MOVFF	_xMelt+3, STACK_4+3
$1BEC	$C149	F000			MOVFF	FLOC_calcMotorPosition+16, STACK_0
$1BF0	$C14A	F001			MOVFF	FLOC_calcMotorPosition+17, STACK_0+1
$1BF4	$C14B	F002			MOVFF	FLOC_calcMotorPosition+18, STACK_0+2
$1BF8	$C14C	F003			MOVFF	FLOC_calcMotorPosition+19, STACK_0+3
$1BFC	$ECB0	F005			CALL	_sub_32x32_fp
$1C00	$0ECD	    			MOVLW	205
$1C02	$6E04	    			MOVWF	STACK_4, 0
$1C04	$0ECC	    			MOVLW	204
$1C06	$6E05	    			MOVWF	STACK_4+1, 0
$1C08	$0E0C	    			MOVLW	12
$1C0A	$6E06	    			MOVWF	STACK_4+2, 0
$1C0C	$0E7F	    			MOVLW	127
$1C0E	$6E07	    			MOVWF	STACK_4+3, 0
$1C10	$EC05	F006			CALL	_mul_32x32_fp
$1C14	$C000	F141			MOVFF	STACK_0, calcMotorPosition_dx_L0
$1C18	$C001	F142			MOVFF	STACK_0+1, calcMotorPosition_dx_L0+1
$1C1C	$C002	F143			MOVFF	STACK_0+2, calcMotorPosition_dx_L0+2
$1C20	$C003	F144			MOVFF	STACK_0+3, calcMotorPosition_dx_L0+3
;extruder.c,524 :: 			stepAdjust = dx - (double)motorPulses + stepError;
$1C24	$C149	F004			MOVFF	FLOC_calcMotorPosition+16, STACK_4
$1C28	$C14A	F005			MOVFF	FLOC_calcMotorPosition+17, STACK_4+1
$1C2C	$C14B	F006			MOVFF	FLOC_calcMotorPosition+18, STACK_4+2
$1C30	$C14C	F007			MOVFF	FLOC_calcMotorPosition+19, STACK_4+3
$1C34	$ECB0	F005			CALL	_sub_32x32_fp
$1C38	$C027	F004			MOVFF	_stepError, STACK_4
$1C3C	$C028	F005			MOVFF	_stepError+1, STACK_4+1
$1C40	$C029	F006			MOVFF	_stepError+2, STACK_4+2
$1C44	$C02A	F007			MOVFF	_stepError+3, STACK_4+3
$1C48	$EC3A	F002			CALL	_add_32x32_fp
;extruder.c,525 :: 			stepError = modf((double)stepAdjust,&stepsToAdd);
$1C4C	$C000	F16F			MOVFF	STACK_0, FARG_modf+0
$1C50	$C001	F170			MOVFF	STACK_0+1, FARG_modf+1
$1C54	$C002	F171			MOVFF	STACK_0+2, FARG_modf+2
$1C58	$C003	F172			MOVFF	STACK_0+3, FARG_modf+3
$1C5C	$0E45	    			MOVLW	calcMotorPosition_stepsToAdd_L0
$1C5E	$0101	    			MOVLB	1
$1C60	$6F73	    			MOVWF	FARG_modf+4, 1
$1C62	$0E01	    			MOVLW	@calcMotorPosition_stepsToAdd_L0
$1C64	$6F74	    			MOVWF	FARG_modf+5, 1
$1C66	$EC04	F007			CALL	_modf
$1C6A	$C000	F027			MOVFF	STACK_0, _stepError
$1C6E	$C001	F028			MOVFF	STACK_0+1, _stepError+1
$1C72	$C002	F029			MOVFF	STACK_0+2, _stepError+2
$1C76	$C003	F02A			MOVFF	STACK_0+3, _stepError+3
;extruder.c,526 :: 			xMelt = (CA * dx) + (CB * xMelt );
$1C7A	$C141	F000			MOVFF	calcMotorPosition_dx_L0, STACK_0
$1C7E	$C142	F001			MOVFF	calcMotorPosition_dx_L0+1, STACK_0+1
$1C82	$C143	F002			MOVFF	calcMotorPosition_dx_L0+2, STACK_0+2
$1C86	$C144	F003			MOVFF	calcMotorPosition_dx_L0+3, STACK_0+3
$1C8A	$0EEE	    			MOVLW	238
$1C8C	$6E04	    			MOVWF	STACK_4, 0
$1C8E	$0EBF	    			MOVLW	191
$1C90	$6E05	    			MOVWF	STACK_4+1, 0
$1C92	$0E04	    			MOVLW	4
$1C94	$6E06	    			MOVWF	STACK_4+2, 0
$1C96	$0E71	    			MOVLW	113
$1C98	$6E07	    			MOVWF	STACK_4+3, 0
$1C9A	$EC05	F006			CALL	_mul_32x32_fp
$1C9E	$C000	F149			MOVFF	STACK_0, FLOC_calcMotorPosition+16
$1CA2	$C001	F14A			MOVFF	STACK_0+1, FLOC_calcMotorPosition+17
$1CA6	$C002	F14B			MOVFF	STACK_0+2, FLOC_calcMotorPosition+18
$1CAA	$C003	F14C			MOVFF	STACK_0+3, FLOC_calcMotorPosition+19
$1CAE	$C023	F000			MOVFF	_xMelt, STACK_0
$1CB2	$C024	F001			MOVFF	_xMelt+1, STACK_0+1
$1CB6	$C025	F002			MOVFF	_xMelt+2, STACK_0+2
$1CBA	$C026	F003			MOVFF	_xMelt+3, STACK_0+3
$1CBE	$0ECB	    			MOVLW	203
$1CC0	$6E04	    			MOVWF	STACK_4, 0
$1CC2	$0EE0	    			MOVLW	224
$1CC4	$6E05	    			MOVWF	STACK_4+1, 0
$1CC6	$0E7F	    			MOVLW	127
$1CC8	$6E06	    			MOVWF	STACK_4+2, 0
$1CCA	$0E7E	    			MOVLW	126
$1CCC	$6E07	    			MOVWF	STACK_4+3, 0
$1CCE	$EC05	F006			CALL	_mul_32x32_fp
$1CD2	$C149	F004			MOVFF	FLOC_calcMotorPosition+16, STACK_4
$1CD6	$C14A	F005			MOVFF	FLOC_calcMotorPosition+17, STACK_4+1
$1CDA	$C14B	F006			MOVFF	FLOC_calcMotorPosition+18, STACK_4+2
$1CDE	$C14C	F007			MOVFF	FLOC_calcMotorPosition+19, STACK_4+3
$1CE2	$EC3A	F002			CALL	_add_32x32_fp
$1CE6	$C000	F023			MOVFF	STACK_0, _xMelt
$1CEA	$C001	F024			MOVFF	STACK_0+1, _xMelt+1
$1CEE	$C002	F025			MOVFF	STACK_0+2, _xMelt+2
$1CF2	$C003	F026			MOVFF	STACK_0+3, _xMelt+3
;extruder.c,538 :: 			motorPulses += (long)stepsToAdd;
$1CF6	$C145	F000			MOVFF	calcMotorPosition_stepsToAdd_L0, STACK_0
$1CFA	$C146	F001			MOVFF	calcMotorPosition_stepsToAdd_L0+1, STACK_0+1
$1CFE	$C147	F002			MOVFF	calcMotorPosition_stepsToAdd_L0+2, STACK_0+2
$1D02	$C148	F003			MOVFF	calcMotorPosition_stepsToAdd_L0+3, STACK_0+3
$1D06	$ECF3	F004			CALL	_double2longint
$1D0A	$5000	    			MOVF	STACK_0, 0, 0
$1D0C	$2615	    			ADDWF	_motorPulses, 1, 0
$1D0E	$5001	    			MOVF	STACK_0+1, 0, 0
$1D10	$2216	    			ADDWFC	_motorPulses+1, 1, 0
$1D12	$5002	    			MOVF	STACK_0+2, 0, 0
$1D14	$2217	    			ADDWFC	_motorPulses+2, 1, 0
$1D16	$5003	    			MOVF	STACK_0+3, 0, 0
$1D18	$2218	    			ADDWFC	_motorPulses+3, 1, 0
;extruder.c,540 :: 			}
$1D1A	$	L_calcMotorPosition_31:
;extruder.c,543 :: 			pid_motor.command += motorPulses;
$1D1A	$0100	    			MOVLB	0
$1D1C	$5015	    			MOVF	_motorPulses, 0, 0
$1D1E	$27AB	    			ADDWF	_pid_motor+0, 1, 1
$1D20	$5016	    			MOVF	_motorPulses+1, 0, 0
$1D22	$23AC	    			ADDWFC	_pid_motor+1, 1, 1
$1D24	$5017	    			MOVF	_motorPulses+2, 0, 0
$1D26	$23AD	    			ADDWFC	_pid_motor+2, 1, 1
$1D28	$5018	    			MOVF	_motorPulses+3, 0, 0
$1D2A	$23AE	    			ADDWFC	_pid_motor+3, 1, 1
;extruder.c,544 :: 			motorPulses = 0;
$1D2C	$6A15	    			CLRF	_motorPulses, 0
$1D2E	$6A16	    			CLRF	_motorPulses+1, 0
$1D30	$6A17	    			CLRF	_motorPulses+2, 0
$1D32	$6A18	    			CLRF	_motorPulses+3, 0
;extruder.c,546 :: 			pid_motor.feedback = (long)(motorTurns * CNT_PER_TURN ) +
$1D34	$C01A	F000			MOVFF	_motorTurns, STACK_0
$1D38	$C01B	F001			MOVFF	_motorTurns+1, STACK_0+1
$1D3C	$C01C	F002			MOVFF	_motorTurns+2, STACK_0+2
$1D40	$C01D	F003			MOVFF	_motorTurns+3, STACK_0+3
$1D44	$0ED0	    			MOVLW	208
$1D46	$6E04	    			MOVWF	STACK_4, 0
$1D48	$0E07	    			MOVLW	7
$1D4A	$6E05	    			MOVWF	STACK_4+1, 0
$1D4C	$0E00	    			MOVLW	0
$1D4E	$6E06	    			MOVWF	STACK_4+2, 0
$1D50	$6E07	    			MOVWF	STACK_4+3, 0
$1D52	$ECD3	F007			CALL	_mul_32x32_s
;extruder.c,547 :: 			(long)(POSCNTH << 8 ) + (long)POSCNTL;
$1D56	$0E08	    			MOVLW	8
$1D58	$6E08	    			MOVWF	STACK_8, 0
$1D5A	$CF67	F004			MOVFF	POSCNTH, STACK_4
$1D5E	$0E00	    			MOVLW	0
$1D60	$6E05	    			MOVWF	STACK_4+1, 0
$1D62	$5008	    			MOVF	STACK_8, 0, 0
$1D64	$	L_calcMotorPosition_110:
$1D64	$0100	    			MOVLB	0
$1D66	$E005	    			BZ	L_calcMotorPosition_111
$1D68	$3604	    			RLCF	STACK_4, 1, 0
$1D6A	$9004	    			BCF	STACK_4, 0, 0
$1D6C	$3605	    			RLCF	STACK_4+1, 1, 0
$1D6E	$0FFF	    			ADDLW	255
$1D70	$D7F9	    			BRA	L_calcMotorPosition_110
$1D72	$	L_calcMotorPosition_111:
$1D72	$0100	    			MOVLB	0
$1D74	$0E00	    			MOVLW	0
$1D76	$6E06	    			MOVWF	STACK_4+2, 0
$1D78	$6E07	    			MOVWF	STACK_4+3, 0
$1D7A	$5004	    			MOVF	STACK_4, 0, 0
$1D7C	$2400	    			ADDWF	STACK_0, 0, 0
$1D7E	$6FAF	    			MOVWF	_pid_motor+4, 1
$1D80	$5005	    			MOVF	STACK_4+1, 0, 0
$1D82	$2001	    			ADDWFC	STACK_0+1, 0, 0
$1D84	$6FB0	    			MOVWF	_pid_motor+5, 1
$1D86	$5006	    			MOVF	STACK_4+2, 0, 0
$1D88	$2002	    			ADDWFC	STACK_0+2, 0, 0
$1D8A	$6FB1	    			MOVWF	_pid_motor+6, 1
$1D8C	$5007	    			MOVF	STACK_4+3, 0, 0
$1D8E	$2003	    			ADDWFC	STACK_0+3, 0, 0
$1D90	$6FB2	    			MOVWF	_pid_motor+7, 1
$1D92	$CF66	F000			MOVFF	POSCNTL, STACK_0
$1D96	$0E00	    			MOVLW	0
$1D98	$6E01	    			MOVWF	STACK_0+1, 0
$1D9A	$6E02	    			MOVWF	STACK_0+2, 0
$1D9C	$6E03	    			MOVWF	STACK_0+3, 0
$1D9E	$5000	    			MOVF	STACK_0, 0, 0
$1DA0	$27AF	    			ADDWF	_pid_motor+4, 1, 1
$1DA2	$5001	    			MOVF	STACK_0+1, 0, 0
$1DA4	$23B0	    			ADDWFC	_pid_motor+5, 1, 1
$1DA6	$5002	    			MOVF	STACK_0+2, 0, 0
$1DA8	$23B1	    			ADDWFC	_pid_motor+6, 1, 1
$1DAA	$5003	    			MOVF	STACK_0+3, 0, 0
$1DAC	$23B2	    			ADDWFC	_pid_motor+7, 1, 1
;extruder.c,550 :: 			}
$1DAE	$0012	    			RETURN
$1DB0	$	_setMotorDuty:
;extruder.c,448 :: 			void setMotorDuty ( int newDuty){
;extruder.c,451 :: 			unsigned int tmp2 = 0;
$1DB0	$0101	    			MOVLB	1
$1DB2	$6B3B	    			CLRF	setMotorDuty_tmp2_L0, 1
$1DB4	$6B3C	    			CLRF	setMotorDuty_tmp2_L0+1, 1
;extruder.c,452 :: 			if ( newDuty < 0u ){
$1DB6	$0E80	    			MOVLW	128
$1DB8	$193A	    			XORWF	FARG_setMotorDuty+1, 0, 1
$1DBA	$6E00	    			MOVWF	STACK_0, 0
$1DBC	$0E80	    			MOVLW	128
$1DBE	$5C00	    			SUBWF	STACK_0, 0, 0
$1DC0	$E102	    			BNZ	L_setMotorDuty_104
$1DC2	$0E00	    			MOVLW	0
$1DC4	$5D39	    			SUBWF	FARG_setMotorDuty+0, 0, 1
$1DC6	$	L_setMotorDuty_104:
$1DC6	$E211	    			BC	L_setMotorDuty_20
;extruder.c,453 :: 			if ( MOTOR_DIR == 1 ){
$1DC8	$6A01	    			CLRF	STACK_1, 0
$1DCA	$B481	    			BTFSC	PORTB, 2, 0
$1DCC	$2A01	    			INCF	STACK_1, 1, 0
$1DCE	$5001	    			MOVF	STACK_1, 0, 0
$1DD0	$0A01	    			XORLW	1
$1DD2	$B4D8	    			BTFSC	STATUS, Z, 0
;extruder.c,454 :: 			motorDirSwitches++;
$1DD4	$2A2B	    			INCF	_motorDirSwitches, 1, 0
;extruder.c,455 :: 			}
$1DD6	$	L_setMotorDuty_21:
;extruder.c,456 :: 			MOTOR_DIR = 0;
$1DD6	$0101	    			MOVLB	1
$1DD8	$9481	    			BCF	PORTB, 2, 0
;extruder.c,457 :: 			tmp2 = -newDuty;
$1DDA	$5139	    			MOVF	FARG_setMotorDuty+0, 0, 1
$1DDC	$0800	    			SUBLW	0
$1DDE	$6F3B	    			MOVWF	setMotorDuty_tmp2_L0, 1
$1DE0	$C13A	F13C			MOVFF	FARG_setMotorDuty+1, setMotorDuty_tmp2_L0+1
$1DE4	$6AE8	    			CLRF	WREG, 0
$1DE6	$573C	    			SUBFWB	setMotorDuty_tmp2_L0+1, 1, 1
;extruder.c,460 :: 			}
$1DE8	$D00E	    			BRA	L_setMotorDuty_22
$1DEA	$	L_setMotorDuty_20:
;extruder.c,462 :: 			if ( MOTOR_DIR == 0 ){
$1DEA	$0101	    			MOVLB	1
$1DEC	$6A01	    			CLRF	STACK_1, 0
$1DEE	$B481	    			BTFSC	PORTB, 2, 0
$1DF0	$2A01	    			INCF	STACK_1, 1, 0
$1DF2	$5001	    			MOVF	STACK_1, 0, 0
$1DF4	$0A00	    			XORLW	0
$1DF6	$B4D8	    			BTFSC	STATUS, Z, 0
;extruder.c,463 :: 			motorDirSwitches++;
$1DF8	$2A2B	    			INCF	_motorDirSwitches, 1, 0
;extruder.c,464 :: 			}
$1DFA	$	L_setMotorDuty_23:
;extruder.c,465 :: 			MOTOR_DIR = 1;
$1DFA	$0101	    			MOVLB	1
$1DFC	$8481	    			BSF	PORTB, 2, 0
;extruder.c,466 :: 			tmp2 = newDuty;
$1DFE	$C139	F13B			MOVFF	FARG_setMotorDuty+0, setMotorDuty_tmp2_L0
$1E02	$C13A	F13C			MOVFF	FARG_setMotorDuty+1, setMotorDuty_tmp2_L0+1
;extruder.c,467 :: 			}
$1E06	$	L_setMotorDuty_22:
;extruder.c,473 :: 			PDC0H = Hi(tmp2);
$1E06	$C13C	FF78			MOVFF	setMotorDuty_tmp2_L0+1, PDC0H
;extruder.c,474 :: 			PDC0L = Lo(tmp2);
$1E0A	$C13B	FF79			MOVFF	setMotorDuty_tmp2_L0, PDC0L
;extruder.c,476 :: 			}
$1E0E	$0012	    			RETURN
$0018	$	_interrupt_low:
$0018	$C00E	F1F8			MOVFF	STACK_14, LOW_STSAVED_14
$001C	$C00D	F1F7			MOVFF	STACK_13, LOW_STSAVED_13
$0020	$C00C	F1F6			MOVFF	STACK_12, LOW_STSAVED_12
$0024	$C00B	F1F5			MOVFF	STACK_11, LOW_STSAVED_11
$0028	$C00A	F1F4			MOVFF	STACK_10, LOW_STSAVED_10
$002C	$C009	F1F3			MOVFF	STACK_9, LOW_STSAVED_9
$0030	$C008	F1F2			MOVFF	STACK_8, LOW_STSAVED_8
$0034	$C007	F1F1			MOVFF	STACK_7, LOW_STSAVED_7
$0038	$C006	F1F0			MOVFF	STACK_6, LOW_STSAVED_6
$003C	$C005	F1EF			MOVFF	STACK_5, LOW_STSAVED_5
$0040	$C004	F1EE			MOVFF	STACK_4, LOW_STSAVED_4
$0044	$C003	F1ED			MOVFF	STACK_3, LOW_STSAVED_3
$0048	$C002	F1EC			MOVFF	STACK_2, LOW_STSAVED_2
$004C	$C001	F1EB			MOVFF	STACK_1, LOW_STSAVED_1
$0050	$C000	F1EA			MOVFF	STACK_0, LOW_STSAVED_0
$0054	$CFE8	F132			MOVFF	WREG, ?Low_saveWERG
$0058	$CFD8	F133			MOVFF	STATUS, ?Low_saveSTATUS
$005C	$CFE0	F134			MOVFF	BSR, ?Low_saveBSR
$0060	$CFE9	F12E			MOVFF	FSR0L, ?saveFSR0
$0064	$CFEA	F12F			MOVFF	FSR0H, ?saveFSR0+1
$0068	$CFE1	F130			MOVFF	FSR1L, ?saveFSR1
$006C	$CFE2	F131			MOVFF	FSR1H, ?saveFSR1+1
;extruder.c,608 :: 			void interrupt_low(void){
;extruder.c,614 :: 			if ( INTCON.TMR0IF ){  //timer0, 60 hz
$0070	$A4F2	    			BTFSS	INTCON, 2, 0
$0072	$D018	    			BRA	L_interrupt_low_38
;extruder.c,617 :: 			dutyInterruptProc();
$0074	$EC07	F008			CALL	_dutyInterruptProc
;extruder.c,624 :: 			if ( tempCount++ == 60u ){
$0078	$C02C	F001			MOVFF	_tempCount, STACK_1
$007C	$2A2C	    			INCF	_tempCount, 1, 0
$007E	$5001	    			MOVF	STACK_1, 0, 0
$0080	$0A3C	    			XORLW	60
$0082	$E10A	    			BNZ	L_interrupt_low_39
;extruder.c,626 :: 			readTemp();
$0084	$EC15	F008			CALL	_readTemp
;extruder.c,628 :: 			tempCount = 0;
$0088	$6A2C	    			CLRF	_tempCount, 0
;extruder.c,630 :: 			calc_pid(&pid_heater);
$008A	$0E61	    			MOVLW	_pid_heater
$008C	$0101	    			MOVLB	1
$008E	$6F39	    			MOVWF	FARG_calc_pid+0, 1
$0090	$0E00	    			MOVLW	@_pid_heater
$0092	$6F3A	    			MOVWF	FARG_calc_pid+1, 1
$0094	$EC6E	F008			CALL	_calc_pid
;extruder.c,642 :: 			}
$0098	$	L_interrupt_low_39:
;extruder.c,653 :: 			TMR0H = 0x5D;
$0098	$0101	    			MOVLB	1
$009A	$0E5D	    			MOVLW	93
$009C	$6ED7	    			MOVWF	TMR0H, 0
;extruder.c,654 :: 			TMR0L = 0x3D;
$009E	$0E3D	    			MOVLW	61
$00A0	$6ED6	    			MOVWF	TMR0L, 0
;extruder.c,656 :: 			INTCON.TMR0IF = 0;
$00A2	$94F2	    			BCF	INTCON, 2, 0
;extruder.c,657 :: 			}
$00A4	$	L_interrupt_low_38:
;extruder.c,658 :: 			if (PIR1.TMR1IF ){  //timer 1, 1khz
$00A4	$0101	    			MOVLB	1
$00A6	$A09E	    			BTFSS	PIR1, 0, 0
$00A8	$D042	    			BRA	L_interrupt_low_40
;extruder.c,696 :: 			calcMotorPosition();
$00AA	$EC2A	F00D			CALL	_calcMotorPosition
;extruder.c,699 :: 			pid_motor.enable.F0 = 0; //start with disabled status
$00AE	$91F3	    			BCF	_pid_motor+72, 0, 1
;extruder.c,701 :: 			if ( motorGlobalEnable == 1 ){
$00B0	$502D	    			MOVF	_motorGlobalEnable, 0, 0
$00B2	$0A01	    			XORLW	1
$00B4	$E115	    			BNZ	L_interrupt_low_41
;extruder.c,702 :: 			if ( pid_heater.feedback > MOTOR_SAFE_TEMP ){
$00B6	$0E80	    			MOVLW	128
$00B8	$6E00	    			MOVWF	STACK_0, 0
$00BA	$0E80	    			MOVLW	128
$00BC	$1968	    			XORWF	_pid_heater+7, 0, 1
$00BE	$5C00	    			SUBWF	STACK_0, 0, 0
$00C0	$E108	    			BNZ	L_interrupt_low_112
$00C2	$5167	    			MOVF	_pid_heater+6, 0, 1
$00C4	$0800	    			SUBLW	0
$00C6	$E105	    			BNZ	L_interrupt_low_112
$00C8	$5166	    			MOVF	_pid_heater+5, 0, 1
$00CA	$0800	    			SUBLW	0
$00CC	$E102	    			BNZ	L_interrupt_low_112
$00CE	$5165	    			MOVF	_pid_heater+4, 0, 1
$00D0	$08C8	    			SUBLW	200
$00D2	$	L_interrupt_low_112:
$00D2	$E204	    			BC	L_interrupt_low_42
;extruder.c,703 :: 			pid_motor.enable.F0 = 1;
$00D4	$0100	    			MOVLB	0
$00D6	$81F3	    			BSF	_pid_motor+72, 0, 1
;extruder.c,704 :: 			FAULT_OUT = 0;
$00D8	$9A82	    			BCF	PORTC, 5, 0
;extruder.c,705 :: 			}
$00DA	$D002	    			BRA	L_interrupt_low_43
$00DC	$	L_interrupt_low_42:
;extruder.c,707 :: 			FAULT_OUT = 1;
$00DC	$0100	    			MOVLB	0
$00DE	$8A82	    			BSF	PORTC, 5, 0
;extruder.c,708 :: 			}
$00E0	$	L_interrupt_low_43:
;extruder.c,709 :: 			}
$00E0	$	L_interrupt_low_41:
;extruder.c,713 :: 			if ( pid_motor.error > MAX_ERROR ){
$00E0	$0E80	    			MOVLW	128
$00E2	$0A00	    			XORLW	0
$00E4	$6E00	    			MOVWF	STACK_0, 0
$00E6	$0E80	    			MOVLW	128
$00E8	$0100	    			MOVLB	0
$00EA	$19B6	    			XORWF	_pid_motor+11, 0, 1
$00EC	$5C00	    			SUBWF	STACK_0, 0, 0
$00EE	$E108	    			BNZ	L_interrupt_low_113
$00F0	$51B5	    			MOVF	_pid_motor+10, 0, 1
$00F2	$0800	    			SUBLW	0
$00F4	$E105	    			BNZ	L_interrupt_low_113
$00F6	$51B4	    			MOVF	_pid_motor+9, 0, 1
$00F8	$0827	    			SUBLW	39
$00FA	$E102	    			BNZ	L_interrupt_low_113
$00FC	$51B3	    			MOVF	_pid_motor+8, 0, 1
$00FE	$0810	    			SUBLW	16
$0100	$	L_interrupt_low_113:
$0100	$E204	    			BC	L_interrupt_low_44
;extruder.c,714 :: 			motorGlobalEnable = 0;
$0102	$6A2D	    			CLRF	_motorGlobalEnable, 0
;extruder.c,715 :: 			pid_motor.enable.F0 = 0;
$0104	$0100	    			MOVLB	0
$0106	$91F3	    			BCF	_pid_motor+72, 0, 1
;extruder.c,716 :: 			FAULT_OUT = 1;
$0108	$8A82	    			BSF	PORTC, 5, 0
;extruder.c,717 :: 			}
$010A	$	L_interrupt_low_44:
;extruder.c,719 :: 			calc_pid(&pid_motor);
$010A	$0EAB	    			MOVLW	_pid_motor
$010C	$0101	    			MOVLB	1
$010E	$6F39	    			MOVWF	FARG_calc_pid+0, 1
$0110	$0E00	    			MOVLW	@_pid_motor
$0112	$6F3A	    			MOVWF	FARG_calc_pid+1, 1
$0114	$EC6E	F008			CALL	_calc_pid
;extruder.c,720 :: 			setMotorDuty(pid_motor.output );
$0118	$C0F1	F139			MOVFF	_pid_motor+70, FARG_setMotorDuty+0
$011C	$C0F2	F13A			MOVFF	_pid_motor+71, FARG_setMotorDuty+1
$0120	$ECD8	F00E			CALL	_setMotorDuty
;extruder.c,732 :: 			TMR1H = 0xE0;
$0124	$0EE0	    			MOVLW	224
$0126	$6ECF	    			MOVWF	TMR1H, 0
;extruder.c,733 :: 			TMR1L = 0x9F; //1khz       dmm reports 750 hz, 33% bandwidth
$0128	$0E9F	    			MOVLW	159
$012A	$6ECE	    			MOVWF	TMR1L, 0
;extruder.c,734 :: 			PIR1.TMR1IF = 0;
$012C	$909E	    			BCF	PIR1, 0, 0
;extruder.c,736 :: 			}
$012E	$	L_interrupt_low_40:
;extruder.c,738 :: 			}
$012E	$	L_Low_Interrupt_end:
$012E	$C132	FFE8			MOVFF	?Low_saveWERG, WREG
$0132	$C133	FFD8			MOVFF	?Low_saveSTATUS, STATUS
$0136	$C134	FFE0			MOVFF	?Low_saveBSR, BSR
$013A	$C12E	FFE9			MOVFF	?saveFSR0, FSR0L
$013E	$C12F	FFEA			MOVFF	?saveFSR0+1, FSR0H
$0142	$C130	FFE1			MOVFF	?saveFSR1, FSR1L
$0146	$C131	FFE2			MOVFF	?saveFSR1+1, FSR1H
$014A	$C1F8	F00E			MOVFF	LOW_STSAVED_14, STACK_14
$014E	$C1F7	F00D			MOVFF	LOW_STSAVED_13, STACK_13
$0152	$C1F6	F00C			MOVFF	LOW_STSAVED_12, STACK_12
$0156	$C1F5	F00B			MOVFF	LOW_STSAVED_11, STACK_11
$015A	$C1F4	F00A			MOVFF	LOW_STSAVED_10, STACK_10
$015E	$C1F3	F009			MOVFF	LOW_STSAVED_9, STACK_9
$0162	$C1F2	F008			MOVFF	LOW_STSAVED_8, STACK_8
$0166	$C1F1	F007			MOVFF	LOW_STSAVED_7, STACK_7
$016A	$C1F0	F006			MOVFF	LOW_STSAVED_6, STACK_6
$016E	$C1EF	F005			MOVFF	LOW_STSAVED_5, STACK_5
$0172	$C1EE	F004			MOVFF	LOW_STSAVED_4, STACK_4
$0176	$C1ED	F003			MOVFF	LOW_STSAVED_3, STACK_3
$017A	$C1EC	F002			MOVFF	LOW_STSAVED_2, STACK_2
$017E	$C1EB	F001			MOVFF	LOW_STSAVED_1, STACK_1
$0182	$C1EA	F000			MOVFF	LOW_STSAVED_0, STACK_0
$0186	$0010	    			RETFIE	0
$1E10	$	_strcpy:
$1E10	$C1E0	F1E4			MOVFF	FARG_strcpy+0, strcpy_cp_L0
$1E14	$C1E1	F1E5			MOVFF	FARG_strcpy+1, strcpy_cp_L0+1
$1E18	$	L_strcpy_31:
$1E18	$C1E4	F002			MOVFF	strcpy_cp_L0, STACK_2
$1E1C	$C1E5	F003			MOVFF	strcpy_cp_L0+1, STACK_2+1
$1E20	$0101	    			MOVLB	1
$1E22	$4BE4	    			INFSNZ	strcpy_cp_L0, 1, 1
$1E24	$2BE5	    			INCF	strcpy_cp_L0+1, 1, 1
$1E26	$C1E2	FFE9			MOVFF	FARG_strcpy+2, FSR0L
$1E2A	$C1E3	FFEA			MOVFF	FARG_strcpy+3, FSR0L+1
$1E2E	$4BE2	    			INFSNZ	FARG_strcpy+2, 1, 1
$1E30	$2BE3	    			INCF	FARG_strcpy+3, 1, 1
$1E32	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1E36	$C002	FFE1			MOVFF	STACK_2, FSR1L
$1E3A	$C003	FFE2			MOVFF	STACK_2+1, FSR1H
$1E3E	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$1E42	$C002	FFE9			MOVFF	STACK_2, FSR0L
$1E46	$C003	FFEA			MOVFF	STACK_2+1, FSR0H
$1E4A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1E4E	$5200	    			MOVF	STACK_0, 1, 0
$1E50	$E1E3	    			BNZ	L_strcpy_31
$1E52	$	L_strcpy_32:
$1E52	$C1E0	F000			MOVFF	FARG_strcpy+0, STACK_0
$1E56	$C1E1	F001			MOVFF	FARG_strcpy+1, STACK_0+1
$1E5A	$0012	    			RETURN
$1E5C	$	_Div_8x8_U:
$1E5C	$0100	    			MOVLB	0
$1E5E	$6B08	    			CLRF	STACK_8, F
$1E60	$0E08	    			MOVLW	8
$1E62	$6E0C	    			MOVWF	STACK_12, 0
$1E64	$3400	    			RLCF	STACK_0, W, 0
$1E66	$3608	    			RLCF	STACK_8, F, 0
$1E68	$5004	    			MOVF	STACK_4, W, 0
$1E6A	$5E08	    			SUBWF	STACK_8, F, 0
$1E6C	$B0D8	    			BTFSC	STATUS, C, 0
$1E6E	$EF3B	F00F			GOTO	$+3
$1E72	$2608	    			ADDWF	STACK_8, F, 0
$1E74	$90D8	    			BCF	STATUS, C, 0
$1E76	$3600	    			RLCF	STACK_0, F, 0
$1E78	$2E0C	    			DECFSZ	STACK_12, F, 0
$1E7A	$EF32	F00F			GOTO	$-10
$1E7E	$0012	    			RETURN
$1E80	$	_Usart_Write:
$1E80	$	L_Usart_Write_3:
$1E80	$6A01	    			CLRF	STACK_1, 0
$1E82	$B2AC	    			BTFSC	TXSTA, 1, 0
$1E84	$2A01	    			INCF	STACK_1, 1, 0
$1E86	$5001	    			MOVF	STACK_1, 0, 0
$1E88	$0A00	    			XORLW	0
$1E8A	$E102	    			BNZ	L_Usart_Write_4
$1E8C	$0000	    			NOP
$1E8E	$D7F8	    			BRA	L_Usart_Write_3
$1E90	$	L_Usart_Write_4:
$1E90	$C1E0	FFAD			MOVFF	FARG_Usart_Write+0, TXREG
$1E94	$0012	    			RETURN
$1E96	$	_isspace:
$1E96	$0101	    			MOVLB	1
$1E98	$51E0	    			MOVF	FARG_isspace+0, 0, 1
$1E9A	$0A20	    			XORLW	32
$1E9C	$E008	    			BZ	L_isspace_15
$1E9E	$51E0	    			MOVF	FARG_isspace+0, 0, 1
$1EA0	$080D	    			SUBLW	13
$1EA2	$E303	    			BNC	L95_ex_L_isspace_15
$1EA4	$0E09	    			MOVLW	9
$1EA6	$5DE0	    			SUBWF	FARG_isspace+0, 0, 1
$1EA8	$E202	    			BC	L_isspace_15
$1EAA	$	L95_ex_L_isspace_15:
$1EAA	$6A00	    			CLRF	STACK_0, 0
$1EAC	$D002	    			BRA	L_isspace_14
$1EAE	$	L_isspace_15:
$1EAE	$0E01	    			MOVLW	1
$1EB0	$6E00	    			MOVWF	STACK_0, 0
$1EB2	$	L_isspace_14:
$1EB2	$0012	    			RETURN
$1EB4	$	_isdigit:
$1EB4	$0101	    			MOVLB	1
$1EB6	$51E0	    			MOVF	FARG_isdigit+0, 0, 1
$1EB8	$0839	    			SUBLW	57
$1EBA	$E307	    			BNC	L_isdigit_9
$1EBC	$0E30	    			MOVLW	48
$1EBE	$5DE0	    			SUBWF	FARG_isdigit+0, 0, 1
$1EC0	$E304	    			BNC	L_isdigit_9
$1EC2	$0E01	    			MOVLW	1
$1EC4	$6E00	    			MOVWF	STACK_0, 0
$1EC6	$EF66	F00F			GOTO	L_isdigit_8
$1ECA	$	L_isdigit_9:
$1ECA	$6A00	    			CLRF	STACK_0, 0
$1ECC	$	L_isdigit_8:
$1ECC	$0012	    			RETURN
$1ECE	$	_Equals_Double:
$1ECE	$0100	    			MOVLB	0
$1ED0	$5003	    			MOVF	STACK_3, W, 0
$1ED2	$1807	    			XORWF	STACK_7, W, 0
$1ED4	$A4D8	    			BTFSS	STATUS, Z, 0
$1ED6	$EF7C	F00F			GOTO	EQU_FALSE
$1EDA	$5002	    			MOVF	STACK_2, W, 0
$1EDC	$1806	    			XORWF	STACK_6, W, 0
$1EDE	$A4D8	    			BTFSS	STATUS, Z, 0
$1EE0	$EF7C	F00F			GOTO	EQU_FALSE
$1EE4	$5001	    			MOVF	STACK_1, W, 0
$1EE6	$1805	    			XORWF	STACK_5, W, 0
$1EE8	$A4D8	    			BTFSS	STATUS, Z, 0
$1EEA	$EF7C	F00F			GOTO	EQU_FALSE
$1EEE	$5000	    			MOVF	STACK_0, W, 0
$1EF0	$1804	    			XORWF	STACK_4, W, 0
$1EF2	$B4D8	    			BTFSC	STATUS, Z, 0
$1EF4	$84D8	    			BSF	STATUS, Z, 0
$1EF6	$0012	    			RETURN
$1EF8	$	EQU_FALSE:
$1EF8	$94D8	    			BCF	STATUS, Z, 0
$1EFA	$0012	    			RETURN
$1EFC	$0012	    			RETURN
$1EFE	$	_Eeprom_Read:
$1EFE	$9CA6	    			BCF	EECON1, 6, 0
$1F00	$C060	FFA9			MOVFF	FARG_Eeprom_Read+0, EEADR
$1F04	$9EA6	    			BCF	EECON1, 7, 0
$1F06	$80A6	    			BSF	EECON1, 0, 0
$1F08	$CFA8	F000			MOVFF	EEDATA, STACK_0
$1F0C	$0012	    			RETURN
$1F0E	$	_FloatToStr:
$1F0E	$0E4E	    			MOVLW	78
$1F10	$0101	    			MOVLB	1
$1F12	$6FCE	    			MOVWF	lstr1_conv+0, 1
$1F14	$0E61	    			MOVLW	97
$1F16	$6FCF	    			MOVWF	lstr1_conv+1, 1
$1F18	$0E4E	    			MOVLW	78
$1F1A	$6FD0	    			MOVWF	lstr1_conv+2, 1
$1F1C	$6BD1	    			CLRF	lstr1_conv+3, 1
$1F1E	$0E30	    			MOVLW	48
$1F20	$6FD2	    			MOVWF	lstr2_conv+0, 1
$1F22	$6BD3	    			CLRF	lstr2_conv+1, 1
$1F24	$0E49	    			MOVLW	73
$1F26	$6FD4	    			MOVWF	lstr3_conv+0, 1
$1F28	$0E4E	    			MOVLW	78
$1F2A	$6FD5	    			MOVWF	lstr3_conv+1, 1
$1F2C	$0E46	    			MOVLW	70
$1F2E	$6FD6	    			MOVWF	lstr3_conv+2, 1
$1F30	$6BD7	    			CLRF	lstr3_conv+3, 1
$1F32	$6BD8	    			CLRF	FloatToStr_bpoint_L0, 1
$1F34	$6BDB	    			CLRF	FloatToStr_dexpon_L0, 1
$1F36	$C1C8	F1DC			MOVFF	FARG_FloatToStr+0, FloatToStr_un_L0
$1F3A	$C1C9	F1DD			MOVFF	FARG_FloatToStr+1, FloatToStr_un_L0+1
$1F3E	$C1CA	F1DE			MOVFF	FARG_FloatToStr+2, FloatToStr_un_L0+2
$1F42	$C1CB	F1DF			MOVFF	FARG_FloatToStr+3, FloatToStr_un_L0+3
$1F46	$51DF	    			MOVF	FloatToStr_un_L0+3, 0, 1
$1F48	$0AFF	    			XORLW	255
$1F4A	$E108	    			BNZ	L_FloatToStr_59
$1F4C	$51DE	    			MOVF	FloatToStr_un_L0+2, 0, 1
$1F4E	$0AFF	    			XORLW	255
$1F50	$E105	    			BNZ	L_FloatToStr_59
$1F52	$51DD	    			MOVF	FloatToStr_un_L0+1, 0, 1
$1F54	$0AFF	    			XORLW	255
$1F56	$E102	    			BNZ	L_FloatToStr_59
$1F58	$51DC	    			MOVF	FloatToStr_un_L0, 0, 1
$1F5A	$0AFF	    			XORLW	255
$1F5C	$	L_FloatToStr_59:
$1F5C	$E10E	    			BNZ	L_FloatToStr_29
$1F5E	$C1CC	F1E0			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$1F62	$C1CD	F1E1			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$1F66	$0ECE	    			MOVLW	lstr1_conv
$1F68	$0101	    			MOVLB	1
$1F6A	$6FE2	    			MOVWF	FARG_strcpy+2, 1
$1F6C	$0E01	    			MOVLW	@lstr1_conv
$1F6E	$6FE3	    			MOVWF	FARG_strcpy+3, 1
$1F70	$EC08	F00F			CALL	_strcpy
$1F74	$0E03	    			MOVLW	3
$1F76	$6E00	    			MOVWF	STACK_0, 0
$1F78	$0012	    			RETURN
$1F7A	$	L_FloatToStr_29:
$1F7A	$0E01	    			MOVLW	1
$1F7C	$0101	    			MOVLB	1
$1F7E	$6FD9	    			MOVWF	FloatToStr_i_L0, 1
$1F80	$AFDE	    			BTFSS	FloatToStr_un_L0+2, 7, 1
$1F82	$D00A	    			BRA	L_FloatToStr_30
$1F84	$7FDE	    			BTG	FloatToStr_un_L0+2, 7, 1
$1F86	$2BD9	    			INCF	FloatToStr_i_L0, 1, 1
$1F88	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1F8C	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1F90	$0E2D	    			MOVLW	45
$1F92	$6EE6	    			MOVWF	POSTINC1, 0
$1F94	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1F96	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$1F98	$	L_FloatToStr_30:
$1F98	$0E00	    			MOVLW	0
$1F9A	$6E00	    			MOVWF	STACK_0, 0
$1F9C	$0101	    			MOVLB	1
$1F9E	$19DF	    			XORWF	FloatToStr_un_L0+3, 0, 1
$1FA0	$E108	    			BNZ	L_FloatToStr_60
$1FA2	$5000	    			MOVF	STACK_0, 0, 0
$1FA4	$19DE	    			XORWF	FloatToStr_un_L0+2, 0, 1
$1FA6	$E105	    			BNZ	L_FloatToStr_60
$1FA8	$5000	    			MOVF	STACK_0, 0, 0
$1FAA	$19DD	    			XORWF	FloatToStr_un_L0+1, 0, 1
$1FAC	$E102	    			BNZ	L_FloatToStr_60
$1FAE	$51DC	    			MOVF	FloatToStr_un_L0, 0, 1
$1FB0	$0A00	    			XORLW	0
$1FB2	$	L_FloatToStr_60:
$1FB2	$E10D	    			BNZ	L_FloatToStr_31
$1FB4	$C1CC	F1E0			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$1FB8	$C1CD	F1E1			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$1FBC	$0ED2	    			MOVLW	lstr2_conv
$1FBE	$0101	    			MOVLB	1
$1FC0	$6FE2	    			MOVWF	FARG_strcpy+2, 1
$1FC2	$0E01	    			MOVLW	@lstr2_conv
$1FC4	$6FE3	    			MOVWF	FARG_strcpy+3, 1
$1FC6	$EC08	F00F			CALL	_strcpy
$1FCA	$6A00	    			CLRF	STACK_0, 0
$1FCC	$0012	    			RETURN
$1FCE	$	L_FloatToStr_31:
$1FCE	$0101	    			MOVLB	1
$1FD0	$51DF	    			MOVF	FloatToStr_un_L0+3, 0, 1
$1FD2	$0A7F	    			XORLW	127
$1FD4	$E108	    			BNZ	L_FloatToStr_61
$1FD6	$51DE	    			MOVF	FloatToStr_un_L0+2, 0, 1
$1FD8	$0A80	    			XORLW	128
$1FDA	$E105	    			BNZ	L_FloatToStr_61
$1FDC	$51DD	    			MOVF	FloatToStr_un_L0+1, 0, 1
$1FDE	$0A00	    			XORLW	0
$1FE0	$E102	    			BNZ	L_FloatToStr_61
$1FE2	$51DC	    			MOVF	FloatToStr_un_L0, 0, 1
$1FE4	$0A00	    			XORLW	0
$1FE6	$	L_FloatToStr_61:
$1FE6	$E10E	    			BNZ	L_FloatToStr_32
$1FE8	$C1CC	F1E0			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$1FEC	$C1CD	F1E1			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$1FF0	$0ED4	    			MOVLW	lstr3_conv
$1FF2	$0101	    			MOVLB	1
$1FF4	$6FE2	    			MOVWF	FARG_strcpy+2, 1
$1FF6	$0E01	    			MOVLW	@lstr3_conv
$1FF8	$6FE3	    			MOVWF	FARG_strcpy+3, 1
$1FFA	$EC08	F00F			CALL	_strcpy
$1FFE	$C1D9	F000			MOVFF	FloatToStr_i_L0, STACK_0
$2002	$0012	    			RETURN
$2004	$	L_FloatToStr_32:
$2004	$	L_FloatToStr_33:
$2004	$0E00	    			MOVLW	0
$2006	$6E04	    			MOVWF	STACK_4, 0
$2008	$0E00	    			MOVLW	0
$200A	$6E05	    			MOVWF	STACK_4+1, 0
$200C	$0E00	    			MOVLW	0
$200E	$6E06	    			MOVWF	STACK_4+2, 0
$2010	$0E7F	    			MOVLW	127
$2012	$6E07	    			MOVWF	STACK_4+3, 0
$2014	$C1DC	F000			MOVFF	FloatToStr_un_L0, STACK_0
$2018	$C1DD	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$201C	$C1DE	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$2020	$C1DF	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$2024	$EC8B	F004			CALL	_compare_double
$2028	$0E01	    			MOVLW	1
$202A	$B0D8	    			BTFSC	STATUS, C, 0
$202C	$0E00	    			MOVLW	0
$202E	$6E00	    			MOVWF	STACK_0, 0
$2030	$5200	    			MOVF	STACK_0, 1, 0
$2032	$E01D	    			BZ	L_FloatToStr_34
$2034	$C1DC	F000			MOVFF	FloatToStr_un_L0, STACK_0
$2038	$C1DD	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$203C	$C1DE	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$2040	$C1DF	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$2044	$0E00	    			MOVLW	0
$2046	$6E04	    			MOVWF	STACK_4, 0
$2048	$0E00	    			MOVLW	0
$204A	$6E05	    			MOVWF	STACK_4+1, 0
$204C	$0E20	    			MOVLW	32
$204E	$6E06	    			MOVWF	STACK_4+2, 0
$2050	$0E82	    			MOVLW	130
$2052	$6E07	    			MOVWF	STACK_4+3, 0
$2054	$EC05	F006			CALL	_mul_32x32_fp
$2058	$C000	F1DC			MOVFF	STACK_0, FloatToStr_un_L0
$205C	$C001	F1DD			MOVFF	STACK_0+1, FloatToStr_un_L0+1
$2060	$C002	F1DE			MOVFF	STACK_0+2, FloatToStr_un_L0+2
$2064	$C003	F1DF			MOVFF	STACK_0+3, FloatToStr_un_L0+3
$2068	$0101	    			MOVLB	1
$206A	$07DB	    			DECF	FloatToStr_dexpon_L0, 1, 1
$206C	$D7CB	    			BRA	L_FloatToStr_33
$206E	$	L_FloatToStr_34:
$206E	$	L_FloatToStr_35:
$206E	$0101	    			MOVLB	1
$2070	$0E00	    			MOVLW	0
$2072	$6E04	    			MOVWF	STACK_4, 0
$2074	$0E00	    			MOVLW	0
$2076	$6E05	    			MOVWF	STACK_4+1, 0
$2078	$0E20	    			MOVLW	32
$207A	$6E06	    			MOVWF	STACK_4+2, 0
$207C	$0E82	    			MOVLW	130
$207E	$6E07	    			MOVWF	STACK_4+3, 0
$2080	$C1DC	F000			MOVFF	FloatToStr_un_L0, STACK_0
$2084	$C1DD	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$2088	$C1DE	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$208C	$C1DF	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$2090	$EC8B	F004			CALL	_compare_double
$2094	$0E00	    			MOVLW	0
$2096	$B0D8	    			BTFSC	STATUS, C, 0
$2098	$0E01	    			MOVLW	1
$209A	$6E00	    			MOVWF	STACK_0, 0
$209C	$5200	    			MOVF	STACK_0, 1, 0
$209E	$E01D	    			BZ	L_FloatToStr_36
$20A0	$C1DC	F000			MOVFF	FloatToStr_un_L0, STACK_0
$20A4	$C1DD	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$20A8	$C1DE	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$20AC	$C1DF	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$20B0	$0ECD	    			MOVLW	205
$20B2	$6E04	    			MOVWF	STACK_4, 0
$20B4	$0ECC	    			MOVLW	204
$20B6	$6E05	    			MOVWF	STACK_4+1, 0
$20B8	$0E4C	    			MOVLW	76
$20BA	$6E06	    			MOVWF	STACK_4+2, 0
$20BC	$0E7B	    			MOVLW	123
$20BE	$6E07	    			MOVWF	STACK_4+3, 0
$20C0	$EC05	F006			CALL	_mul_32x32_fp
$20C4	$C000	F1DC			MOVFF	STACK_0, FloatToStr_un_L0
$20C8	$C001	F1DD			MOVFF	STACK_0+1, FloatToStr_un_L0+1
$20CC	$C002	F1DE			MOVFF	STACK_0+2, FloatToStr_un_L0+2
$20D0	$C003	F1DF			MOVFF	STACK_0+3, FloatToStr_un_L0+3
$20D4	$0101	    			MOVLB	1
$20D6	$2BDB	    			INCF	FloatToStr_dexpon_L0, 1, 1
$20D8	$D7CA	    			BRA	L_FloatToStr_35
$20DA	$	L_FloatToStr_36:
$20DA	$0101	    			MOVLB	1
$20DC	$0EFF	    			MOVLW	255
$20DE	$15DC	    			ANDWF	FloatToStr_un_L0, 0, 1
$20E0	$6E05	    			MOVWF	STACK_5, 0
$20E2	$0EFF	    			MOVLW	255
$20E4	$15DD	    			ANDWF	FloatToStr_un_L0+1, 0, 1
$20E6	$6E06	    			MOVWF	STACK_5+1, 0
$20E8	$0E7F	    			MOVLW	127
$20EA	$15DE	    			ANDWF	FloatToStr_un_L0+2, 0, 1
$20EC	$6E07	    			MOVWF	STACK_5+2, 0
$20EE	$0E00	    			MOVLW	0
$20F0	$15DF	    			ANDWF	FloatToStr_un_L0+3, 0, 1
$20F2	$6E08	    			MOVWF	STACK_5+3, 0
$20F4	$C005	F000			MOVFF	STACK_5, STACK_0
$20F8	$C006	F001			MOVFF	STACK_5+1, STACK_0+1
$20FC	$C007	F002			MOVFF	STACK_5+2, STACK_0+2
$2100	$C008	F003			MOVFF	STACK_5+3, STACK_0+3
$2104	$3600	    			RLCF	STACK_0, 1, 0
$2106	$9000	    			BCF	STACK_0, 0, 0
$2108	$3601	    			RLCF	STACK_0+1, 1, 0
$210A	$3602	    			RLCF	STACK_0+2, 1, 0
$210C	$3603	    			RLCF	STACK_0+3, 1, 0
$210E	$0E00	    			MOVLW	0
$2110	$17DC	    			ANDWF	FloatToStr_un_L0, 1, 1
$2112	$0E00	    			MOVLW	0
$2114	$17DD	    			ANDWF	FloatToStr_un_L0+1, 1, 1
$2116	$0E00	    			MOVLW	0
$2118	$17DE	    			ANDWF	FloatToStr_un_L0+2, 1, 1
$211A	$0EFF	    			MOVLW	255
$211C	$17DF	    			ANDWF	FloatToStr_un_L0+3, 1, 1
$211E	$5000	    			MOVF	STACK_0, 0, 0
$2120	$13DC	    			IORWF	FloatToStr_un_L0, 1, 1
$2122	$5001	    			MOVF	STACK_0+1, 0, 0
$2124	$13DD	    			IORWF	FloatToStr_un_L0+1, 1, 1
$2126	$5002	    			MOVF	STACK_0+2, 0, 0
$2128	$13DE	    			IORWF	FloatToStr_un_L0+2, 1, 1
$212A	$5003	    			MOVF	STACK_0+3, 0, 0
$212C	$13DF	    			IORWF	FloatToStr_un_L0+3, 1, 1
$212E	$0E7F	    			MOVLW	127
$2130	$5DDF	    			SUBWF	FloatToStr_un_L0+3, 0, 1
$2132	$6E00	    			MOVWF	STACK_0, 0
$2134	$C000	F1DA			MOVFF	STACK_0, FloatToStr_d_L0
$2138	$0E01	    			MOVLW	1
$213A	$6FDF	    			MOVWF	FloatToStr_un_L0+3, 1
$213C	$5000	    			MOVF	STACK_0, 0, 0
$213E	$	L_FloatToStr_62:
$213E	$E007	    			BZ	L_FloatToStr_63
$2140	$37DC	    			RLCF	FloatToStr_un_L0, 1, 1
$2142	$91DC	    			BCF	FloatToStr_un_L0, 0, 1
$2144	$37DD	    			RLCF	FloatToStr_un_L0+1, 1, 1
$2146	$37DE	    			RLCF	FloatToStr_un_L0+2, 1, 1
$2148	$37DF	    			RLCF	FloatToStr_un_L0+3, 1, 1
$214A	$0FFF	    			ADDLW	255
$214C	$D7F8	    			BRA	L_FloatToStr_62
$214E	$	L_FloatToStr_63:
$214E	$0101	    			MOVLB	1
$2150	$51DF	    			MOVF	FloatToStr_un_L0+3, 0, 1
$2152	$0F30	    			ADDLW	48
$2154	$6E00	    			MOVWF	STACK_0, 0
$2156	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$215A	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$215E	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$2162	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$2164	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$2166	$0E80	    			MOVLW	128
$2168	$19DB	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$216A	$6E00	    			MOVWF	STACK_0, 0
$216C	$0E80	    			MOVLW	128
$216E	$0A01	    			XORLW	1
$2170	$5C00	    			SUBWF	STACK_0, 0, 0
$2172	$E307	    			BNC	L358_ex_L_FloatToStr_39
$2174	$0E80	    			MOVLW	128
$2176	$0A06	    			XORLW	6
$2178	$6E00	    			MOVWF	STACK_0, 0
$217A	$0E80	    			MOVLW	128
$217C	$19DB	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$217E	$5C00	    			SUBWF	STACK_0, 0, 0
$2180	$E20A	    			BC	L_FloatToStr_39
$2182	$	L358_ex_L_FloatToStr_39:
$2182	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$2186	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$218A	$0E2E	    			MOVLW	46
$218C	$6EE6	    			MOVWF	POSTINC1, 0
$218E	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$2190	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$2192	$0E01	    			MOVLW	1
$2194	$6FD8	    			MOVWF	FloatToStr_bpoint_L0, 1
$2196	$	L_FloatToStr_39:
$2196	$0E06	    			MOVLW	6
$2198	$6FDA	    			MOVWF	FloatToStr_d_L0, 1
$219A	$	L_FloatToStr_40:
$219A	$51DA	    			MOVF	FloatToStr_d_L0, 0, 1
$219C	$0A00	    			XORLW	0
$219E	$E03E	    			BZ	L_FloatToStr_41
$21A0	$6BDF	    			CLRF	FloatToStr_un_L0+3, 1
$21A2	$C1DC	F000			MOVFF	FloatToStr_un_L0, STACK_0
$21A6	$C1DD	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$21AA	$C1DE	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$21AE	$C1DF	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$21B2	$3600	    			RLCF	STACK_0, 1, 0
$21B4	$9000	    			BCF	STACK_0, 0, 0
$21B6	$3601	    			RLCF	STACK_0+1, 1, 0
$21B8	$3602	    			RLCF	STACK_0+2, 1, 0
$21BA	$3603	    			RLCF	STACK_0+3, 1, 0
$21BC	$3600	    			RLCF	STACK_0, 1, 0
$21BE	$9000	    			BCF	STACK_0, 0, 0
$21C0	$3601	    			RLCF	STACK_0+1, 1, 0
$21C2	$3602	    			RLCF	STACK_0+2, 1, 0
$21C4	$3603	    			RLCF	STACK_0+3, 1, 0
$21C6	$5000	    			MOVF	STACK_0, 0, 0
$21C8	$27DC	    			ADDWF	FloatToStr_un_L0, 1, 1
$21CA	$5001	    			MOVF	STACK_0+1, 0, 0
$21CC	$23DD	    			ADDWFC	FloatToStr_un_L0+1, 1, 1
$21CE	$5002	    			MOVF	STACK_0+2, 0, 0
$21D0	$23DE	    			ADDWFC	FloatToStr_un_L0+2, 1, 1
$21D2	$5003	    			MOVF	STACK_0+3, 0, 0
$21D4	$23DF	    			ADDWFC	FloatToStr_un_L0+3, 1, 1
$21D6	$37DC	    			RLCF	FloatToStr_un_L0, 1, 1
$21D8	$91DC	    			BCF	FloatToStr_un_L0, 0, 1
$21DA	$37DD	    			RLCF	FloatToStr_un_L0+1, 1, 1
$21DC	$37DE	    			RLCF	FloatToStr_un_L0+2, 1, 1
$21DE	$37DF	    			RLCF	FloatToStr_un_L0+3, 1, 1
$21E0	$51DF	    			MOVF	FloatToStr_un_L0+3, 0, 1
$21E2	$0F30	    			ADDLW	48
$21E4	$6E00	    			MOVWF	STACK_0, 0
$21E6	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$21EA	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$21EE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$21F2	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$21F4	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$21F6	$51D8	    			MOVF	FloatToStr_bpoint_L0, 0, 1
$21F8	$0A00	    			XORLW	0
$21FA	$E10E	    			BNZ	L_FloatToStr_43
$21FC	$07DB	    			DECF	FloatToStr_dexpon_L0, 1, 1
$21FE	$51DB	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$2200	$0A00	    			XORLW	0
$2202	$E10A	    			BNZ	L_FloatToStr_44
$2204	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$2208	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$220C	$0E2E	    			MOVLW	46
$220E	$6EE6	    			MOVWF	POSTINC1, 0
$2210	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$2212	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$2214	$0E01	    			MOVLW	1
$2216	$6FD8	    			MOVWF	FloatToStr_bpoint_L0, 1
$2218	$	L_FloatToStr_44:
$2218	$	L_FloatToStr_43:
$2218	$	L_FloatToStr_42:
$2218	$07DA	    			DECF	FloatToStr_d_L0, 1, 1
$221A	$D7BF	    			BRA	L_FloatToStr_40
$221C	$	L_FloatToStr_41:
$221C	$	L_FloatToStr_45:
$221C	$0EFF	    			MOVLW	255
$221E	$25CC	    			ADDWF	FARG_FloatToStr+4, 0, 1
$2220	$6EE9	    			MOVWF	FSR0L, 0
$2222	$0EFF	    			MOVLW	255
$2224	$21CD	    			ADDWFC	FARG_FloatToStr+5, 0, 1
$2226	$6EEA	    			MOVWF	FSR0L+1, 0
$2228	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$222C	$5004	    			MOVF	STACK_4, 0, 0
$222E	$0A30	    			XORLW	48
$2230	$E105	    			BNZ	L_FloatToStr_46
$2232	$0E01	    			MOVLW	1
$2234	$5FCC	    			SUBWF	FARG_FloatToStr+4, 1, 1
$2236	$0E00	    			MOVLW	0
$2238	$5BCD	    			SUBWFB	FARG_FloatToStr+5, 1, 1
$223A	$D7F0	    			BRA	L_FloatToStr_45
$223C	$	L_FloatToStr_46:
$223C	$0EFF	    			MOVLW	255
$223E	$25CC	    			ADDWF	FARG_FloatToStr+4, 0, 1
$2240	$6EE9	    			MOVWF	FSR0L, 0
$2242	$0EFF	    			MOVLW	255
$2244	$21CD	    			ADDWFC	FARG_FloatToStr+5, 0, 1
$2246	$6EEA	    			MOVWF	FSR0L+1, 0
$2248	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$224C	$5004	    			MOVF	STACK_4, 0, 0
$224E	$0A2E	    			XORLW	46
$2250	$E104	    			BNZ	L_FloatToStr_47
$2252	$0E01	    			MOVLW	1
$2254	$5FCC	    			SUBWF	FARG_FloatToStr+4, 1, 1
$2256	$0E00	    			MOVLW	0
$2258	$5BCD	    			SUBWFB	FARG_FloatToStr+5, 1, 1
$225A	$	L_FloatToStr_47:
$225A	$51DB	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$225C	$0A00	    			XORLW	0
$225E	$E043	    			BZ	L_FloatToStr_48
$2260	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$2264	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$2268	$0E65	    			MOVLW	101
$226A	$6EE6	    			MOVWF	POSTINC1, 0
$226C	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$226E	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$2270	$0E80	    			MOVLW	128
$2272	$19DB	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$2274	$6E00	    			MOVWF	STACK_0, 0
$2276	$0E80	    			MOVLW	128
$2278	$0A00	    			XORLW	0
$227A	$5C00	    			SUBWF	STACK_0, 0, 0
$227C	$E20B	    			BC	L_FloatToStr_49
$227E	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$2282	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$2286	$0E2D	    			MOVLW	45
$2288	$6EE6	    			MOVWF	POSTINC1, 0
$228A	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$228C	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$228E	$51DB	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$2290	$0800	    			SUBLW	0
$2292	$6FDB	    			MOVWF	FloatToStr_dexpon_L0, 1
$2294	$	L_FloatToStr_49:
$2294	$C1DB	F1DA			MOVFF	FloatToStr_dexpon_L0, FloatToStr_d_L0
$2298	$51DB	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$229A	$0809	    			SUBLW	9
$229C	$E211	    			BC	L_FloatToStr_50
$229E	$0E0A	    			MOVLW	10
$22A0	$6E04	    			MOVWF	STACK_4, 0
$22A2	$C1DA	F000			MOVFF	FloatToStr_d_L0, STACK_0
$22A6	$EC2E	F00F			CALL	_div_8x8_u
$22AA	$0E30	    			MOVLW	48
$22AC	$2600	    			ADDWF	STACK_0, 1, 0
$22AE	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$22B2	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$22B6	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$22BA	$0101	    			MOVLB	1
$22BC	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$22BE	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$22C0	$	L_FloatToStr_50:
$22C0	$0E0A	    			MOVLW	10
$22C2	$6E04	    			MOVWF	STACK_4, 0
$22C4	$C1DA	F000			MOVFF	FloatToStr_d_L0, STACK_0
$22C8	$EC2E	F00F			CALL	_div_8x8_u
$22CC	$C008	F000			MOVFF	STACK_8, STACK_0
$22D0	$0E30	    			MOVLW	48
$22D2	$2600	    			ADDWF	STACK_0, 1, 0
$22D4	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$22D8	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$22DC	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$22E0	$0101	    			MOVLB	1
$22E2	$4BCC	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$22E4	$2BCD	    			INCF	FARG_FloatToStr+5, 1, 1
$22E6	$	L_FloatToStr_48:
$22E6	$C1CC	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$22EA	$C1CD	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$22EE	$6AE6	    			CLRF	POSTINC1, 0
$22F0	$6A00	    			CLRF	STACK_0, 0
$22F2	$0012	    			RETURN
$22F4	$	_USART_Send_String:
;extruder.c,317 :: 			void USART_Send_String( char *data){
;extruder.c,319 :: 			while( *data != 0u ){
$22F4	$	L_USART_Send_String_2:
$22F4	$C1C8	FFE9			MOVFF	FARG_USART_Send_String+0, FSR0L
$22F8	$C1C9	FFEA			MOVFF	FARG_USART_Send_String+1, FSR0H
$22FC	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$2300	$5001	    			MOVF	STACK_1, 0, 0
$2302	$0A00	    			XORLW	0
$2304	$E00C	    			BZ	L_USART_Send_String_3
;extruder.c,320 :: 			c = *data;
$2306	$C1C8	FFE9			MOVFF	FARG_USART_Send_String+0, FSR0L
$230A	$C1C9	FFEA			MOVFF	FARG_USART_Send_String+1, FSR0H
$230E	$CFEE	F1E0			MOVFF	POSTINC0, FARG_Usart_Write+0
;extruder.c,321 :: 			USART_Write(c);
$2312	$EC40	F00F			CALL	_Usart_Write
;extruder.c,322 :: 			data++;
$2316	$0101	    			MOVLB	1
$2318	$4BC8	    			INFSNZ	FARG_USART_Send_String+0, 1, 1
$231A	$2BC9	    			INCF	FARG_USART_Send_String+1, 1, 1
;extruder.c,323 :: 			}
$231C	$D7EB	    			BRA	L_USART_Send_String_2
$231E	$	L_USART_Send_String_3:
;extruder.c,325 :: 			}
$231E	$0012	    			RETURN
$2320	$	_Eeprom_Write:
$2320	$	L_Eeprom_Write_0:
$2320	$A2A6	    			BTFSS	EECON1, 1, 0
$2322	$D002	    			BRA	L_Eeprom_Write_1
$2324	$0000	    			NOP
$2326	$D7FC	    			BRA	L_Eeprom_Write_0
$2328	$	L_Eeprom_Write_1:
$2328	$9CA6	    			BCF	EECON1, 6, 0
$232A	$C1C8	FFA9			MOVFF	FARG_Eeprom_Write+0, EEADR
$232E	$C1C9	FFA8			MOVFF	FARG_Eeprom_Write+1, EEDATA
$2332	$9EA6	    			BCF	EECON1, 7, 0
$2334	$84A6	    			BSF	EECON1, 2, 0
$2336	$9EF2	    			BCF	INTCON, 7, 0
$2338	$0E55	    			MOVLW	85
$233A	$6EA7	    			MOVWF	EECON2, 0
$233C	$0EAA	    			MOVLW	170
$233E	$6EA7	    			MOVWF	EECON2, 0
$2340	$82A6	    			BSF	EECON1, 1, 0
$2342	$8EF2	    			BSF	INTCON, 7, 0
$2344	$94A6	    			BCF	EECON1, 2, 0
$2346	$0012	    			RETURN
$2348	$	_Mul_16x16_S:
$2348	$0100	    			MOVLB	0
$234A	$5000	    			MOVF	STACK_0, W, 0
$234C	$0204	    			MULWF	STACK_4, 0
$234E	$CFF4	F009			MOVFF	PRODH, STACK_9
$2352	$CFF3	F008			MOVFF	PRODL, STACK_8
$2356	$5001	    			MOVF	STACK_1, W, 0
$2358	$0205	    			MULWF	STACK_5, 0
$235A	$CFF4	F00B			MOVFF	PRODH, STACK_11
$235E	$CFF3	F00A			MOVFF	PRODL, STACK_10
$2362	$5000	    			MOVF	STACK_0, W, 0
$2364	$0205	    			MULWF	STACK_5, 0
$2366	$50F3	    			MOVF	PRODL, W, 0
$2368	$2609	    			ADDWF	STACK_9, F, 0
$236A	$50F4	    			MOVF	PRODH, W, 0
$236C	$220A	    			ADDWFC	STACK_10, F, 0
$236E	$6AE8	    			CLRF	WREG, 0
$2370	$220B	    			ADDWFC	STACK_11, F, 0
$2372	$5001	    			MOVF	STACK_1, W, 0
$2374	$0204	    			MULWF	STACK_4, 0
$2376	$50F3	    			MOVF	PRODL, W, 0
$2378	$2609	    			ADDWF	STACK_9, F, 0
$237A	$50F4	    			MOVF	PRODH, W, 0
$237C	$220A	    			ADDWFC	STACK_10, F, 0
$237E	$6AE8	    			CLRF	WREG, 0
$2380	$220B	    			ADDWFC	STACK_11, F, 0
$2382	$AE05	    			BTFSS	STACK_5, 7, 0
$2384	$EFC8	F011			GOTO	$+5
$2388	$5000	    			MOVF	STACK_0, W, 0
$238A	$5C0A	    			SUBWF	STACK_10, W, 0
$238C	$5001	    			MOVF	STACK_1, W, 0
$238E	$580B	    			SUBWFB	STACK_11, W, 0
$2390	$AE01	    			BTFSS	STACK_1, 7, 0
$2392	$EFCF	F011			GOTO	$+5
$2396	$5004	    			MOVF	STACK_4, W, 0
$2398	$5C0A	    			SUBWF	STACK_10, W, 0
$239A	$5005	    			MOVF	STACK_5, W, 0
$239C	$580B	    			SUBWFB	STACK_11, W, 0
$239E	$C008	F000			MOVFF	STACK_8, STACK_0
$23A2	$C009	F001			MOVFF	STACK_9, STACK_1
$23A6	$C00A	F002			MOVFF	STACK_10, STACK_2
$23AA	$C00B	F003			MOVFF	STACK_11, STACK_3
$23AE	$0012	    			RETURN
$23B0	$	c_stdlib_strtod:
$23B0	$0101	    			MOVLB	1
$23B2	$51CA	    			MOVF	FARG_c_stdlib_strtod+2, 0, 1
$23B4	$11CB	    			IORWF	FARG_c_stdlib_strtod+3, 0, 1
$23B6	$E008	    			BZ	L_c_stdlib_strtod_1
$23B8	$C1CA	FFE1			MOVFF	FARG_c_stdlib_strtod+2, FSR1L
$23BC	$C1CB	FFE2			MOVFF	FARG_c_stdlib_strtod+3, FSR1H
$23C0	$C1C8	FFE6			MOVFF	FARG_c_stdlib_strtod+0, POSTINC1
$23C4	$C1C9	FFE6			MOVFF	FARG_c_stdlib_strtod+1, POSTINC1
$23C8	$	L_c_stdlib_strtod_1:
$23C8	$	L_c_stdlib_strtod_2:
$23C8	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$23CC	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$23D0	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$23D4	$C000	F1CE			MOVFF	STACK_0, c_stdlib_strtod_eexp_L0
$23D8	$C000	F1E0			MOVFF	STACK_0, FARG_isspace+0
$23DC	$EC4B	F00F			CALL	_isspace
$23E0	$5200	    			MOVF	STACK_0, 1, 0
$23E2	$E004	    			BZ	L_c_stdlib_strtod_3
$23E4	$0101	    			MOVLB	1
$23E6	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$23E8	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$23EA	$D7EE	    			BRA	L_c_stdlib_strtod_2
$23EC	$	L_c_stdlib_strtod_3:
$23EC	$0101	    			MOVLB	1
$23EE	$6BCC	    			CLRF	c_stdlib_strtod_flags_L0, 1
$23F0	$51CE	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$23F2	$0A2D	    			XORLW	45
$23F4	$E105	    			BNZ	L_c_stdlib_strtod_4
$23F6	$0E01	    			MOVLW	1
$23F8	$6FCC	    			MOVWF	c_stdlib_strtod_flags_L0, 1
$23FA	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$23FC	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$23FE	$D006	    			BRA	L_c_stdlib_strtod_5
$2400	$	L_c_stdlib_strtod_4:
$2400	$0101	    			MOVLB	1
$2402	$51CE	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$2404	$0A2B	    			XORLW	43
$2406	$E102	    			BNZ	L_c_stdlib_strtod_6
$2408	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$240A	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$240C	$	L_c_stdlib_strtod_6:
$240C	$	L_c_stdlib_strtod_5:
$240C	$0101	    			MOVLB	1
$240E	$6BCE	    			CLRF	c_stdlib_strtod_eexp_L0, 1
$2410	$6BCF	    			CLRF	c_stdlib_strtod__u_L0, 1
$2412	$6BD0	    			CLRF	c_stdlib_strtod__u_L0+1, 1
$2414	$6BD1	    			CLRF	c_stdlib_strtod__u_L0+2, 1
$2416	$6BD2	    			CLRF	c_stdlib_strtod__u_L0+3, 1
$2418	$6BCD	    			CLRF	c_stdlib_strtod_expon_L0, 1
$241A	$	L_c_stdlib_strtod_7:
$241A	$0101	    			MOVLB	1
$241C	$B9CC	    			BTFSC	c_stdlib_strtod_flags_L0, 4, 1
$241E	$D00E	    			BRA	L_c_stdlib_strtod_12
$2420	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2424	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2428	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$242C	$5004	    			MOVF	STACK_4, 0, 0
$242E	$0A2E	    			XORLW	46
$2430	$E105	    			BNZ	L_c_stdlib_strtod_12
$2432	$	L52_ex_L_c_stdlib_strtod_12:
$2432	$0101	    			MOVLB	1
$2434	$89CC	    			BSF	c_stdlib_strtod_flags_L0, 4, 1
$2436	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$2438	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$243A	$D04B	    			BRA	L_c_stdlib_strtod_9
$243C	$	L_c_stdlib_strtod_12:
$243C	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2440	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2444	$CFEE	F1E0			MOVFF	POSTINC0, FARG_isdigit+0
$2448	$EC5A	F00F			CALL	_isdigit
$244C	$5200	    			MOVF	STACK_0, 1, 0
$244E	$E042	    			BZ	L_c_stdlib_strtod_8
$2450	$	L_c_stdlib_strtod_13:
$2450	$0101	    			MOVLB	1
$2452	$83CC	    			BSF	c_stdlib_strtod_flags_L0, 1, 1
$2454	$51CE	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$2456	$0A08	    			XORLW	8
$2458	$E036	    			BZ	L_c_stdlib_strtod_14
$245A	$B9CC	    			BTFSC	c_stdlib_strtod_flags_L0, 4, 1
$245C	$07CD	    			DECF	c_stdlib_strtod_expon_L0, 1, 1
$245E	$	L_c_stdlib_strtod_15:
$245E	$0101	    			MOVLB	1
$2460	$2BCE	    			INCF	c_stdlib_strtod_eexp_L0, 1, 1
$2462	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$2466	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$246A	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$246E	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$2472	$0E0A	    			MOVLW	10
$2474	$6E04	    			MOVWF	STACK_4, 0
$2476	$0E00	    			MOVLW	0
$2478	$6E05	    			MOVWF	STACK_4+1, 0
$247A	$6E06	    			MOVWF	STACK_4+2, 0
$247C	$6E07	    			MOVWF	STACK_4+3, 0
$247E	$ECD3	F007			CALL	_mul_32x32_s
$2482	$C000	F1CF			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$2486	$C001	F1D0			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$248A	$C002	F1D1			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$248E	$C003	F1D2			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$2492	$0000	    			NOP
$2494	$0000	    			NOP
$2496	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$249A	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$249E	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$24A2	$0E30	    			MOVLW	48
$24A4	$5E00	    			SUBWF	STACK_0, 1, 0
$24A6	$6A01	    			CLRF	STACK_0+1, 0
$24A8	$0E00	    			MOVLW	0
$24AA	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$24AC	$5000	    			MOVF	STACK_0, 0, 0
$24AE	$0101	    			MOVLB	1
$24B0	$27CF	    			ADDWF	c_stdlib_strtod__u_L0, 1, 1
$24B2	$5001	    			MOVF	STACK_0+1, 0, 0
$24B4	$23D0	    			ADDWFC	c_stdlib_strtod__u_L0+1, 1, 1
$24B6	$0E00	    			MOVLW	0
$24B8	$BE01	    			BTFSC	STACK_0+1, 7, 0
$24BA	$0EFF	    			MOVLW	255
$24BC	$23D1	    			ADDWFC	c_stdlib_strtod__u_L0+2, 1, 1
$24BE	$23D2	    			ADDWFC	c_stdlib_strtod__u_L0+3, 1, 1
$24C0	$0000	    			NOP
$24C2	$0000	    			NOP
$24C4	$D003	    			BRA	L_c_stdlib_strtod_16
$24C6	$	L_c_stdlib_strtod_14:
$24C6	$0101	    			MOVLB	1
$24C8	$A9CC	    			BTFSS	c_stdlib_strtod_flags_L0, 4, 1
$24CA	$2BCD	    			INCF	c_stdlib_strtod_expon_L0, 1, 1
$24CC	$	L_c_stdlib_strtod_17:
$24CC	$	L_c_stdlib_strtod_16:
$24CC	$0101	    			MOVLB	1
$24CE	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$24D0	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$24D2	$	L_c_stdlib_strtod_9:
$24D2	$D7A3	    			BRA	L_c_stdlib_strtod_7
$24D4	$	L_c_stdlib_strtod_8:
$24D4	$0101	    			MOVLB	1
$24D6	$6BCE	    			CLRF	c_stdlib_strtod_eexp_L0, 1
$24D8	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$24DC	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$24E0	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$24E4	$5004	    			MOVF	STACK_4, 0, 0
$24E6	$0A65	    			XORLW	101
$24E8	$E00A	    			BZ	L114_ex_L_c_stdlib_strtod_20
$24EA	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$24EE	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$24F2	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$24F6	$5004	    			MOVF	STACK_4, 0, 0
$24F8	$0A45	    			XORLW	69
$24FA	$A4D8	    			BTFSS	STATUS, Z, 0
$24FC	$D07D	    			BRA	L_c_stdlib_strtod_20
$24FE	$	L114_ex_L_c_stdlib_strtod_20:
$24FE	$0101	    			MOVLB	1
$2500	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$2502	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$2504	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2508	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$250C	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2510	$5004	    			MOVF	STACK_4, 0, 0
$2512	$0A2D	    			XORLW	45
$2514	$E104	    			BNZ	L_c_stdlib_strtod_21
$2516	$87CC	    			BSF	c_stdlib_strtod_flags_L0, 3, 1
$2518	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$251A	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$251C	$D00C	    			BRA	L_c_stdlib_strtod_22
$251E	$	L_c_stdlib_strtod_21:
$251E	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2522	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2526	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$252A	$5004	    			MOVF	STACK_4, 0, 0
$252C	$0A2B	    			XORLW	43
$252E	$E103	    			BNZ	L_c_stdlib_strtod_23
$2530	$0101	    			MOVLB	1
$2532	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$2534	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$2536	$	L_c_stdlib_strtod_23:
$2536	$	L_c_stdlib_strtod_22:
$2536	$	L_c_stdlib_strtod_24:
$2536	$0101	    			MOVLB	1
$2538	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$253C	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2540	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2544	$5004	    			MOVF	STACK_4, 0, 0
$2546	$0A30	    			XORLW	48
$2548	$E104	    			BNZ	L_c_stdlib_strtod_25
$254A	$0101	    			MOVLB	1
$254C	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$254E	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$2550	$D7F2	    			BRA	L_c_stdlib_strtod_24
$2552	$	L_c_stdlib_strtod_25:
$2552	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2556	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$255A	$CFEE	F1E0			MOVFF	POSTINC0, FARG_isdigit+0
$255E	$EC5A	F00F			CALL	_isdigit
$2562	$5200	    			MOVF	STACK_0, 1, 0
$2564	$E041	    			BZ	L_c_stdlib_strtod_26
$2566	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$256A	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$256E	$CFEE	F1CE			MOVFF	POSTINC0, c_stdlib_strtod_eexp_L0
$2572	$0E30	    			MOVLW	48
$2574	$0101	    			MOVLB	1
$2576	$5FCE	    			SUBWF	c_stdlib_strtod_eexp_L0, 1, 1
$2578	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$257A	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$257C	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2580	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2584	$CFEE	F1E0			MOVFF	POSTINC0, FARG_isdigit+0
$2588	$EC5A	F00F			CALL	_isdigit
$258C	$5200	    			MOVF	STACK_0, 1, 0
$258E	$E02C	    			BZ	L_c_stdlib_strtod_27
$2590	$0E0A	    			MOVLW	10
$2592	$0101	    			MOVLB	1
$2594	$03CE	    			MULWF	c_stdlib_strtod_eexp_L0, 1
$2596	$CFF3	F000			MOVFF	PRODL, STACK_0
$259A	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$259E	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$25A2	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$25A6	$0E30	    			MOVLW	48
$25A8	$5E04	    			SUBWF	STACK_4, 1, 0
$25AA	$5004	    			MOVF	STACK_4, 0, 0
$25AC	$2400	    			ADDWF	STACK_0, 0, 0
$25AE	$6FCE	    			MOVWF	c_stdlib_strtod_eexp_L0, 1
$25B0	$4BC8	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$25B2	$2BC9	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$25B4	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$25B8	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$25BC	$CFEE	F1E0			MOVFF	POSTINC0, FARG_isdigit+0
$25C0	$EC5A	F00F			CALL	_isdigit
$25C4	$5200	    			MOVF	STACK_0, 1, 0
$25C6	$E010	    			BZ	L_c_stdlib_strtod_28
$25C8	$0E0A	    			MOVLW	10
$25CA	$0101	    			MOVLB	1
$25CC	$03CE	    			MULWF	c_stdlib_strtod_eexp_L0, 1
$25CE	$CFF3	F000			MOVFF	PRODL, STACK_0
$25D2	$C1C8	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$25D6	$C1C9	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$25DA	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$25DE	$0E30	    			MOVLW	48
$25E0	$5E04	    			SUBWF	STACK_4, 1, 0
$25E2	$5004	    			MOVF	STACK_4, 0, 0
$25E4	$2400	    			ADDWF	STACK_0, 0, 0
$25E6	$6FCE	    			MOVWF	c_stdlib_strtod_eexp_L0, 1
$25E8	$	L_c_stdlib_strtod_28:
$25E8	$	L_c_stdlib_strtod_27:
$25E8	$	L_c_stdlib_strtod_26:
$25E8	$0101	    			MOVLB	1
$25EA	$0101	    			MOVLB	1
$25EC	$0101	    			MOVLB	1
$25EE	$A7CC	    			BTFSS	c_stdlib_strtod_flags_L0, 3, 1
$25F0	$D003	    			BRA	L_c_stdlib_strtod_29
$25F2	$51CE	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$25F4	$0800	    			SUBLW	0
$25F6	$6FCE	    			MOVWF	c_stdlib_strtod_eexp_L0, 1
$25F8	$	L_c_stdlib_strtod_29:
$25F8	$	L_c_stdlib_strtod_20:
$25F8	$0101	    			MOVLB	1
$25FA	$51CE	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$25FC	$27CD	    			ADDWF	c_stdlib_strtod_expon_L0, 1, 1
$25FE	$0E00	    			MOVLW	0
$2600	$19CB	    			XORWF	FARG_c_stdlib_strtod+3, 0, 1
$2602	$E102	    			BNZ	L_strtod_88
$2604	$0E00	    			MOVLW	0
$2606	$19CA	    			XORWF	FARG_c_stdlib_strtod+2, 0, 1
$2608	$	L_strtod_88:
$2608	$E00B	    			BZ	L_c_stdlib_strtod_32
$260A	$0101	    			MOVLB	1
$260C	$A3CC	    			BTFSS	c_stdlib_strtod_flags_L0, 1, 1
$260E	$D008	    			BRA	L_c_stdlib_strtod_32
$2610	$	L191_ex_L_c_stdlib_strtod_32:
$2610	$C1CA	FFE1			MOVFF	FARG_c_stdlib_strtod+2, FSR1L
$2614	$C1CB	FFE2			MOVFF	FARG_c_stdlib_strtod+3, FSR1H
$2618	$C1C8	FFE6			MOVFF	FARG_c_stdlib_strtod+0, POSTINC1
$261C	$C1C9	FFE6			MOVFF	FARG_c_stdlib_strtod+1, POSTINC1
$2620	$	L_c_stdlib_strtod_32:
$2620	$0101	    			MOVLB	1
$2622	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$2626	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$262A	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$262E	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$2632	$EC8D	F005			CALL	_longint2double
$2636	$C000	F1CF			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$263A	$C001	F1D0			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$263E	$C002	F1D1			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$2642	$C003	F1D2			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$2646	$6A04	    			CLRF	STACK_4, 0
$2648	$6A05	    			CLRF	STACK_4+1, 0
$264A	$6A06	    			CLRF	STACK_4+2, 0
$264C	$6A07	    			CLRF	STACK_4+3, 0
$264E	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$2652	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$2656	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$265A	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$265E	$EC67	F00F			CALL	_equals_double
$2662	$0E01	    			MOVLW	1
$2664	$A4D8	    			BTFSS	STATUS, Z, 0
$2666	$0E00	    			MOVLW	0
$2668	$6E00	    			MOVWF	STACK_0, 0
$266A	$5200	    			MOVF	STACK_0, 1, 0
$266C	$E005	    			BZ	L_c_stdlib_strtod_33
$266E	$6A00	    			CLRF	STACK_0, 0
$2670	$6A01	    			CLRF	STACK_0+1, 0
$2672	$6A02	    			CLRF	STACK_0+2, 0
$2674	$6A03	    			CLRF	STACK_0+3, 0
$2676	$0012	    			RETURN
$2678	$	L_c_stdlib_strtod_33:
$2678	$0E80	    			MOVLW	128
$267A	$0101	    			MOVLB	1
$267C	$19CD	    			XORWF	c_stdlib_strtod_expon_L0, 0, 1
$267E	$6E00	    			MOVWF	STACK_0, 0
$2680	$0E80	    			MOVLW	128
$2682	$0A00	    			XORLW	0
$2684	$5C00	    			SUBWF	STACK_0, 0, 0
$2686	$B0D8	    			BTFSC	STATUS, C, 0
$2688	$D07B	    			BRA	L_c_stdlib_strtod_34
$268A	$51CD	    			MOVF	c_stdlib_strtod_expon_L0, 0, 1
$268C	$0800	    			SUBLW	0
$268E	$6FCD	    			MOVWF	c_stdlib_strtod_expon_L0, 1
$2690	$	L_c_stdlib_strtod_35:
$2690	$0E80	    			MOVLW	128
$2692	$0101	    			MOVLB	1
$2694	$19CD	    			XORWF	c_stdlib_strtod_expon_L0, 0, 1
$2696	$6E00	    			MOVWF	STACK_0, 0
$2698	$0E80	    			MOVLW	128
$269A	$0A0A	    			XORLW	10
$269C	$5C00	    			SUBWF	STACK_0, 0, 0
$269E	$E31E	    			BNC	L_c_stdlib_strtod_36
$26A0	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$26A4	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$26A8	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$26AC	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$26B0	$0EFF	    			MOVLW	255
$26B2	$6E04	    			MOVWF	STACK_4, 0
$26B4	$0EE6	    			MOVLW	230
$26B6	$6E05	    			MOVWF	STACK_4+1, 0
$26B8	$0E5B	    			MOVLW	91
$26BA	$6E06	    			MOVWF	STACK_4+2, 0
$26BC	$0E5D	    			MOVLW	93
$26BE	$6E07	    			MOVWF	STACK_4+3, 0
$26C0	$EC05	F006			CALL	_mul_32x32_fp
$26C4	$C000	F1CF			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$26C8	$C001	F1D0			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$26CC	$C002	F1D1			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$26D0	$C003	F1D2			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$26D4	$0E0A	    			MOVLW	10
$26D6	$0101	    			MOVLB	1
$26D8	$5FCD	    			SUBWF	c_stdlib_strtod_expon_L0, 1, 1
$26DA	$D7DA	    			BRA	L_c_stdlib_strtod_35
$26DC	$	L_c_stdlib_strtod_36:
$26DC	$	L_c_stdlib_strtod_37:
$26DC	$0101	    			MOVLB	1
$26DE	$51CD	    			MOVF	c_stdlib_strtod_expon_L0, 0, 1
$26E0	$0A00	    			XORLW	0
$26E2	$E01D	    			BZ	L_c_stdlib_strtod_38
$26E4	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$26E8	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$26EC	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$26F0	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$26F4	$0ECD	    			MOVLW	205
$26F6	$6E04	    			MOVWF	STACK_4, 0
$26F8	$0ECC	    			MOVLW	204
$26FA	$6E05	    			MOVWF	STACK_4+1, 0
$26FC	$0E4C	    			MOVLW	76
$26FE	$6E06	    			MOVWF	STACK_4+2, 0
$2700	$0E7B	    			MOVLW	123
$2702	$6E07	    			MOVWF	STACK_4+3, 0
$2704	$EC05	F006			CALL	_mul_32x32_fp
$2708	$C000	F1CF			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$270C	$C001	F1D0			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$2710	$C002	F1D1			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$2714	$C003	F1D2			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$2718	$0101	    			MOVLB	1
$271A	$07CD	    			DECF	c_stdlib_strtod_expon_L0, 1, 1
$271C	$D7DF	    			BRA	L_c_stdlib_strtod_37
$271E	$	L_c_stdlib_strtod_38:
$271E	$0E01	    			MOVLW	1
$2720	$6E04	    			MOVWF	STACK_4, 0
$2722	$0E00	    			MOVLW	0
$2724	$6E05	    			MOVWF	STACK_4+1, 0
$2726	$0E00	    			MOVLW	0
$2728	$6E06	    			MOVWF	STACK_4+2, 0
$272A	$0E01	    			MOVLW	1
$272C	$6E07	    			MOVWF	STACK_4+3, 0
$272E	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$2732	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$2736	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$273A	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$273E	$EC8B	F004			CALL	_compare_double
$2742	$0E01	    			MOVLW	1
$2744	$B0D8	    			BTFSC	STATUS, C, 0
$2746	$0E00	    			MOVLW	0
$2748	$6E00	    			MOVWF	STACK_0, 0
$274A	$5200	    			MOVF	STACK_0, 1, 0
$274C	$E017	    			BZ	L_c_stdlib_strtod_39
$274E	$0E01	    			MOVLW	1
$2750	$0101	    			MOVLB	1
$2752	$15CC	    			ANDWF	c_stdlib_strtod_flags_L0, 0, 1
$2754	$6E00	    			MOVWF	STACK_0, 0
$2756	$E009	    			BZ	L_c_stdlib_strtod_40
$2758	$0E01	    			MOVLW	1
$275A	$6E00	    			MOVWF	STACK_0, 0
$275C	$0E00	    			MOVLW	0
$275E	$6E01	    			MOVWF	STACK_0+1, 0
$2760	$0E80	    			MOVLW	128
$2762	$6E02	    			MOVWF	STACK_0+2, 0
$2764	$0E03	    			MOVLW	3
$2766	$6E03	    			MOVWF	STACK_0+3, 0
$2768	$0012	    			RETURN
$276A	$	L_c_stdlib_strtod_40:
$276A	$0E01	    			MOVLW	1
$276C	$6E00	    			MOVWF	STACK_0, 0
$276E	$0E00	    			MOVLW	0
$2770	$6E01	    			MOVWF	STACK_0+1, 0
$2772	$0E00	    			MOVLW	0
$2774	$6E02	    			MOVWF	STACK_0+2, 0
$2776	$0E01	    			MOVLW	1
$2778	$6E03	    			MOVWF	STACK_0+3, 0
$277A	$0012	    			RETURN
$277C	$	L_c_stdlib_strtod_39:
$277C	$0101	    			MOVLB	1
$277E	$D07A	    			BRA	L_c_stdlib_strtod_42
$2780	$	L_c_stdlib_strtod_34:
$2780	$0E80	    			MOVLW	128
$2782	$0A00	    			XORLW	0
$2784	$6E00	    			MOVWF	STACK_0, 0
$2786	$0E80	    			MOVLW	128
$2788	$0101	    			MOVLB	1
$278A	$19CD	    			XORWF	c_stdlib_strtod_expon_L0, 0, 1
$278C	$5C00	    			SUBWF	STACK_0, 0, 0
$278E	$E272	    			BC	L_c_stdlib_strtod_43
$2790	$	L_c_stdlib_strtod_44:
$2790	$0E0A	    			MOVLW	10
$2792	$0101	    			MOVLB	1
$2794	$5DCD	    			SUBWF	c_stdlib_strtod_expon_L0, 0, 1
$2796	$E31E	    			BNC	L_c_stdlib_strtod_45
$2798	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$279C	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$27A0	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$27A4	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$27A8	$0EF9	    			MOVLW	249
$27AA	$6E04	    			MOVWF	STACK_4, 0
$27AC	$0E02	    			MOVLW	2
$27AE	$6E05	    			MOVWF	STACK_4+1, 0
$27B0	$0E15	    			MOVLW	21
$27B2	$6E06	    			MOVWF	STACK_4+2, 0
$27B4	$0EA0	    			MOVLW	160
$27B6	$6E07	    			MOVWF	STACK_4+3, 0
$27B8	$EC05	F006			CALL	_mul_32x32_fp
$27BC	$C000	F1CF			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$27C0	$C001	F1D0			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$27C4	$C002	F1D1			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$27C8	$C003	F1D2			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$27CC	$0E0A	    			MOVLW	10
$27CE	$0101	    			MOVLB	1
$27D0	$5FCD	    			SUBWF	c_stdlib_strtod_expon_L0, 1, 1
$27D2	$D7DE	    			BRA	L_c_stdlib_strtod_44
$27D4	$	L_c_stdlib_strtod_45:
$27D4	$	L_c_stdlib_strtod_46:
$27D4	$0101	    			MOVLB	1
$27D6	$51CD	    			MOVF	c_stdlib_strtod_expon_L0, 0, 1
$27D8	$0A00	    			XORLW	0
$27DA	$E01D	    			BZ	L_c_stdlib_strtod_47
$27DC	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$27E0	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$27E4	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$27E8	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$27EC	$0E00	    			MOVLW	0
$27EE	$6E04	    			MOVWF	STACK_4, 0
$27F0	$0E00	    			MOVLW	0
$27F2	$6E05	    			MOVWF	STACK_4+1, 0
$27F4	$0E20	    			MOVLW	32
$27F6	$6E06	    			MOVWF	STACK_4+2, 0
$27F8	$0E82	    			MOVLW	130
$27FA	$6E07	    			MOVWF	STACK_4+3, 0
$27FC	$EC05	F006			CALL	_mul_32x32_fp
$2800	$C000	F1CF			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$2804	$C001	F1D0			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$2808	$C002	F1D1			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$280C	$C003	F1D2			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$2810	$0101	    			MOVLB	1
$2812	$07CD	    			DECF	c_stdlib_strtod_expon_L0, 1, 1
$2814	$D7DF	    			BRA	L_c_stdlib_strtod_46
$2816	$	L_c_stdlib_strtod_47:
$2816	$C1CF	F004			MOVFF	c_stdlib_strtod__u_L0, STACK_4
$281A	$C1D0	F005			MOVFF	c_stdlib_strtod__u_L0+1, STACK_4+1
$281E	$C1D1	F006			MOVFF	c_stdlib_strtod__u_L0+2, STACK_4+2
$2822	$C1D2	F007			MOVFF	c_stdlib_strtod__u_L0+3, STACK_4+3
$2826	$0EFF	    			MOVLW	255
$2828	$6E00	    			MOVWF	STACK_0, 0
$282A	$0EFF	    			MOVLW	255
$282C	$6E01	    			MOVWF	STACK_0+1, 0
$282E	$0E7F	    			MOVLW	127
$2830	$6E02	    			MOVWF	STACK_0+2, 0
$2832	$0EFF	    			MOVLW	255
$2834	$6E03	    			MOVWF	STACK_0+3, 0
$2836	$EC8B	F004			CALL	_compare_double
$283A	$0E01	    			MOVLW	1
$283C	$B0D8	    			BTFSC	STATUS, C, 0
$283E	$0E00	    			MOVLW	0
$2840	$6E00	    			MOVWF	STACK_0, 0
$2842	$5200	    			MOVF	STACK_0, 1, 0
$2844	$E017	    			BZ	L_c_stdlib_strtod_48
$2846	$0E01	    			MOVLW	1
$2848	$0101	    			MOVLB	1
$284A	$15CC	    			ANDWF	c_stdlib_strtod_flags_L0, 0, 1
$284C	$6E00	    			MOVWF	STACK_0, 0
$284E	$E009	    			BZ	L_c_stdlib_strtod_49
$2850	$0EFF	    			MOVLW	255
$2852	$6E00	    			MOVWF	STACK_0, 0
$2854	$0EFF	    			MOVLW	255
$2856	$6E01	    			MOVWF	STACK_0+1, 0
$2858	$0EFF	    			MOVLW	255
$285A	$6E02	    			MOVWF	STACK_0+2, 0
$285C	$0EFF	    			MOVLW	255
$285E	$6E03	    			MOVWF	STACK_0+3, 0
$2860	$0012	    			RETURN
$2862	$	L_c_stdlib_strtod_49:
$2862	$0EFF	    			MOVLW	255
$2864	$6E00	    			MOVWF	STACK_0, 0
$2866	$0EFF	    			MOVLW	255
$2868	$6E01	    			MOVWF	STACK_0+1, 0
$286A	$0E7F	    			MOVLW	127
$286C	$6E02	    			MOVWF	STACK_0+2, 0
$286E	$0EFF	    			MOVLW	255
$2870	$6E03	    			MOVWF	STACK_0+3, 0
$2872	$0012	    			RETURN
$2874	$	L_c_stdlib_strtod_48:
$2874	$	L_c_stdlib_strtod_43:
$2874	$	L_c_stdlib_strtod_42:
$2874	$0101	    			MOVLB	1
$2876	$0E01	    			MOVLW	1
$2878	$0101	    			MOVLB	1
$287A	$15CC	    			ANDWF	c_stdlib_strtod_flags_L0, 0, 1
$287C	$6E00	    			MOVWF	STACK_0, 0
$287E	$E00D	    			BZ	L_c_stdlib_strtod_51
$2880	$0E00	    			MOVLW	0
$2882	$19CF	    			XORWF	c_stdlib_strtod__u_L0, 0, 1
$2884	$6E00	    			MOVWF	STACK_0, 0
$2886	$0E00	    			MOVLW	0
$2888	$19D0	    			XORWF	c_stdlib_strtod__u_L0+1, 0, 1
$288A	$6E01	    			MOVWF	STACK_0+1, 0
$288C	$0E80	    			MOVLW	128
$288E	$19D1	    			XORWF	c_stdlib_strtod__u_L0+2, 0, 1
$2890	$6E02	    			MOVWF	STACK_0+2, 0
$2892	$0E00	    			MOVLW	0
$2894	$19D2	    			XORWF	c_stdlib_strtod__u_L0+3, 0, 1
$2896	$6E03	    			MOVWF	STACK_0+3, 0
$2898	$0012	    			RETURN
$289A	$	L_c_stdlib_strtod_51:
$289A	$C1CF	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$289E	$C1D0	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$28A2	$C1D1	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$28A6	$C1D2	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$28AA	$0012	    			RETURN
$28AC	$	_strConstCpy:
;extruder.c,310 :: 			void strConstCpy(char *dest, const char *source) {
;extruder.c,311 :: 			while(*source){
$28AC	$	L_strConstCpy_0:
$28AC	$C1B3	FFF6			MOVFF	FARG_strConstCpy+2, TBLPTRL
$28B0	$C1B4	FFF7			MOVFF	FARG_strConstCpy+3, TBLPTRH
$28B4	$C1B5	FFF8			MOVFF	FARG_strConstCpy+4, TBLPTRU
$28B8	$0009	    			TBLRD*+
$28BA	$CFF5	F000			MOVFF	TABLAT, STACK_0
$28BE	$5200	    			MOVF	STACK_0, 1, 0
$28C0	$E01D	    			BZ	L_strConstCpy_1
;extruder.c,312 :: 			*dest++ = *source++ ;
$28C2	$C1B3	FFF6			MOVFF	FARG_strConstCpy+2, TBLPTRL
$28C6	$C1B4	FFF7			MOVFF	FARG_strConstCpy+3, TBLPTRH
$28CA	$C1B5	FFF8			MOVFF	FARG_strConstCpy+4, TBLPTRU
$28CE	$0009	    			TBLRD*+
$28D0	$CFF5	F000			MOVFF	TABLAT, STACK_0
$28D4	$C1B1	FFE1			MOVFF	FARG_strConstCpy+0, FSR1L
$28D8	$C1B2	FFE2			MOVFF	FARG_strConstCpy+1, FSR1H
$28DC	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$28E0	$0101	    			MOVLB	1
$28E2	$4BB1	    			INFSNZ	FARG_strConstCpy+0, 1, 1
$28E4	$2BB2	    			INCF	FARG_strConstCpy+1, 1, 1
$28E6	$0E01	    			MOVLW	1
$28E8	$27B3	    			ADDWF	FARG_strConstCpy+2, 1, 1
$28EA	$0E00	    			MOVLW	0
$28EC	$23B4	    			ADDWFC	FARG_strConstCpy+3, 1, 1
$28EE	$23B5	    			ADDWFC	FARG_strConstCpy+4, 1, 1
;extruder.c,313 :: 			*dest = 0 ;
$28F0	$C1B1	FFE1			MOVFF	FARG_strConstCpy+0, FSR1L
$28F4	$C1B2	FFE2			MOVFF	FARG_strConstCpy+1, FSR1H
$28F8	$6AE6	    			CLRF	POSTINC1, 0
;extruder.c,314 :: 			}
$28FA	$D7D8	    			BRA	L_strConstCpy_0
$28FC	$	L_strConstCpy_1:
;extruder.c,315 :: 			}
$28FC	$0012	    			RETURN
$28FE	$	_Eeprom_Read_Obj:
;eeprom.c,10 :: 			void Eeprom_Read_Obj(word addr,void *obj,byte size)
;eeprom.c,12 :: 			byte i,*ptr=obj;
$28FE	$C1B3	F1B7			MOVFF	FARG_Eeprom_Read_Obj+2, Eeprom_Read_Obj_ptr_L0
$2902	$C1B4	F1B8			MOVFF	FARG_Eeprom_Read_Obj+3, Eeprom_Read_Obj_ptr_L0+1
;eeprom.c,13 :: 			for (i=0;i<size;i++)
$2906	$0101	    			MOVLB	1
$2908	$6BB6	    			CLRF	Eeprom_Read_Obj_i_L0, 1
$290A	$	L_Eeprom_Read_Obj_3:
$290A	$0101	    			MOVLB	1
$290C	$51B5	    			MOVF	FARG_Eeprom_Read_Obj+4, 0, 1
$290E	$5DB6	    			SUBWF	Eeprom_Read_Obj_i_L0, 0, 1
$2910	$E212	    			BC	L_Eeprom_Read_Obj_4
;eeprom.c,14 :: 			*(ptr++)=Eeprom_Read(addr++);
$2912	$C1B1	F060			MOVFF	FARG_Eeprom_Read_Obj+0, FARG_Eeprom_Read+0
$2916	$EC7F	F00F			CALL	_Eeprom_Read
$291A	$C1B7	FFE1			MOVFF	Eeprom_Read_Obj_ptr_L0, FSR1L
$291E	$C1B8	FFE2			MOVFF	Eeprom_Read_Obj_ptr_L0+1, FSR1H
$2922	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$2926	$0101	    			MOVLB	1
$2928	$4BB7	    			INFSNZ	Eeprom_Read_Obj_ptr_L0, 1, 1
$292A	$2BB8	    			INCF	Eeprom_Read_Obj_ptr_L0+1, 1, 1
$292C	$4BB1	    			INFSNZ	FARG_Eeprom_Read_Obj+0, 1, 1
$292E	$2BB2	    			INCF	FARG_Eeprom_Read_Obj+1, 1, 1
$2930	$	L_Eeprom_Read_Obj_5:
;eeprom.c,13 :: 			for (i=0;i<size;i++)
$2930	$0101	    			MOVLB	1
$2932	$2BB6	    			INCF	Eeprom_Read_Obj_i_L0, 1, 1
;eeprom.c,14 :: 			*(ptr++)=Eeprom_Read(addr++);
$2934	$D7EA	    			BRA	L_Eeprom_Read_Obj_3
$2936	$	L_Eeprom_Read_Obj_4:
;eeprom.c,15 :: 			}
$2936	$0012	    			RETURN
$2938	$	_printFloat:
$2938	$0E2C	    			MOVLW	44
$293A	$0101	    			MOVLB	1
$293C	$6FB7	    			MOVWF	lstr4_extruder+0, 1
$293E	$6BB8	    			CLRF	lstr4_extruder+1, 1
$2940	$0E3D	    			MOVLW	61
$2942	$6FB9	    			MOVWF	lstr5_extruder+0, 1
$2944	$6BBA	    			CLRF	lstr5_extruder+1, 1
;extruder.c,742 :: 			void printFloat( char* name, float f ){
;extruder.c,745 :: 			FloatToStr(f,floatTxt);
$2946	$C1B3	F1C8			MOVFF	FARG_printFloat+2, FARG_FloatToStr+0
$294A	$C1B4	F1C9			MOVFF	FARG_printFloat+3, FARG_FloatToStr+1
$294E	$C1B5	F1CA			MOVFF	FARG_printFloat+4, FARG_FloatToStr+2
$2952	$C1B6	F1CB			MOVFF	FARG_printFloat+5, FARG_FloatToStr+3
$2956	$0EBB	    			MOVLW	printFloat_floatTxt_L0
$2958	$6FCC	    			MOVWF	FARG_FloatToStr+4, 1
$295A	$0E01	    			MOVLW	@printFloat_floatTxt_L0
$295C	$6FCD	    			MOVWF	FARG_FloatToStr+5, 1
$295E	$EC87	F00F			CALL	_FloatToStr
;extruder.c,746 :: 			USART_Send_String(COMMA);
$2962	$0EB7	    			MOVLW	lstr4_extruder
$2964	$0101	    			MOVLB	1
$2966	$6FC8	    			MOVWF	FARG_USART_Send_String+0, 1
$2968	$0E01	    			MOVLW	@lstr4_extruder
$296A	$6FC9	    			MOVWF	FARG_USART_Send_String+1, 1
$296C	$EC7A	F011			CALL	_USART_Send_String
;extruder.c,747 :: 			USART_Send_String(name);
$2970	$C1B1	F1C8			MOVFF	FARG_printFloat+0, FARG_USART_Send_String+0
$2974	$C1B2	F1C9			MOVFF	FARG_printFloat+1, FARG_USART_Send_String+1
$2978	$EC7A	F011			CALL	_USART_Send_String
;extruder.c,748 :: 			USART_Send_String(EQUALS);
$297C	$0EB9	    			MOVLW	lstr5_extruder
$297E	$0101	    			MOVLB	1
$2980	$6FC8	    			MOVWF	FARG_USART_Send_String+0, 1
$2982	$0E01	    			MOVLW	@lstr5_extruder
$2984	$6FC9	    			MOVWF	FARG_USART_Send_String+1, 1
$2986	$EC7A	F011			CALL	_USART_Send_String
;extruder.c,749 :: 			USART_Send_String(floatTxt);
$298A	$0EBB	    			MOVLW	printFloat_floatTxt_L0
$298C	$0101	    			MOVLB	1
$298E	$6FC8	    			MOVWF	FARG_USART_Send_String+0, 1
$2990	$0E01	    			MOVLW	@printFloat_floatTxt_L0
$2992	$6FC9	    			MOVWF	FARG_USART_Send_String+1, 1
$2994	$EC7A	F011			CALL	_USART_Send_String
;extruder.c,751 :: 			}
$2998	$0012	    			RETURN
$299A	$	_Byte2Double:
$299A	$0100	    			MOVLB	0
$299C	$C000	F008			MOVFF	STACK_0, STACK_8
$29A0	$	FLO08U32:
$29A0	$6A0B	    			CLRF	STACK_11, 0
$29A2	$6A0C	    			CLRF	STACK_12, 0
$29A4	$0E9E	    			MOVLW	0x9E
$29A6	$6E03	    			MOVWF	STACK_3, 0
$29A8	$6A0A	    			CLRF	STACK_10, 0
$29AA	$6A02	    			CLRF	STACK_2, 0
$29AC	$6A01	    			CLRF	STACK_1, 0
$29AE	$6A00	    			CLRF	STACK_0, 0
$29B0	$0E02	    			MOVLW	0x02
$29B2	$6E0C	    			MOVWF	STACK_12, 0
$29B4	$EC35	F001			CALL	_NRM4032
$29B8	$0012	    			RETURN
$29BA	$	_Eeprom_Write_Obj:
;eeprom.c,3 :: 			void Eeprom_Write_Obj(word addr,void *obj,byte size)
;eeprom.c,5 :: 			byte i,*ptr=(byte *)obj;
$29BA	$C1B3	F1B7			MOVFF	FARG_Eeprom_Write_Obj+2, Eeprom_Write_Obj_ptr_L0
$29BE	$C1B4	F1B8			MOVFF	FARG_Eeprom_Write_Obj+3, Eeprom_Write_Obj_ptr_L0+1
;eeprom.c,6 :: 			for (i=0;i<size;i++)
$29C2	$0101	    			MOVLB	1
$29C4	$6BB6	    			CLRF	Eeprom_Write_Obj_i_L0, 1
$29C6	$	L_Eeprom_Write_Obj_0:
$29C6	$51B5	    			MOVF	FARG_Eeprom_Write_Obj+4, 0, 1
$29C8	$5DB6	    			SUBWF	Eeprom_Write_Obj_i_L0, 0, 1
$29CA	$E212	    			BC	L_Eeprom_Write_Obj_1
;eeprom.c,7 :: 			Eeprom_Write(addr++,*(ptr++));
$29CC	$C1B1	F1C8			MOVFF	FARG_Eeprom_Write_Obj+0, FARG_Eeprom_Write+0
$29D0	$C1B7	FFE9			MOVFF	Eeprom_Write_Obj_ptr_L0, FSR0L
$29D4	$C1B8	FFEA			MOVFF	Eeprom_Write_Obj_ptr_L0+1, FSR0H
$29D8	$CFEE	F1C9			MOVFF	POSTINC0, FARG_Eeprom_Write+1
$29DC	$EC90	F011			CALL	_Eeprom_Write
$29E0	$0101	    			MOVLB	1
$29E2	$4BB1	    			INFSNZ	FARG_Eeprom_Write_Obj+0, 1, 1
$29E4	$2BB2	    			INCF	FARG_Eeprom_Write_Obj+1, 1, 1
$29E6	$4BB7	    			INFSNZ	Eeprom_Write_Obj_ptr_L0, 1, 1
$29E8	$2BB8	    			INCF	Eeprom_Write_Obj_ptr_L0+1, 1, 1
$29EA	$	L_Eeprom_Write_Obj_2:
;eeprom.c,6 :: 			for (i=0;i<size;i++)
$29EA	$0101	    			MOVLB	1
$29EC	$2BB6	    			INCF	Eeprom_Write_Obj_i_L0, 1, 1
;eeprom.c,7 :: 			Eeprom_Write(addr++,*(ptr++));
$29EE	$D7EB	    			BRA	L_Eeprom_Write_Obj_0
$29F0	$	L_Eeprom_Write_Obj_1:
;eeprom.c,8 :: 			}
$29F0	$0012	    			RETURN
$29F2	$	_strchr:
$29F2	$	L_strchr_24:
$29F2	$C1B1	FFE9			MOVFF	FARG_strchr+0, FSR0L
$29F6	$C1B2	FFEA			MOVFF	FARG_strchr+1, FSR0H
$29FA	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$29FE	$5002	    			MOVF	STACK_2, 0, 0
$2A00	$0101	    			MOVLB	1
$2A02	$19B3	    			XORWF	FARG_strchr+2, 0, 1
$2A04	$E105	    			BNZ	L_strchr_26
$2A06	$C1B1	F000			MOVFF	FARG_strchr+0, STACK_0
$2A0A	$C1B2	F001			MOVFF	FARG_strchr+1, STACK_0+1
$2A0E	$0012	    			RETURN
$2A10	$	L_strchr_26:
$2A10	$0101	    			MOVLB	1
$2A12	$4BB1	    			INFSNZ	FARG_strchr+0, 1, 1
$2A14	$2BB2	    			INCF	FARG_strchr+1, 1, 1
$2A16	$C1B1	FFE9			MOVFF	FARG_strchr+0, FSR0L
$2A1A	$C1B2	FFEA			MOVFF	FARG_strchr+1, FSR0H
$2A1E	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2A22	$5200	    			MOVF	STACK_0, 1, 0
$2A24	$E1E6	    			BNZ	L_strchr_24
$2A26	$	L_strchr_25:
$2A26	$6A00	    			CLRF	STACK_0, 0
$2A28	$6A01	    			CLRF	STACK_0+1, 0
$2A2A	$0012	    			RETURN
$2A2C	$	_atoi:
$2A2C	$	___atoi_skipws_atoi:
$2A2C	$C1B1	FFE9			MOVFF	FARG_atoi+0, FSR0L
$2A30	$C1B2	FFEA			MOVFF	FARG_atoi+1, FSR0H
$2A34	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$2A38	$C002	F1B3			MOVFF	STACK_2, atoi_c_L0
$2A3C	$5002	    			MOVF	STACK_2, 0, 0
$2A3E	$0A20	    			XORLW	32
$2A40	$E004	    			BZ	L256_ex_L_atoi_55
$2A42	$0101	    			MOVLB	1
$2A44	$51B3	    			MOVF	atoi_c_L0, 0, 1
$2A46	$0A09	    			XORLW	9
$2A48	$E104	    			BNZ	L_atoi_55
$2A4A	$	L256_ex_L_atoi_55:
$2A4A	$0101	    			MOVLB	1
$2A4C	$4BB1	    			INFSNZ	FARG_atoi+0, 1, 1
$2A4E	$2BB2	    			INCF	FARG_atoi+1, 1, 1
$2A50	$D7ED	    			BRA	___atoi_skipws_atoi
$2A52	$	L_atoi_55:
$2A52	$0101	    			MOVLB	1
$2A54	$6BB4	    			CLRF	atoi_a_L0, 1
$2A56	$6BB5	    			CLRF	atoi_a_L0+1, 1
$2A58	$6BB6	    			CLRF	atoi_sign_L0, 1
$2A5A	$51B3	    			MOVF	atoi_c_L0, 0, 1
$2A5C	$0A2D	    			XORLW	45
$2A5E	$E104	    			BNZ	L_atoi_56
$2A60	$2BB6	    			INCF	atoi_sign_L0, 1, 1
$2A62	$4BB1	    			INFSNZ	FARG_atoi+0, 1, 1
$2A64	$2BB2	    			INCF	FARG_atoi+1, 1, 1
$2A66	$D006	    			BRA	L_atoi_57
$2A68	$	L_atoi_56:
$2A68	$0101	    			MOVLB	1
$2A6A	$51B3	    			MOVF	atoi_c_L0, 0, 1
$2A6C	$0A2B	    			XORLW	43
$2A6E	$E102	    			BNZ	L_atoi_58
$2A70	$4BB1	    			INFSNZ	FARG_atoi+0, 1, 1
$2A72	$2BB2	    			INCF	FARG_atoi+1, 1, 1
$2A74	$	L_atoi_58:
$2A74	$	L_atoi_57:
$2A74	$	___atoi_conv_atoi:
$2A74	$C1B1	FFE9			MOVFF	FARG_atoi+0, FSR0L
$2A78	$C1B2	FFEA			MOVFF	FARG_atoi+1, FSR0H
$2A7C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2A80	$C000	F1B3			MOVFF	STACK_0, atoi_c_L0
$2A84	$C000	F1E0			MOVFF	STACK_0, FARG_isdigit+0
$2A88	$EC5A	F00F			CALL	_isdigit
$2A8C	$5200	    			MOVF	STACK_0, 1, 0
$2A8E	$E01A	    			BZ	L_atoi_59
$2A90	$C1B4	F000			MOVFF	atoi_a_L0, STACK_0
$2A94	$C1B5	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$2A98	$0E0A	    			MOVLW	10
$2A9A	$6E04	    			MOVWF	STACK_4, 0
$2A9C	$0E00	    			MOVLW	0
$2A9E	$6E05	    			MOVWF	STACK_4+1, 0
$2AA0	$ECA4	F011			CALL	_mul_16x16_s
$2AA4	$0E30	    			MOVLW	48
$2AA6	$0101	    			MOVLB	1
$2AA8	$5DB3	    			SUBWF	atoi_c_L0, 0, 1
$2AAA	$6E02	    			MOVWF	STACK_2, 0
$2AAC	$6A03	    			CLRF	STACK_2+1, 0
$2AAE	$0E00	    			MOVLW	0
$2AB0	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$2AB2	$5002	    			MOVF	STACK_2, 0, 0
$2AB4	$2400	    			ADDWF	STACK_0, 0, 0
$2AB6	$6FB4	    			MOVWF	atoi_a_L0, 1
$2AB8	$5003	    			MOVF	STACK_2+1, 0, 0
$2ABA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2ABC	$6FB5	    			MOVWF	atoi_a_L0+1, 1
$2ABE	$4BB1	    			INFSNZ	FARG_atoi+0, 1, 1
$2AC0	$2BB2	    			INCF	FARG_atoi+1, 1, 1
$2AC2	$D7D8	    			BRA	___atoi_conv_atoi
$2AC4	$	L_atoi_59:
$2AC4	$0101	    			MOVLB	1
$2AC6	$53B6	    			MOVF	atoi_sign_L0, 1, 1
$2AC8	$E008	    			BZ	L_atoi_60
$2ACA	$51B4	    			MOVF	atoi_a_L0, 0, 1
$2ACC	$0800	    			SUBLW	0
$2ACE	$6E00	    			MOVWF	STACK_0, 0
$2AD0	$C1B5	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$2AD4	$6AE8	    			CLRF	WREG, 0
$2AD6	$5601	    			SUBFWB	STACK_0+1, 1, 0
$2AD8	$0012	    			RETURN
$2ADA	$	L_atoi_60:
$2ADA	$C1B4	F000			MOVFF	atoi_a_L0, STACK_0
$2ADE	$C1B5	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$2AE2	$0012	    			RETURN
$2AE4	$	_atof:
$2AE4	$C1B1	F1C8			MOVFF	FARG_atof+0, FARG_c_stdlib_strtod+0
$2AE8	$C1B2	F1C9			MOVFF	FARG_atof+1, FARG_c_stdlib_strtod+1
$2AEC	$0101	    			MOVLB	1
$2AEE	$6BCA	    			CLRF	FARG_c_stdlib_strtod+2, 1
$2AF0	$6BCB	    			CLRF	FARG_c_stdlib_strtod+3, 1
$2AF2	$ECD8	F011			CALL	c_stdlib_strtod
$2AF6	$0012	    			RETURN
$2AF8	$	_atol:
$2AF8	$	___atol_skipws_atol:
$2AF8	$C1B1	FFE9			MOVFF	FARG_atol+0, FSR0L
$2AFC	$C1B2	FFEA			MOVFF	FARG_atol+1, FSR0H
$2B00	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2B04	$C004	F1B3			MOVFF	STACK_4, atol_c_L0
$2B08	$5004	    			MOVF	STACK_4, 0, 0
$2B0A	$0A20	    			XORLW	32
$2B0C	$E004	    			BZ	L303_ex_L_atol_63
$2B0E	$0101	    			MOVLB	1
$2B10	$51B3	    			MOVF	atol_c_L0, 0, 1
$2B12	$0A09	    			XORLW	9
$2B14	$E104	    			BNZ	L_atol_63
$2B16	$	L303_ex_L_atol_63:
$2B16	$0101	    			MOVLB	1
$2B18	$4BB1	    			INFSNZ	FARG_atol+0, 1, 1
$2B1A	$2BB2	    			INCF	FARG_atol+1, 1, 1
$2B1C	$D7ED	    			BRA	___atol_skipws_atol
$2B1E	$	L_atol_63:
$2B1E	$0101	    			MOVLB	1
$2B20	$6BB4	    			CLRF	atol_a_L0, 1
$2B22	$6BB5	    			CLRF	atol_a_L0+1, 1
$2B24	$6BB6	    			CLRF	atol_a_L0+2, 1
$2B26	$6BB7	    			CLRF	atol_a_L0+3, 1
$2B28	$6BB8	    			CLRF	atol_sign_L0, 1
$2B2A	$C1B1	FFE9			MOVFF	FARG_atol+0, FSR0L
$2B2E	$C1B2	FFEA			MOVFF	FARG_atol+1, FSR0H
$2B32	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2B36	$5004	    			MOVF	STACK_4, 0, 0
$2B38	$0A2D	    			XORLW	45
$2B3A	$E104	    			BNZ	L_atol_64
$2B3C	$2BB8	    			INCF	atol_sign_L0, 1, 1
$2B3E	$4BB1	    			INFSNZ	FARG_atol+0, 1, 1
$2B40	$2BB2	    			INCF	FARG_atol+1, 1, 1
$2B42	$D00C	    			BRA	L_atol_65
$2B44	$	L_atol_64:
$2B44	$C1B1	FFE9			MOVFF	FARG_atol+0, FSR0L
$2B48	$C1B2	FFEA			MOVFF	FARG_atol+1, FSR0H
$2B4C	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2B50	$5004	    			MOVF	STACK_4, 0, 0
$2B52	$0A2B	    			XORLW	43
$2B54	$E103	    			BNZ	L_atol_66
$2B56	$0101	    			MOVLB	1
$2B58	$4BB1	    			INFSNZ	FARG_atol+0, 1, 1
$2B5A	$2BB2	    			INCF	FARG_atol+1, 1, 1
$2B5C	$	L_atol_66:
$2B5C	$	L_atol_65:
$2B5C	$	___atol_conv_atol:
$2B5C	$0101	    			MOVLB	1
$2B5E	$C1B1	FFE9			MOVFF	FARG_atol+0, FSR0L
$2B62	$C1B2	FFEA			MOVFF	FARG_atol+1, FSR0H
$2B66	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2B6A	$C000	F1B3			MOVFF	STACK_0, atol_c_L0
$2B6E	$C000	F1E0			MOVFF	STACK_0, FARG_isdigit+0
$2B72	$EC5A	F00F			CALL	_isdigit
$2B76	$5200	    			MOVF	STACK_0, 1, 0
$2B78	$E02C	    			BZ	L_atol_67
$2B7A	$C1B4	F000			MOVFF	atol_a_L0, STACK_0
$2B7E	$C1B5	F001			MOVFF	atol_a_L0+1, STACK_0+1
$2B82	$C1B6	F002			MOVFF	atol_a_L0+2, STACK_0+2
$2B86	$C1B7	F003			MOVFF	atol_a_L0+3, STACK_0+3
$2B8A	$0E0A	    			MOVLW	10
$2B8C	$6E04	    			MOVWF	STACK_4, 0
$2B8E	$0E00	    			MOVLW	0
$2B90	$6E05	    			MOVWF	STACK_4+1, 0
$2B92	$0E00	    			MOVLW	0
$2B94	$6E06	    			MOVWF	STACK_4+2, 0
$2B96	$0E00	    			MOVLW	0
$2B98	$6E07	    			MOVWF	STACK_4+3, 0
$2B9A	$ECD3	F007			CALL	_mul_32x32_s
$2B9E	$0E30	    			MOVLW	48
$2BA0	$0101	    			MOVLB	1
$2BA2	$5DB3	    			SUBWF	atol_c_L0, 0, 1
$2BA4	$6E04	    			MOVWF	STACK_4, 0
$2BA6	$6A05	    			CLRF	STACK_4+1, 0
$2BA8	$0E00	    			MOVLW	0
$2BAA	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$2BAC	$5004	    			MOVF	STACK_4, 0, 0
$2BAE	$2400	    			ADDWF	STACK_0, 0, 0
$2BB0	$6FB4	    			MOVWF	atol_a_L0, 1
$2BB2	$5005	    			MOVF	STACK_4+1, 0, 0
$2BB4	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2BB6	$6FB5	    			MOVWF	atol_a_L0+1, 1
$2BB8	$0E00	    			MOVLW	0
$2BBA	$BE05	    			BTFSC	STACK_4+1, 7, 0
$2BBC	$0EFF	    			MOVLW	255
$2BBE	$2002	    			ADDWFC	STACK_0+2, 0, 0
$2BC0	$6FB6	    			MOVWF	atol_a_L0+2, 1
$2BC2	$0E00	    			MOVLW	0
$2BC4	$BE05	    			BTFSC	STACK_4+1, 7, 0
$2BC6	$0EFF	    			MOVLW	255
$2BC8	$2003	    			ADDWFC	STACK_0+3, 0, 0
$2BCA	$6FB7	    			MOVWF	atol_a_L0+3, 1
$2BCC	$4BB1	    			INFSNZ	FARG_atol+0, 1, 1
$2BCE	$2BB2	    			INCF	FARG_atol+1, 1, 1
$2BD0	$D7C5	    			BRA	___atol_conv_atol
$2BD2	$	L_atol_67:
$2BD2	$0101	    			MOVLB	1
$2BD4	$53B8	    			MOVF	atol_sign_L0, 1, 1
$2BD6	$E00D	    			BZ	L_atol_68
$2BD8	$6A00	    			CLRF	STACK_0, 0
$2BDA	$6A01	    			CLRF	STACK_0+1, 0
$2BDC	$6A02	    			CLRF	STACK_0+2, 0
$2BDE	$6A03	    			CLRF	STACK_0+3, 0
$2BE0	$51B4	    			MOVF	atol_a_L0, 0, 1
$2BE2	$5E00	    			SUBWF	STACK_0, 1, 0
$2BE4	$51B5	    			MOVF	atol_a_L0+1, 0, 1
$2BE6	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$2BE8	$51B6	    			MOVF	atol_a_L0+2, 0, 1
$2BEA	$5A02	    			SUBWFB	STACK_0+2, 1, 0
$2BEC	$51B7	    			MOVF	atol_a_L0+3, 0, 1
$2BEE	$5A03	    			SUBWFB	STACK_0+3, 1, 0
$2BF0	$0012	    			RETURN
$2BF2	$	L_atol_68:
$2BF2	$C1B4	F000			MOVFF	atol_a_L0, STACK_0
$2BF6	$C1B5	F001			MOVFF	atol_a_L0+1, STACK_0+1
$2BFA	$C1B6	F002			MOVFF	atol_a_L0+2, STACK_0+2
$2BFE	$C1B7	F003			MOVFF	atol_a_L0+3, STACK_0+3
$2C02	$0012	    			RETURN
$2C04	$	_initDuty:
;duty.c,26 :: 			void initDuty( unsigned short dtyperiod ){
;duty.c,27 :: 			setpoint = 0;
$2C04	$6A1F	    			CLRF	_setpoint, 0
;duty.c,28 :: 			duty_period = dtyperiod;
$2C06	$C05F	F020			MOVFF	FARG_initDuty+0, _duty_period
;duty.c,29 :: 			duty_count = duty_period;
$2C0A	$C05F	F01E			MOVFF	FARG_initDuty+0, _duty_count
;duty.c,30 :: 			}
$2C0E	$0012	    			RETURN
$2C10	$	_initRegisters:
;extruder.c,800 :: 			void initRegisters(){
;extruder.c,803 :: 			PORTB = 0;
$2C10	$6A81	    			CLRF	PORTB, 0
;extruder.c,809 :: 			TRISD = 0b00000100;
$2C12	$0E04	    			MOVLW	4
$2C14	$6E95	    			MOVWF	TRISD, 0
;extruder.c,810 :: 			TRISC = 0b10011011; //RC3 is ext trigger, used for step input. RC0 is dir pin
$2C16	$0E9B	    			MOVLW	155
$2C18	$6E94	    			MOVWF	TRISC, 0
;extruder.c,811 :: 			TRISB = 0b00000000;           // PORTB is output
$2C1A	$6A93	    			CLRF	TRISB, 0
;extruder.c,812 :: 			TRISA = 0b11111111;
$2C1C	$0EFF	    			MOVLW	255
$2C1E	$6E92	    			MOVWF	TRISA, 0
;extruder.c,818 :: 			T0CON = 0b10000000; //256:1 prescaler, internal clock, enable
$2C20	$0E80	    			MOVLW	128
$2C22	$6ED5	    			MOVWF	T0CON, 0
;extruder.c,823 :: 			T1CON = 0b10000101;
$2C24	$0E85	    			MOVLW	133
$2C26	$6ECD	    			MOVWF	T1CON, 0
;extruder.c,826 :: 			ADCON1 = 0x00;
$2C28	$6AC1	    			CLRF	ADCON1, 0
;extruder.c,827 :: 			ANSEL0 = 0b00000011;
$2C2A	$0E03	    			MOVLW	3
$2C2C	$6EB8	    			MOVWF	ANSEL0, 0
;extruder.c,832 :: 			INTCON2.INTEDG0 = 0; //interrupt on rising edge
$2C2E	$9CF1	    			BCF	INTCON2, 6, 0
;extruder.c,835 :: 			INTCON.INT0IE = 1; //enable int0 interrupts
$2C30	$88F2	    			BSF	INTCON, 4, 0
;extruder.c,846 :: 			INTCON.TMR0IE = 1; //enable timer0 interrupts
$2C32	$8AF2	    			BSF	INTCON, 5, 0
;extruder.c,847 :: 			INTCON2.TMR0IP = 0; //timer 0 low priority
$2C34	$94F1	    			BCF	INTCON2, 2, 0
;extruder.c,848 :: 			PIE1.TMR1IE = 1; //enable timer1 interrupts
$2C36	$809D	    			BSF	PIE1, 0, 0
;extruder.c,849 :: 			IPR1.TMR1IP = 0; //timer 1 low priority
$2C38	$909F	    			BCF	IPR1, 0, 0
;extruder.c,858 :: 			SSPSTAT = 0b01000000;
$2C3A	$0E40	    			MOVLW	64
$2C3C	$6EC7	    			MOVWF	SSPSTAT, 0
;extruder.c,862 :: 			SSPCON=0b00100001;
$2C3E	$0E21	    			MOVLW	33
$2C40	$6EC6	    			MOVWF	SSPCON, 0
;extruder.c,864 :: 			SSPCON.SSPEN = 1; //0=input pins, 1=spi port
$2C42	$8AC6	    			BSF	SSPCON, 5, 0
;extruder.c,865 :: 			PIR1.SSPIF = 0;
$2C44	$969E	    			BCF	PIR1, 3, 0
;extruder.c,868 :: 			PIE1.SSPIE = 0;
$2C46	$969D	    			BCF	PIE1, 3, 0
;extruder.c,871 :: 			PIE3.PTIE = 0;
$2C48	$98A3	    			BCF	PIE3, 4, 0
;extruder.c,877 :: 			QEICON = 0b10011000;
$2C4A	$0E98	    			MOVLW	152
$2C4C	$6EB6	    			MOVWF	QEICON, 0
;extruder.c,909 :: 			T5CON = 0b00011001;
$2C4E	$0E19	    			MOVLW	25
$2C50	$6EB7	    			MOVWF	T5CON, 0
;extruder.c,912 :: 			DFLTCON = 0b00000000;
$2C52	$6A60	    			CLRF	DFLTCON, 0
;extruder.c,914 :: 			POSCNTH = 0x00;
$2C54	$6A67	    			CLRF	POSCNTH, 0
;extruder.c,915 :: 			POSCNTL = 0x00;
$2C56	$6A66	    			CLRF	POSCNTL, 0
;extruder.c,916 :: 			VELRL = 0x00;
$2C58	$6A68	    			CLRF	VELRL, 0
;extruder.c,917 :: 			VELRH = 0x00;
$2C5A	$6A69	    			CLRF	VELRH, 0
;extruder.c,920 :: 			MAXCNTH = 0x07;
$2C5C	$0E07	    			MOVLW	7
$2C5E	$6E65	    			MOVWF	MAXCNTH, 0
;extruder.c,921 :: 			MAXCNTL = 0xD0;
$2C60	$0ED0	    			MOVLW	208
$2C62	$6E64	    			MOVWF	MAXCNTL, 0
;extruder.c,927 :: 			PIE3.IC2QEIE = 1;
$2C64	$84A3	    			BSF	PIE3, 2, 0
;extruder.c,947 :: 			PTCON0 = 0b00000000;
$2C66	$6A7F	    			CLRF	PTCON0, 0
;extruder.c,950 :: 			PTCON1 = 0b1000000;
$2C68	$0E40	    			MOVLW	64
$2C6A	$6E7E	    			MOVWF	PTCON1, 0
;extruder.c,953 :: 			PWMCON0 = 0b00011111;
$2C6C	$0E1F	    			MOVLW	31
$2C6E	$6E6F	    			MOVWF	PWMCON0, 0
;extruder.c,957 :: 			PWMCON1 = 0b00000000;
$2C70	$6A6E	    			CLRF	PWMCON1, 0
;extruder.c,966 :: 			PTPERH = 0x00;
$2C72	$6A7A	    			CLRF	PTPERH, 0
;extruder.c,967 :: 			PTPERL = 0xFF;
$2C74	$0EFF	    			MOVLW	255
$2C76	$6E7B	    			MOVWF	PTPERL, 0
;extruder.c,975 :: 			PDC0H=0x00;
$2C78	$6A78	    			CLRF	PDC0H, 0
;extruder.c,976 :: 			PDC0L = 0x00;
$2C7A	$6A79	    			CLRF	PDC0L, 0
;extruder.c,977 :: 			PTCON1.F7=1;
$2C7C	$8E7E	    			BSF	PTCON1, 7, 0
;extruder.c,979 :: 			}
$2C7E	$0012	    			RETURN
$2C80	$	_resetPosition:
;extruder.c,553 :: 			void resetPosition(){
;extruder.c,554 :: 			motorTurns = 0;
$2C80	$6A1A	    			CLRF	_motorTurns, 0
$2C82	$6A1B	    			CLRF	_motorTurns+1, 0
$2C84	$6A1C	    			CLRF	_motorTurns+2, 0
$2C86	$6A1D	    			CLRF	_motorTurns+3, 0
;extruder.c,555 :: 			POSCNTH = 0;
$2C88	$6A67	    			CLRF	POSCNTH, 0
;extruder.c,556 :: 			POSCNTL = 0;
$2C8A	$6A66	    			CLRF	POSCNTL, 0
;extruder.c,557 :: 			pid_motor.feedback = 0;
$2C8C	$0100	    			MOVLB	0
$2C8E	$6BAF	    			CLRF	_pid_motor+4, 1
$2C90	$6BB0	    			CLRF	_pid_motor+5, 1
$2C92	$6BB1	    			CLRF	_pid_motor+6, 1
$2C94	$6BB2	    			CLRF	_pid_motor+7, 1
;extruder.c,558 :: 			pid_motor.command = 0;
$2C96	$6BAB	    			CLRF	_pid_motor+0, 1
$2C98	$6BAC	    			CLRF	_pid_motor+1, 1
$2C9A	$6BAD	    			CLRF	_pid_motor+2, 1
$2C9C	$6BAE	    			CLRF	_pid_motor+3, 1
;extruder.c,559 :: 			}
$2C9E	$0012	    			RETURN
$2CA0	$	_printMessage:
;extruder.c,348 :: 			void printMessage(const char* msg ){
;extruder.c,349 :: 			USART_Write(13);
$2CA0	$0E0D	    			MOVLW	13
$2CA2	$0101	    			MOVLB	1
$2CA4	$6FE0	    			MOVWF	FARG_Usart_Write+0, 1
$2CA6	$EC40	F00F			CALL	_Usart_Write
;extruder.c,350 :: 			strConstCpy(txtBuffer,msg);
$2CAA	$0E2E	    			MOVLW	_txtBuffer
$2CAC	$0101	    			MOVLB	1
$2CAE	$6FB1	    			MOVWF	FARG_strConstCpy+0, 1
$2CB0	$0E00	    			MOVLW	@_txtBuffer
$2CB2	$6FB2	    			MOVWF	FARG_strConstCpy+1, 1
$2CB4	$C175	F1B3			MOVFF	FARG_printMessage+0, FARG_strConstCpy+2
$2CB8	$C176	F1B4			MOVFF	FARG_printMessage+1, FARG_strConstCpy+3
$2CBC	$C177	F1B5			MOVFF	FARG_printMessage+2, FARG_strConstCpy+4
$2CC0	$EC56	F014			CALL	_strConstCpy
;extruder.c,351 :: 			USART_Send_String(txtBuffer);
$2CC4	$0E2E	    			MOVLW	_txtBuffer
$2CC6	$0101	    			MOVLB	1
$2CC8	$6FC8	    			MOVWF	FARG_USART_Send_String+0, 1
$2CCA	$0E00	    			MOVLW	@_txtBuffer
$2CCC	$6FC9	    			MOVWF	FARG_USART_Send_String+1, 1
$2CCE	$EC7A	F011			CALL	_USART_Send_String
;extruder.c,353 :: 			}
$2CD2	$0012	    			RETURN
$2CD4	$	_readMemory:
;extruder.c,357 :: 			unsigned short readMemory(){
;extruder.c,358 :: 			unsigned short pidSize = sizeof ( pid_heater );
$2CD4	$0E4A	    			MOVLW	74
$2CD6	$0101	    			MOVLB	1
$2CD8	$6F75	    			MOVWF	readMemory_pidSize_L0, 1
;extruder.c,362 :: 			Eeprom_Read_Obj(0, &versionId,1 );
$2CDA	$6BB1	    			CLRF	FARG_Eeprom_Read_Obj+0, 1
$2CDC	$6BB2	    			CLRF	FARG_Eeprom_Read_Obj+1, 1
$2CDE	$0E76	    			MOVLW	readMemory_versionId_L0
$2CE0	$6FB3	    			MOVWF	FARG_Eeprom_Read_Obj+2, 1
$2CE2	$0E01	    			MOVLW	@readMemory_versionId_L0
$2CE4	$6FB4	    			MOVWF	FARG_Eeprom_Read_Obj+3, 1
$2CE6	$0E01	    			MOVLW	1
$2CE8	$6FB5	    			MOVWF	FARG_Eeprom_Read_Obj+4, 1
$2CEA	$EC7F	F014			CALL	_Eeprom_Read_Obj
;extruder.c,363 :: 			if ( versionId == EEPROM_VERSION_ID ){
$2CEE	$0101	    			MOVLB	1
$2CF0	$5176	    			MOVF	readMemory_versionId_L0, 0, 1
$2CF2	$1856	    			XORWF	_EEPROM_VERSION_ID, 0, 0
$2CF4	$E11E	    			BNZ	L_readMemory_10
;extruder.c,364 :: 			Eeprom_Read_Obj(1,&pid_heater,pidSize );
$2CF6	$0E01	    			MOVLW	1
$2CF8	$6FB1	    			MOVWF	FARG_Eeprom_Read_Obj+0, 1
$2CFA	$0E00	    			MOVLW	0
$2CFC	$6FB2	    			MOVWF	FARG_Eeprom_Read_Obj+1, 1
$2CFE	$0E61	    			MOVLW	_pid_heater
$2D00	$6FB3	    			MOVWF	FARG_Eeprom_Read_Obj+2, 1
$2D02	$0E00	    			MOVLW	@_pid_heater
$2D04	$6FB4	    			MOVWF	FARG_Eeprom_Read_Obj+3, 1
$2D06	$C175	F1B5			MOVFF	readMemory_pidSize_L0, FARG_Eeprom_Read_Obj+4
$2D0A	$EC7F	F014			CALL	_Eeprom_Read_Obj
;extruder.c,365 :: 			Eeprom_Read_Obj(pidSize+2,&pid_motor,pidSize);
$2D0E	$0E02	    			MOVLW	2
$2D10	$0101	    			MOVLB	1
$2D12	$2575	    			ADDWF	readMemory_pidSize_L0, 0, 1
$2D14	$6FB1	    			MOVWF	FARG_Eeprom_Read_Obj+0, 1
$2D16	$6BB2	    			CLRF	FARG_Eeprom_Read_Obj+1, 1
$2D18	$0E00	    			MOVLW	0
$2D1A	$23B2	    			ADDWFC	FARG_Eeprom_Read_Obj+1, 1, 1
$2D1C	$0EAB	    			MOVLW	_pid_motor
$2D1E	$6FB3	    			MOVWF	FARG_Eeprom_Read_Obj+2, 1
$2D20	$0E00	    			MOVLW	@_pid_motor
$2D22	$6FB4	    			MOVWF	FARG_Eeprom_Read_Obj+3, 1
$2D24	$C175	F1B5			MOVFF	readMemory_pidSize_L0, FARG_Eeprom_Read_Obj+4
$2D28	$EC7F	F014			CALL	_Eeprom_Read_Obj
;extruder.c,366 :: 			return 1;
$2D2C	$0E01	    			MOVLW	1
$2D2E	$6E00	    			MOVWF	STACK_0, 0
$2D30	$0012	    			RETURN
;extruder.c,367 :: 			}
$2D32	$	L_readMemory_10:
;extruder.c,369 :: 			return 0;
$2D32	$6A00	    			CLRF	STACK_0, 0
;extruder.c,371 :: 			}
$2D34	$0012	    			RETURN
$2D36	$	_Usart_Data_Ready:
$2D36	$6A01	    			CLRF	STACK_1, 0
$2D38	$BA9E	    			BTFSC	PIR1, 5, 0
$2D3A	$2A01	    			INCF	STACK_1, 1, 0
$2D3C	$C001	F000			MOVFF	STACK_1, STACK_0
$2D40	$0012	    			RETURN
$2D42	$	_Usart_Read:
$2D42	$CFAE	F05F			MOVFF	RCREG, Usart_Read_tmp_L0
$2D46	$A2AB	    			BTFSS	RCSTA, 1, 0
$2D48	$D002	    			BRA	L_Usart_Read_2
$2D4A	$98AB	    			BCF	RCSTA, 4, 0
$2D4C	$88AB	    			BSF	RCSTA, 4, 0
$2D4E	$	L_Usart_Read_2:
$2D4E	$C05F	F000			MOVFF	Usart_Read_tmp_L0, STACK_0
$2D52	$0012	    			RETURN
$2D54	$	_pushChar:
;extruder.c,327 :: 			int pushChar ( char ch ){
;extruder.c,328 :: 			if ( ch == 10u || ch == 13u){
$2D54	$505F	    			MOVF	FARG_pushChar+0, 0, 0
$2D56	$0A0A	    			XORLW	10
$2D58	$E003	    			BZ	L36_ex_L_pushChar_6
$2D5A	$505F	    			MOVF	FARG_pushChar+0, 0, 0
$2D5C	$0A0D	    			XORLW	13
$2D5E	$E115	    			BNZ	L_pushChar_6
$2D60	$	L36_ex_L_pushChar_6:
;extruder.c,330 :: 			cmdBuffer[txtPos] = 0;
$2D60	$0EF5	    			MOVLW	_cmdBuffer
$2D62	$6EE1	    			MOVWF	FSR1L, 0
$2D64	$0E00	    			MOVLW	@_cmdBuffer
$2D66	$6EE2	    			MOVWF	FSR1L+1, 0
$2D68	$5057	    			MOVF	_txtPos, 0, 0
$2D6A	$26E1	    			ADDWF	FSR1L, 1, 0
$2D6C	$B0D8	    			BTFSC	STATUS, C, 0
$2D6E	$2AE2	    			INCF	FSR1L+1, 1, 0
$2D70	$6AE6	    			CLRF	POSTINC1, 0
;extruder.c,331 :: 			if ( txtPos > 0u ){
$2D72	$5057	    			MOVF	_txtPos, 0, 0
$2D74	$0800	    			SUBLW	0
$2D76	$E206	    			BC	L_pushChar_7
;extruder.c,332 :: 			txtPos = 0;
$2D78	$6A57	    			CLRF	_txtPos, 0
;extruder.c,333 :: 			return 1u;
$2D7A	$0E01	    			MOVLW	1
$2D7C	$6E00	    			MOVWF	STACK_0, 0
$2D7E	$0E00	    			MOVLW	0
$2D80	$6E01	    			MOVWF	STACK_0+1, 0
$2D82	$0012	    			RETURN
;extruder.c,334 :: 			}
$2D84	$	L_pushChar_7:
;extruder.c,336 :: 			return 0u;
$2D84	$6A00	    			CLRF	STACK_0, 0
$2D86	$6A01	    			CLRF	STACK_0+1, 0
$2D88	$0012	    			RETURN
;extruder.c,339 :: 			}
$2D8A	$	L_pushChar_6:
;extruder.c,342 :: 			cmdBuffer[txtPos] = ch;
$2D8A	$0EF5	    			MOVLW	_cmdBuffer
$2D8C	$6EE1	    			MOVWF	FSR1L, 0
$2D8E	$0E00	    			MOVLW	@_cmdBuffer
$2D90	$6EE2	    			MOVWF	FSR1L+1, 0
$2D92	$5057	    			MOVF	_txtPos, 0, 0
$2D94	$26E1	    			ADDWF	FSR1L, 1, 0
$2D96	$B0D8	    			BTFSC	STATUS, C, 0
$2D98	$2AE2	    			INCF	FSR1L+1, 1, 0
$2D9A	$C05F	FFE6			MOVFF	FARG_pushChar+0, POSTINC1
;extruder.c,343 :: 			txtPos++;
$2D9E	$2A57	    			INCF	_txtPos, 1, 0
;extruder.c,344 :: 			return 0;
$2DA0	$6A00	    			CLRF	STACK_0, 0
$2DA2	$6A01	    			CLRF	STACK_0+1, 0
;extruder.c,346 :: 			}
$2DA4	$0012	    			RETURN
$2DA6	$	_commandMatches:
;extruder.c,988 :: 			unsigned short commandMatches(const char *source ){
;extruder.c,989 :: 			char *cmdptr = cmdBuffer;
$2DA6	$0EF5	    			MOVLW	_cmdBuffer
$2DA8	$0101	    			MOVLB	1
$2DAA	$6F78	    			MOVWF	commandMatches_cmdptr_L0, 1
$2DAC	$0E00	    			MOVLW	@_cmdBuffer
$2DAE	$6F79	    			MOVWF	commandMatches_cmdptr_L0+1, 1
;extruder.c,990 :: 			while(*source && *cmdptr ){
$2DB0	$	L_commandMatches_45:
$2DB0	$C175	FFF6			MOVFF	FARG_commandMatches+0, TBLPTRL
$2DB4	$C176	FFF7			MOVFF	FARG_commandMatches+1, TBLPTRH
$2DB8	$C177	FFF8			MOVFF	FARG_commandMatches+2, TBLPTRU
$2DBC	$0009	    			TBLRD*+
$2DBE	$CFF5	F000			MOVFF	TABLAT, STACK_0
$2DC2	$5200	    			MOVF	STACK_0, 1, 0
$2DC4	$E025	    			BZ	L_commandMatches_46
$2DC6	$C178	FFE9			MOVFF	commandMatches_cmdptr_L0, FSR0L
$2DCA	$C179	FFEA			MOVFF	commandMatches_cmdptr_L0+1, FSR0H
$2DCE	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2DD2	$5200	    			MOVF	STACK_0, 1, 0
$2DD4	$E01D	    			BZ	L_commandMatches_46
$2DD6	$	L428_ex_L_commandMatches_46:
;extruder.c,991 :: 			if ( *cmdptr != *source )
$2DD6	$C178	FFE9			MOVFF	commandMatches_cmdptr_L0, FSR0L
$2DDA	$C179	FFEA			MOVFF	commandMatches_cmdptr_L0+1, FSR0H
$2DDE	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$2DE2	$C175	FFF6			MOVFF	FARG_commandMatches+0, TBLPTRL
$2DE6	$C176	FFF7			MOVFF	FARG_commandMatches+1, TBLPTRH
$2DEA	$C177	FFF8			MOVFF	FARG_commandMatches+2, TBLPTRU
$2DEE	$0009	    			TBLRD*+
$2DF0	$CFF5	F001			MOVFF	TABLAT, STACK_1
$2DF4	$5002	    			MOVF	STACK_2, 0, 0
$2DF6	$1801	    			XORWF	STACK_1, 0, 0
$2DF8	$E002	    			BZ	L_commandMatches_49
;extruder.c,992 :: 			return 0;
$2DFA	$6A00	    			CLRF	STACK_0, 0
$2DFC	$0012	    			RETURN
$2DFE	$	L_commandMatches_49:
;extruder.c,993 :: 			cmdptr++;
$2DFE	$0101	    			MOVLB	1
$2E00	$4B78	    			INFSNZ	commandMatches_cmdptr_L0, 1, 1
$2E02	$2B79	    			INCF	commandMatches_cmdptr_L0+1, 1, 1
;extruder.c,994 :: 			source++;
$2E04	$0E01	    			MOVLW	1
$2E06	$2775	    			ADDWF	FARG_commandMatches+0, 1, 1
$2E08	$0E00	    			MOVLW	0
$2E0A	$2376	    			ADDWFC	FARG_commandMatches+1, 1, 1
$2E0C	$2377	    			ADDWFC	FARG_commandMatches+2, 1, 1
;extruder.c,995 :: 			}
$2E0E	$D7D0	    			BRA	L_commandMatches_45
$2E10	$	L_commandMatches_46:
;extruder.c,996 :: 			return 1;
$2E10	$0E01	    			MOVLW	1
$2E12	$6E00	    			MOVWF	STACK_0, 0
;extruder.c,997 :: 			}
$2E14	$0012	    			RETURN
$2E16	$	_printStatus:
$2E16	$0E68	    			MOVLW	104
$2E18	$0101	    			MOVLB	1
$2E1A	$6F75	    			MOVWF	lstr6_extruder+0, 1
$2E1C	$0E74	    			MOVLW	116
$2E1E	$6F76	    			MOVWF	lstr6_extruder+1, 1
$2E20	$6B77	    			CLRF	lstr6_extruder+2, 1
$2E22	$0E68	    			MOVLW	104
$2E24	$6F78	    			MOVWF	lstr7_extruder+0, 1
$2E26	$0E76	    			MOVLW	118
$2E28	$6F79	    			MOVWF	lstr7_extruder+1, 1
$2E2A	$6B7A	    			CLRF	lstr7_extruder+2, 1
$2E2C	$0E68	    			MOVLW	104
$2E2E	$6F7B	    			MOVWF	lstr8_extruder+0, 1
$2E30	$0E70	    			MOVLW	112
$2E32	$6F7C	    			MOVWF	lstr8_extruder+1, 1
$2E34	$6B7D	    			CLRF	lstr8_extruder+2, 1
$2E36	$0E68	    			MOVLW	104
$2E38	$6F7E	    			MOVWF	lstr9_extruder+0, 1
$2E3A	$0E69	    			MOVLW	105
$2E3C	$6F7F	    			MOVWF	lstr9_extruder+1, 1
$2E3E	$6B80	    			CLRF	lstr9_extruder+2, 1
$2E40	$0E68	    			MOVLW	104
$2E42	$6F81	    			MOVWF	lstr10_extruder+0, 1
$2E44	$0E64	    			MOVLW	100
$2E46	$6F82	    			MOVWF	lstr10_extruder+1, 1
$2E48	$6B83	    			CLRF	lstr10_extruder+2, 1
$2E4A	$0E68	    			MOVLW	104
$2E4C	$6F84	    			MOVWF	lstr11_extruder+0, 1
$2E4E	$0E66	    			MOVLW	102
$2E50	$6F85	    			MOVWF	lstr11_extruder+1, 1
$2E52	$0E67	    			MOVLW	103
$2E54	$6F86	    			MOVWF	lstr11_extruder+2, 1
$2E56	$0E30	    			MOVLW	48
$2E58	$6F87	    			MOVWF	lstr11_extruder+3, 1
$2E5A	$6B88	    			CLRF	lstr11_extruder+4, 1
$2E5C	$0E68	    			MOVLW	104
$2E5E	$6F89	    			MOVWF	lstr12_extruder+0, 1
$2E60	$0E6F	    			MOVLW	111
$2E62	$6F8A	    			MOVWF	lstr12_extruder+1, 1
$2E64	$0E75	    			MOVLW	117
$2E66	$6F8B	    			MOVWF	lstr12_extruder+2, 1
$2E68	$0E74	    			MOVLW	116
$2E6A	$6F8C	    			MOVWF	lstr12_extruder+3, 1
$2E6C	$6B8D	    			CLRF	lstr12_extruder+4, 1
$2E6E	$0E68	    			MOVLW	104
$2E70	$6F8E	    			MOVWF	lstr13_extruder+0, 1
$2E72	$0E65	    			MOVLW	101
$2E74	$6F8F	    			MOVWF	lstr13_extruder+1, 1
$2E76	$0E72	    			MOVLW	114
$2E78	$6F90	    			MOVWF	lstr13_extruder+2, 1
$2E7A	$0E72	    			MOVLW	114
$2E7C	$6F91	    			MOVWF	lstr13_extruder+3, 1
$2E7E	$6B92	    			CLRF	lstr13_extruder+4, 1
$2E80	$0E6D	    			MOVLW	109
$2E82	$6F93	    			MOVWF	lstr14_extruder+0, 1
$2E84	$0E63	    			MOVLW	99
$2E86	$6F94	    			MOVWF	lstr14_extruder+1, 1
$2E88	$0E6D	    			MOVLW	109
$2E8A	$6F95	    			MOVWF	lstr14_extruder+2, 1
$2E8C	$0E64	    			MOVLW	100
$2E8E	$6F96	    			MOVWF	lstr14_extruder+3, 1
$2E90	$6B97	    			CLRF	lstr14_extruder+4, 1
$2E92	$0E6D	    			MOVLW	109
$2E94	$6F98	    			MOVWF	lstr15_extruder+0, 1
$2E96	$0E76	    			MOVLW	118
$2E98	$6F99	    			MOVWF	lstr15_extruder+1, 1
$2E9A	$6B9A	    			CLRF	lstr15_extruder+2, 1
$2E9C	$0E6D	    			MOVLW	109
$2E9E	$6F9B	    			MOVWF	lstr16_extruder+0, 1
$2EA0	$0E70	    			MOVLW	112
$2EA2	$6F9C	    			MOVWF	lstr16_extruder+1, 1
$2EA4	$6B9D	    			CLRF	lstr16_extruder+2, 1
$2EA6	$0E6D	    			MOVLW	109
$2EA8	$6F9E	    			MOVWF	lstr17_extruder+0, 1
$2EAA	$0E6F	    			MOVLW	111
$2EAC	$6F9F	    			MOVWF	lstr17_extruder+1, 1
$2EAE	$0E75	    			MOVLW	117
$2EB0	$6FA0	    			MOVWF	lstr17_extruder+2, 1
$2EB2	$0E74	    			MOVLW	116
$2EB4	$6FA1	    			MOVWF	lstr17_extruder+3, 1
$2EB6	$6BA2	    			CLRF	lstr17_extruder+4, 1
$2EB8	$0E6D	    			MOVLW	109
$2EBA	$6FA3	    			MOVWF	lstr18_extruder+0, 1
$2EBC	$0E65	    			MOVLW	101
$2EBE	$6FA4	    			MOVWF	lstr18_extruder+1, 1
$2EC0	$6BA5	    			CLRF	lstr18_extruder+2, 1
$2EC2	$0E6D	    			MOVLW	109
$2EC4	$6FA6	    			MOVWF	lstr19_extruder+0, 1
$2EC6	$0E67	    			MOVLW	103
$2EC8	$6FA7	    			MOVWF	lstr19_extruder+1, 1
$2ECA	$0E65	    			MOVLW	101
$2ECC	$6FA8	    			MOVWF	lstr19_extruder+2, 1
$2ECE	$6BA9	    			CLRF	lstr19_extruder+3, 1
$2ED0	$0E68	    			MOVLW	104
$2ED2	$6FAA	    			MOVWF	lstr20_extruder+0, 1
$2ED4	$0E67	    			MOVLW	103
$2ED6	$6FAB	    			MOVWF	lstr20_extruder+1, 1
$2ED8	$0E65	    			MOVLW	101
$2EDA	$6FAC	    			MOVWF	lstr20_extruder+2, 1
$2EDC	$6BAD	    			CLRF	lstr20_extruder+3, 1
$2EDE	$0E63	    			MOVLW	99
$2EE0	$6FAE	    			MOVWF	lstr21_extruder+0, 1
$2EE2	$0E63	    			MOVLW	99
$2EE4	$6FAF	    			MOVWF	lstr21_extruder+1, 1
$2EE6	$6BB0	    			CLRF	lstr21_extruder+2, 1
;extruder.c,764 :: 			void printStatus(){
;extruder.c,765 :: 			printFloat(COMMAND_HT,pid_heater.command);
$2EE8	$0E75	    			MOVLW	lstr6_extruder
$2EEA	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$2EEC	$0E01	    			MOVLW	@lstr6_extruder
$2EEE	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$2EF0	$C061	F000			MOVFF	_pid_heater+0, STACK_0
$2EF4	$C062	F001			MOVFF	_pid_heater+1, STACK_0+1
$2EF8	$C063	F002			MOVFF	_pid_heater+2, STACK_0+2
$2EFC	$C064	F003			MOVFF	_pid_heater+3, STACK_0+3
$2F00	$EC8D	F005			CALL	_longint2double
$2F04	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$2F08	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$2F0C	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$2F10	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$2F14	$EC9C	F014			CALL	_printFloat
;extruder.c,766 :: 			printFloat(TXT_HEATER_FEEDBACK,pid_heater.feedback);
$2F18	$0E78	    			MOVLW	lstr7_extruder
$2F1A	$0101	    			MOVLB	1
$2F1C	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$2F1E	$0E01	    			MOVLW	@lstr7_extruder
$2F20	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$2F22	$C065	F000			MOVFF	_pid_heater+4, STACK_0
$2F26	$C066	F001			MOVFF	_pid_heater+5, STACK_0+1
$2F2A	$C067	F002			MOVFF	_pid_heater+6, STACK_0+2
$2F2E	$C068	F003			MOVFF	_pid_heater+7, STACK_0+3
$2F32	$EC8D	F005			CALL	_longint2double
$2F36	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$2F3A	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$2F3E	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$2F42	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$2F46	$EC9C	F014			CALL	_printFloat
;extruder.c,767 :: 			printFloat(COMMAND_HEATER_KP,pid_heater.pgain);
$2F4A	$0E7B	    			MOVLW	lstr8_extruder
$2F4C	$0101	    			MOVLB	1
$2F4E	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$2F50	$0E01	    			MOVLW	@lstr8_extruder
$2F52	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$2F54	$C091	F1B3			MOVFF	_pid_heater+48, FARG_printFloat+2
$2F58	$C092	F1B4			MOVFF	_pid_heater+49, FARG_printFloat+3
$2F5C	$C093	F1B5			MOVFF	_pid_heater+50, FARG_printFloat+4
$2F60	$C094	F1B6			MOVFF	_pid_heater+51, FARG_printFloat+5
$2F64	$EC9C	F014			CALL	_printFloat
;extruder.c,768 :: 			printFloat(COMMAND_HEATER_KI,pid_heater.igain);
$2F68	$0E7E	    			MOVLW	lstr9_extruder
$2F6A	$0101	    			MOVLB	1
$2F6C	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$2F6E	$0E01	    			MOVLW	@lstr9_extruder
$2F70	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$2F72	$C095	F1B3			MOVFF	_pid_heater+52, FARG_printFloat+2
$2F76	$C096	F1B4			MOVFF	_pid_heater+53, FARG_printFloat+3
$2F7A	$C097	F1B5			MOVFF	_pid_heater+54, FARG_printFloat+4
$2F7E	$C098	F1B6			MOVFF	_pid_heater+55, FARG_printFloat+5
$2F82	$EC9C	F014			CALL	_printFloat
;extruder.c,769 :: 			printFloat(COMMAND_HEATER_KD,pid_heater.dgain);
$2F86	$0E81	    			MOVLW	lstr10_extruder
$2F88	$0101	    			MOVLB	1
$2F8A	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$2F8C	$0E01	    			MOVLW	@lstr10_extruder
$2F8E	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$2F90	$C099	F1B3			MOVFF	_pid_heater+56, FARG_printFloat+2
$2F94	$C09A	F1B4			MOVFF	_pid_heater+57, FARG_printFloat+3
$2F98	$C09B	F1B5			MOVFF	_pid_heater+58, FARG_printFloat+4
$2F9C	$C09C	F1B6			MOVFF	_pid_heater+59, FARG_printFloat+5
$2FA0	$EC9C	F014			CALL	_printFloat
;extruder.c,770 :: 			printFloat(COMMAND_HEATER_FFO,pid_heater.ff0gain);
$2FA4	$0E84	    			MOVLW	lstr11_extruder
$2FA6	$0101	    			MOVLB	1
$2FA8	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$2FAA	$0E01	    			MOVLW	@lstr11_extruder
$2FAC	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$2FAE	$C09D	F1B3			MOVFF	_pid_heater+60, FARG_printFloat+2
$2FB2	$C09E	F1B4			MOVFF	_pid_heater+61, FARG_printFloat+3
$2FB6	$C09F	F1B5			MOVFF	_pid_heater+62, FARG_printFloat+4
$2FBA	$C0A0	F1B6			MOVFF	_pid_heater+63, FARG_printFloat+5
$2FBE	$EC9C	F014			CALL	_printFloat
;extruder.c,771 :: 			printFloat(TXT_HEATER_OUTPUT,pid_heater.output);
$2FC2	$0E89	    			MOVLW	lstr12_extruder
$2FC4	$0101	    			MOVLB	1
$2FC6	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$2FC8	$0E01	    			MOVLW	@lstr12_extruder
$2FCA	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$2FCC	$C0A7	F000			MOVFF	_pid_heater+70, STACK_0
$2FD0	$C0A8	F001			MOVFF	_pid_heater+71, STACK_0+1
$2FD4	$ECE3	F005			CALL	_int2double
$2FD8	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$2FDC	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$2FE0	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$2FE4	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$2FE8	$EC9C	F014			CALL	_printFloat
;extruder.c,772 :: 			printFloat(TXT_HEATER_ERROR,pid_heater.error);
$2FEC	$0E8E	    			MOVLW	lstr13_extruder
$2FEE	$0101	    			MOVLB	1
$2FF0	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$2FF2	$0E01	    			MOVLW	@lstr13_extruder
$2FF4	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$2FF6	$C069	F000			MOVFF	_pid_heater+8, STACK_0
$2FFA	$C06A	F001			MOVFF	_pid_heater+9, STACK_0+1
$2FFE	$C06B	F002			MOVFF	_pid_heater+10, STACK_0+2
$3002	$C06C	F003			MOVFF	_pid_heater+11, STACK_0+3
$3006	$EC8D	F005			CALL	_longint2double
$300A	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$300E	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$3012	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$3016	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$301A	$EC9C	F014			CALL	_printFloat
;extruder.c,776 :: 			printFloat(COMMAND_MOTOR_POS,pid_motor.command);
$301E	$0E93	    			MOVLW	lstr14_extruder
$3020	$0101	    			MOVLB	1
$3022	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$3024	$0E01	    			MOVLW	@lstr14_extruder
$3026	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$3028	$C0AB	F000			MOVFF	_pid_motor+0, STACK_0
$302C	$C0AC	F001			MOVFF	_pid_motor+1, STACK_0+1
$3030	$C0AD	F002			MOVFF	_pid_motor+2, STACK_0+2
$3034	$C0AE	F003			MOVFF	_pid_motor+3, STACK_0+3
$3038	$EC8D	F005			CALL	_longint2double
$303C	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$3040	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$3044	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$3048	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$304C	$EC9C	F014			CALL	_printFloat
;extruder.c,777 :: 			printFloat(TXT_MOTOR_FEEDBACK,pid_motor.feedback);
$3050	$0E98	    			MOVLW	lstr15_extruder
$3052	$0101	    			MOVLB	1
$3054	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$3056	$0E01	    			MOVLW	@lstr15_extruder
$3058	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$305A	$C0AF	F000			MOVFF	_pid_motor+4, STACK_0
$305E	$C0B0	F001			MOVFF	_pid_motor+5, STACK_0+1
$3062	$C0B1	F002			MOVFF	_pid_motor+6, STACK_0+2
$3066	$C0B2	F003			MOVFF	_pid_motor+7, STACK_0+3
$306A	$EC8D	F005			CALL	_longint2double
$306E	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$3072	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$3076	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$307A	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$307E	$EC9C	F014			CALL	_printFloat
;extruder.c,778 :: 			printFloat(COMMAND_MOTOR_KP,pid_motor.pgain);
$3082	$0E9B	    			MOVLW	lstr16_extruder
$3084	$0101	    			MOVLB	1
$3086	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$3088	$0E01	    			MOVLW	@lstr16_extruder
$308A	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$308C	$C0DB	F1B3			MOVFF	_pid_motor+48, FARG_printFloat+2
$3090	$C0DC	F1B4			MOVFF	_pid_motor+49, FARG_printFloat+3
$3094	$C0DD	F1B5			MOVFF	_pid_motor+50, FARG_printFloat+4
$3098	$C0DE	F1B6			MOVFF	_pid_motor+51, FARG_printFloat+5
$309C	$EC9C	F014			CALL	_printFloat
;extruder.c,782 :: 			printFloat(TXT_MOTOR_OUTPUT,pid_motor.output);
$30A0	$0E9E	    			MOVLW	lstr17_extruder
$30A2	$0101	    			MOVLB	1
$30A4	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$30A6	$0E01	    			MOVLW	@lstr17_extruder
$30A8	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$30AA	$C0F1	F000			MOVFF	_pid_motor+70, STACK_0
$30AE	$C0F2	F001			MOVFF	_pid_motor+71, STACK_0+1
$30B2	$ECE3	F005			CALL	_int2double
$30B6	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$30BA	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$30BE	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$30C2	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$30C6	$EC9C	F014			CALL	_printFloat
;extruder.c,786 :: 			printFloat(TXT_MOTOR_ENABLE,pid_motor.enable);
$30CA	$0EA3	    			MOVLW	lstr18_extruder
$30CC	$0101	    			MOVLB	1
$30CE	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$30D0	$0E01	    			MOVLW	@lstr18_extruder
$30D2	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$30D4	$C0F3	F000			MOVFF	_pid_motor+72, STACK_0
$30D8	$ECCD	F014			CALL	_byte2double
$30DC	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$30E0	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$30E4	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$30E8	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$30EC	$EC9C	F014			CALL	_printFloat
;extruder.c,788 :: 			printFloat(COMMAND_MOTOR_ENABLE,motorGlobalEnable);
$30F0	$0EA6	    			MOVLW	lstr19_extruder
$30F2	$0101	    			MOVLB	1
$30F4	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$30F6	$0E01	    			MOVLW	@lstr19_extruder
$30F8	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$30FA	$C02D	F000			MOVFF	_motorGlobalEnable, STACK_0
$30FE	$ECCD	F014			CALL	_byte2double
$3102	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$3106	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$310A	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$310E	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$3112	$EC9C	F014			CALL	_printFloat
;extruder.c,789 :: 			printFloat(COMMAND_HEATER_ENABLE,heaterGlobalEnable);
$3116	$0EAA	    			MOVLW	lstr20_extruder
$3118	$0101	    			MOVLB	1
$311A	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$311C	$0E01	    			MOVLW	@lstr20_extruder
$311E	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$3120	$C021	F000			MOVFF	_heaterGlobalEnable, STACK_0
$3124	$ECCD	F014			CALL	_byte2double
$3128	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$312C	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$3130	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$3134	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$3138	$EC9C	F014			CALL	_printFloat
;extruder.c,791 :: 			printFloat(COMMAND_FLOWCOMP,meltFlowComp );
$313C	$0EAE	    			MOVLW	lstr21_extruder
$313E	$0101	    			MOVLB	1
$3140	$6FB1	    			MOVWF	FARG_printFloat+0, 1
$3142	$0E01	    			MOVLW	@lstr21_extruder
$3144	$6FB2	    			MOVWF	FARG_printFloat+1, 1
$3146	$C022	F000			MOVFF	_meltFlowComp, STACK_0
$314A	$ECCD	F014			CALL	_byte2double
$314E	$C000	F1B3			MOVFF	STACK_0, FARG_printFloat+2
$3152	$C001	F1B4			MOVFF	STACK_0+1, FARG_printFloat+3
$3156	$C002	F1B5			MOVFF	STACK_0+2, FARG_printFloat+4
$315A	$C003	F1B6			MOVFF	STACK_0+3, FARG_printFloat+5
$315E	$EC9C	F014			CALL	_printFloat
;extruder.c,798 :: 			}
$3162	$0012	    			RETURN
$3164	$	_writeMemory:
;extruder.c,373 :: 			void writeMemory(){
;extruder.c,374 :: 			unsigned short pidSize = sizeof( pid_heater );
$3164	$0E4A	    			MOVLW	74
$3166	$6E5F	    			MOVWF	writeMemory_pidSize_L0, 0
;extruder.c,376 :: 			EEprom_Write_Obj(0,&EEPROM_VERSION_ID,1);
$3168	$0101	    			MOVLB	1
$316A	$6BB1	    			CLRF	FARG_Eeprom_Write_Obj+0, 1
$316C	$6BB2	    			CLRF	FARG_Eeprom_Write_Obj+1, 1
$316E	$0E56	    			MOVLW	_EEPROM_VERSION_ID
$3170	$6FB3	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$3172	$0E00	    			MOVLW	@_EEPROM_VERSION_ID
$3174	$6FB4	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$3176	$0E01	    			MOVLW	1
$3178	$6FB5	    			MOVWF	FARG_Eeprom_Write_Obj+4, 1
$317A	$ECDD	F014			CALL	_Eeprom_Write_Obj
;extruder.c,379 :: 			EEprom_Write_Obj(1,&pid_heater,pidSize);
$317E	$0E01	    			MOVLW	1
$3180	$0101	    			MOVLB	1
$3182	$6FB1	    			MOVWF	FARG_Eeprom_Write_Obj+0, 1
$3184	$0E00	    			MOVLW	0
$3186	$6FB2	    			MOVWF	FARG_Eeprom_Write_Obj+1, 1
$3188	$0E61	    			MOVLW	_pid_heater
$318A	$6FB3	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$318C	$0E00	    			MOVLW	@_pid_heater
$318E	$6FB4	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$3190	$C05F	F1B5			MOVFF	writeMemory_pidSize_L0, FARG_Eeprom_Write_Obj+4
$3194	$ECDD	F014			CALL	_Eeprom_Write_Obj
;extruder.c,380 :: 			EEprom_Write_Obj(pidSize+2,&pid_motor,pidSize);
$3198	$0E02	    			MOVLW	2
$319A	$245F	    			ADDWF	writeMemory_pidSize_L0, 0, 0
$319C	$0101	    			MOVLB	1
$319E	$6FB1	    			MOVWF	FARG_Eeprom_Write_Obj+0, 1
$31A0	$6BB2	    			CLRF	FARG_Eeprom_Write_Obj+1, 1
$31A2	$0E00	    			MOVLW	0
$31A4	$23B2	    			ADDWFC	FARG_Eeprom_Write_Obj+1, 1, 1
$31A6	$0EAB	    			MOVLW	_pid_motor
$31A8	$6FB3	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$31AA	$0E00	    			MOVLW	@_pid_motor
$31AC	$6FB4	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$31AE	$C05F	F1B5			MOVFF	writeMemory_pidSize_L0, FARG_Eeprom_Write_Obj+4
$31B2	$ECDD	F014			CALL	_Eeprom_Write_Obj
;extruder.c,381 :: 			}
$31B6	$0012	    			RETURN
$31B8	$	_findIntValue:
;extruder.c,1005 :: 			int findIntValue ( char *buffer){
;extruder.c,1008 :: 			char *ptr = strchr(buffer,'=');
$31B8	$C175	F1B1			MOVFF	FARG_findIntValue+0, FARG_strchr+0
$31BC	$C176	F1B2			MOVFF	FARG_findIntValue+1, FARG_strchr+1
$31C0	$0E3D	    			MOVLW	61
$31C2	$0101	    			MOVLB	1
$31C4	$6FB3	    			MOVWF	FARG_strchr+2, 1
$31C6	$ECF9	F014			CALL	_strchr
$31CA	$C000	F177			MOVFF	STACK_0, findIntValue_ptr_L0
$31CE	$C001	F178			MOVFF	STACK_0+1, findIntValue_ptr_L0+1
;extruder.c,1009 :: 			return atoi(++ptr);
$31D2	$0E01	    			MOVLW	1
$31D4	$2400	    			ADDWF	STACK_0, 0, 0
$31D6	$0101	    			MOVLB	1
$31D8	$6F77	    			MOVWF	findIntValue_ptr_L0, 1
$31DA	$0E00	    			MOVLW	0
$31DC	$2001	    			ADDWFC	STACK_0+1, 0, 0
$31DE	$6F78	    			MOVWF	findIntValue_ptr_L0+1, 1
$31E0	$C177	F1B1			MOVFF	findIntValue_ptr_L0, FARG_atoi+0
$31E4	$C178	F1B2			MOVFF	findIntValue_ptr_L0+1, FARG_atoi+1
$31E8	$EC16	F015			CALL	_atoi
;extruder.c,1010 :: 			}
$31EC	$0012	    			RETURN
$31EE	$	_clearMemory:
;extruder.c,383 :: 			void clearMemory(){
;extruder.c,386 :: 			unsigned short blank = 0xFF;
$31EE	$0EFF	    			MOVLW	255
$31F0	$6E5F	    			MOVWF	clearMemory_blank_L0, 0
;extruder.c,387 :: 			EEprom_Write_Obj(0,&blank,1);
$31F2	$0101	    			MOVLB	1
$31F4	$6BB1	    			CLRF	FARG_Eeprom_Write_Obj+0, 1
$31F6	$6BB2	    			CLRF	FARG_Eeprom_Write_Obj+1, 1
$31F8	$0E5F	    			MOVLW	clearMemory_blank_L0
$31FA	$6FB3	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$31FC	$0E00	    			MOVLW	@clearMemory_blank_L0
$31FE	$6FB4	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$3200	$0E01	    			MOVLW	1
$3202	$6FB5	    			MOVWF	FARG_Eeprom_Write_Obj+4, 1
$3204	$ECDD	F014			CALL	_Eeprom_Write_Obj
;extruder.c,388 :: 			}
$3208	$0012	    			RETURN
$320A	$	_findFloatValue:
;extruder.c,999 :: 			float findFloatValue ( char *buffer){
;extruder.c,1002 :: 			char *ptr = strchr(buffer,'=');
$320A	$C175	F1B1			MOVFF	FARG_findFloatValue+0, FARG_strchr+0
$320E	$C176	F1B2			MOVFF	FARG_findFloatValue+1, FARG_strchr+1
$3212	$0E3D	    			MOVLW	61
$3214	$0101	    			MOVLB	1
$3216	$6FB3	    			MOVWF	FARG_strchr+2, 1
$3218	$ECF9	F014			CALL	_strchr
$321C	$C000	F177			MOVFF	STACK_0, findFloatValue_ptr_L0
$3220	$C001	F178			MOVFF	STACK_0+1, findFloatValue_ptr_L0+1
;extruder.c,1003 :: 			return atof(++ptr);
$3224	$0E01	    			MOVLW	1
$3226	$2400	    			ADDWF	STACK_0, 0, 0
$3228	$0101	    			MOVLB	1
$322A	$6F77	    			MOVWF	findFloatValue_ptr_L0, 1
$322C	$0E00	    			MOVLW	0
$322E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$3230	$6F78	    			MOVWF	findFloatValue_ptr_L0+1, 1
$3232	$C177	F1B1			MOVFF	findFloatValue_ptr_L0, FARG_atof+0
$3236	$C178	F1B2			MOVFF	findFloatValue_ptr_L0+1, FARG_atof+1
$323A	$EC72	F015			CALL	_atof
;extruder.c,1004 :: 			}
$323E	$0012	    			RETURN
$3240	$	_findLongValue:
;extruder.c,1011 :: 			long findLongValue ( char *buffer){
;extruder.c,1014 :: 			char *ptr = strchr(buffer,'=');
$3240	$C175	F1B1			MOVFF	FARG_findLongValue+0, FARG_strchr+0
$3244	$C176	F1B2			MOVFF	FARG_findLongValue+1, FARG_strchr+1
$3248	$0E3D	    			MOVLW	61
$324A	$0101	    			MOVLB	1
$324C	$6FB3	    			MOVWF	FARG_strchr+2, 1
$324E	$ECF9	F014			CALL	_strchr
$3252	$C000	F177			MOVFF	STACK_0, findLongValue_ptr_L0
$3256	$C001	F178			MOVFF	STACK_0+1, findLongValue_ptr_L0+1
;extruder.c,1015 :: 			return atol(++ptr);
$325A	$0E01	    			MOVLW	1
$325C	$2400	    			ADDWF	STACK_0, 0, 0
$325E	$0101	    			MOVLB	1
$3260	$6F77	    			MOVWF	findLongValue_ptr_L0, 1
$3262	$0E00	    			MOVLW	0
$3264	$2001	    			ADDWFC	STACK_0+1, 0, 0
$3266	$6F78	    			MOVWF	findLongValue_ptr_L0+1, 1
$3268	$C177	F1B1			MOVFF	findLongValue_ptr_L0, FARG_atol+0
$326C	$C178	F1B2			MOVFF	findLongValue_ptr_L0+1, FARG_atol+1
$3270	$EC7C	F015			CALL	_atol
;extruder.c,1016 :: 			}
$3274	$0012	    			RETURN
$3276	$	GlobalIniextruder:
$3276	$0EFF	    			MOVLW	255
$3278	$6E58	    			MOVWF	_buffer+0, 0
$327A	$0E00	    			MOVLW	0
$327C	$6E57	    			MOVWF	_txtPos+0, 0
$327E	$0E00	    			MOVLW	0
$3280	$6E2C	    			MOVWF	_tempCount+0, 0
$3282	$0E28	    			MOVLW	40
$3284	$6E19	    			MOVWF	_stepMultiplier+0, 0
$3286	$0E00	    			MOVLW	0
$3288	$6E21	    			MOVWF	_heaterGlobalEnable+0, 0
$328A	$0E01	    			MOVLW	1
$328C	$6E2D	    			MOVWF	_motorGlobalEnable+0, 0
$328E	$0E01	    			MOVLW	1
$3290	$6E22	    			MOVWF	_meltFlowComp+0, 0
$3292	$0E00	    			MOVLW	0
$3294	$6E2B	    			MOVWF	_motorDirSwitches+0, 0
$3296	$0E00	    			MOVLW	0
$3298	$6E59	    			MOVWF	_debugCount+0, 0
$329A	$0E00	    			MOVLW	0
$329C	$6E5A	    			MOVWF	_simulateCurrentVel+0, 0
$329E	$0E00	    			MOVLW	0
$32A0	$6E5B	    			MOVWF	_simulateDuration+0, 0
$32A2	$0E00	    			MOVLW	0
$32A4	$6E5C	    			MOVWF	_simulateDuration+1, 0
$32A6	$0E00	    			MOVLW	0
$32A8	$6E5D	    			MOVWF	_debugHeaterDuty+0, 0
$32AA	$0E00	    			MOVLW	0
$32AC	$6E5E	    			MOVWF	_debugHeaterDuty+1, 0
$32AE	$0E00	    			MOVLW	0
$32B0	$0101	    			MOVLB	1
$32B2	$6F1D	    			MOVWF	_debugMotorDuty+0, 1
$32B4	$0E00	    			MOVLW	0
$32B6	$6F1E	    			MOVWF	_debugMotorDuty+1, 1
$32B8	$0E00	    			MOVLW	0
$32BA	$6F1F	    			MOVWF	_debugMotorSpeed+0, 1
$32BC	$0E00	    			MOVLW	0
$32BE	$6F20	    			MOVWF	_debugMotorSpeed+1, 1
$32C0	$0E00	    			MOVLW	0
$32C2	$6E15	    			MOVWF	_motorPulses+0, 0
$32C4	$0E00	    			MOVLW	0
$32C6	$6E16	    			MOVWF	_motorPulses+1, 0
$32C8	$0E00	    			MOVLW	0
$32CA	$6E17	    			MOVWF	_motorPulses+2, 0
$32CC	$0E00	    			MOVLW	0
$32CE	$6E18	    			MOVWF	_motorPulses+3, 0
$32D0	$0E00	    			MOVLW	0
$32D2	$6E1A	    			MOVWF	_motorTurns+0, 0
$32D4	$0E00	    			MOVLW	0
$32D6	$6E1B	    			MOVWF	_motorTurns+1, 0
$32D8	$0E00	    			MOVLW	0
$32DA	$6E1C	    			MOVWF	_motorTurns+2, 0
$32DC	$0E00	    			MOVLW	0
$32DE	$6E1D	    			MOVWF	_motorTurns+3, 0
$32E0	$0E00	    			MOVLW	0
$32E2	$6E23	    			MOVWF	_xMelt+0, 0
$32E4	$0E00	    			MOVLW	0
$32E6	$6E24	    			MOVWF	_xMelt+1, 0
$32E8	$0E00	    			MOVLW	0
$32EA	$6E25	    			MOVWF	_xMelt+2, 0
$32EC	$0E00	    			MOVLW	0
$32EE	$6E26	    			MOVWF	_xMelt+3, 0
$32F0	$0E00	    			MOVLW	0
$32F2	$6F21	    			MOVWF	_dxMelt+0, 1
$32F4	$0E00	    			MOVLW	0
$32F6	$6F22	    			MOVWF	_dxMelt+1, 1
$32F8	$0E00	    			MOVLW	0
$32FA	$6F23	    			MOVWF	_dxMelt+2, 1
$32FC	$0E00	    			MOVLW	0
$32FE	$6F24	    			MOVWF	_dxMelt+3, 1
$3300	$0E00	    			MOVLW	0
$3302	$6E27	    			MOVWF	_stepError+0, 0
$3304	$0E00	    			MOVLW	0
$3306	$6E28	    			MOVWF	_stepError+1, 0
$3308	$0E00	    			MOVLW	0
$330A	$6E29	    			MOVWF	_stepError+2, 0
$330C	$0E00	    			MOVLW	0
$330E	$6E2A	    			MOVWF	_stepError+3, 0
$3310	$0EFA	    			MOVLW	250
$3312	$0100	    			MOVLB	0
$3314	$6F61	    			MOVWF	_pid_heater+0, 1
$3316	$0E00	    			MOVLW	0
$3318	$6F62	    			MOVWF	_pid_heater+1, 1
$331A	$0E00	    			MOVLW	0
$331C	$6F63	    			MOVWF	_pid_heater+2, 1
$331E	$0E00	    			MOVLW	0
$3320	$6F64	    			MOVWF	_pid_heater+3, 1
$3322	$0E00	    			MOVLW	0
$3324	$6F65	    			MOVWF	_pid_heater+4, 1
$3326	$0E00	    			MOVLW	0
$3328	$6F66	    			MOVWF	_pid_heater+5, 1
$332A	$0E00	    			MOVLW	0
$332C	$6F67	    			MOVWF	_pid_heater+6, 1
$332E	$0E00	    			MOVLW	0
$3330	$6F68	    			MOVWF	_pid_heater+7, 1
$3332	$0E00	    			MOVLW	0
$3334	$6F69	    			MOVWF	_pid_heater+8, 1
$3336	$0E00	    			MOVLW	0
$3338	$6F6A	    			MOVWF	_pid_heater+9, 1
$333A	$0E00	    			MOVLW	0
$333C	$6F6B	    			MOVWF	_pid_heater+10, 1
$333E	$0E00	    			MOVLW	0
$3340	$6F6C	    			MOVWF	_pid_heater+11, 1
$3342	$0E00	    			MOVLW	0
$3344	$6F6D	    			MOVWF	_pid_heater+12, 1
$3346	$0E00	    			MOVLW	0
$3348	$6F6E	    			MOVWF	_pid_heater+13, 1
$334A	$0E00	    			MOVLW	0
$334C	$6F6F	    			MOVWF	_pid_heater+14, 1
$334E	$0E00	    			MOVLW	0
$3350	$6F70	    			MOVWF	_pid_heater+15, 1
$3352	$0E00	    			MOVLW	0
$3354	$6F71	    			MOVWF	_pid_heater+16, 1
$3356	$0E00	    			MOVLW	0
$3358	$6F72	    			MOVWF	_pid_heater+17, 1
$335A	$0EF4	    			MOVLW	244
$335C	$6F73	    			MOVWF	_pid_heater+18, 1
$335E	$0E01	    			MOVLW	1
$3360	$6F74	    			MOVWF	_pid_heater+19, 1
$3362	$0E00	    			MOVLW	0
$3364	$6F75	    			MOVWF	_pid_heater+20, 1
$3366	$0E00	    			MOVLW	0
$3368	$6F76	    			MOVWF	_pid_heater+21, 1
$336A	$0E00	    			MOVLW	0
$336C	$6F77	    			MOVWF	_pid_heater+22, 1
$336E	$0E00	    			MOVLW	0
$3370	$6F78	    			MOVWF	_pid_heater+23, 1
$3372	$0E00	    			MOVLW	0
$3374	$6F79	    			MOVWF	_pid_heater+24, 1
$3376	$0E00	    			MOVLW	0
$3378	$6F7A	    			MOVWF	_pid_heater+25, 1
$337A	$0E00	    			MOVLW	0
$337C	$6F7B	    			MOVWF	_pid_heater+26, 1
$337E	$0E00	    			MOVLW	0
$3380	$6F7C	    			MOVWF	_pid_heater+27, 1
$3382	$0E00	    			MOVLW	0
$3384	$6F7D	    			MOVWF	_pid_heater+28, 1
$3386	$0E00	    			MOVLW	0
$3388	$6F7E	    			MOVWF	_pid_heater+29, 1
$338A	$0E00	    			MOVLW	0
$338C	$6F7F	    			MOVWF	_pid_heater+30, 1
$338E	$0E00	    			MOVLW	0
$3390	$6F80	    			MOVWF	_pid_heater+31, 1
$3392	$0E00	    			MOVLW	0
$3394	$6F81	    			MOVWF	_pid_heater+32, 1
$3396	$0E00	    			MOVLW	0
$3398	$6F82	    			MOVWF	_pid_heater+33, 1
$339A	$0E00	    			MOVLW	0
$339C	$6F83	    			MOVWF	_pid_heater+34, 1
$339E	$0E00	    			MOVLW	0
$33A0	$6F84	    			MOVWF	_pid_heater+35, 1
$33A2	$0E00	    			MOVLW	0
$33A4	$6F85	    			MOVWF	_pid_heater+36, 1
$33A6	$0E00	    			MOVLW	0
$33A8	$6F86	    			MOVWF	_pid_heater+37, 1
$33AA	$0E00	    			MOVLW	0
$33AC	$6F87	    			MOVWF	_pid_heater+38, 1
$33AE	$0E00	    			MOVLW	0
$33B0	$6F88	    			MOVWF	_pid_heater+39, 1
$33B2	$0E00	    			MOVLW	0
$33B4	$6F89	    			MOVWF	_pid_heater+40, 1
$33B6	$0E00	    			MOVLW	0
$33B8	$6F8A	    			MOVWF	_pid_heater+41, 1
$33BA	$0E00	    			MOVLW	0
$33BC	$6F8B	    			MOVWF	_pid_heater+42, 1
$33BE	$0E00	    			MOVLW	0
$33C0	$6F8C	    			MOVWF	_pid_heater+43, 1
$33C2	$0E00	    			MOVLW	0
$33C4	$6F8D	    			MOVWF	_pid_heater+44, 1
$33C6	$0E00	    			MOVLW	0
$33C8	$6F8E	    			MOVWF	_pid_heater+45, 1
$33CA	$0E00	    			MOVLW	0
$33CC	$6F8F	    			MOVWF	_pid_heater+46, 1
$33CE	$0E00	    			MOVLW	0
$33D0	$6F90	    			MOVWF	_pid_heater+47, 1
$33D2	$0E00	    			MOVLW	0
$33D4	$6F91	    			MOVWF	_pid_heater+48, 1
$33D6	$0E00	    			MOVLW	0
$33D8	$6F92	    			MOVWF	_pid_heater+49, 1
$33DA	$0E48	    			MOVLW	72
$33DC	$6F93	    			MOVWF	_pid_heater+50, 1
$33DE	$0E83	    			MOVLW	131
$33E0	$6F94	    			MOVWF	_pid_heater+51, 1
$33E2	$0E0A	    			MOVLW	10
$33E4	$6F95	    			MOVWF	_pid_heater+52, 1
$33E6	$0ED7	    			MOVLW	215
$33E8	$6F96	    			MOVWF	_pid_heater+53, 1
$33EA	$0E23	    			MOVLW	35
$33EC	$6F97	    			MOVWF	_pid_heater+54, 1
$33EE	$0E77	    			MOVLW	119
$33F0	$6F98	    			MOVWF	_pid_heater+55, 1
$33F2	$0E00	    			MOVLW	0
$33F4	$6F99	    			MOVWF	_pid_heater+56, 1
$33F6	$0E00	    			MOVLW	0
$33F8	$6F9A	    			MOVWF	_pid_heater+57, 1
$33FA	$0E00	    			MOVLW	0
$33FC	$6F9B	    			MOVWF	_pid_heater+58, 1
$33FE	$0E00	    			MOVLW	0
$3400	$6F9C	    			MOVWF	_pid_heater+59, 1
$3402	$0E9A	    			MOVLW	154
$3404	$6F9D	    			MOVWF	_pid_heater+60, 1
$3406	$0E99	    			MOVLW	153
$3408	$6F9E	    			MOVWF	_pid_heater+61, 1
$340A	$0E19	    			MOVLW	25
$340C	$6F9F	    			MOVWF	_pid_heater+62, 1
$340E	$0E7E	    			MOVLW	126
$3410	$6FA0	    			MOVWF	_pid_heater+63, 1
$3412	$0E00	    			MOVLW	0
$3414	$6FA1	    			MOVWF	_pid_heater+64, 1
$3416	$0E00	    			MOVLW	0
$3418	$6FA2	    			MOVWF	_pid_heater+65, 1
$341A	$0E00	    			MOVLW	0
$341C	$6FA3	    			MOVWF	_pid_heater+66, 1
$341E	$0E00	    			MOVLW	0
$3420	$6FA4	    			MOVWF	_pid_heater+67, 1
$3422	$0EFE	    			MOVLW	254
$3424	$6FA5	    			MOVWF	_pid_heater+68, 1
$3426	$0E00	    			MOVLW	0
$3428	$6FA6	    			MOVWF	_pid_heater+69, 1
$342A	$0E00	    			MOVLW	0
$342C	$6FA7	    			MOVWF	_pid_heater+70, 1
$342E	$0E00	    			MOVLW	0
$3430	$6FA8	    			MOVWF	_pid_heater+71, 1
$3432	$0E00	    			MOVLW	0
$3434	$6FA9	    			MOVWF	_pid_heater+72, 1
$3436	$0E00	    			MOVLW	0
$3438	$6FAA	    			MOVWF	_pid_heater+73, 1
$343A	$0E00	    			MOVLW	0
$343C	$6FAB	    			MOVWF	_pid_motor+0, 1
$343E	$0E00	    			MOVLW	0
$3440	$6FAC	    			MOVWF	_pid_motor+1, 1
$3442	$0E00	    			MOVLW	0
$3444	$6FAD	    			MOVWF	_pid_motor+2, 1
$3446	$0E00	    			MOVLW	0
$3448	$6FAE	    			MOVWF	_pid_motor+3, 1
$344A	$0E00	    			MOVLW	0
$344C	$6FAF	    			MOVWF	_pid_motor+4, 1
$344E	$0E00	    			MOVLW	0
$3450	$6FB0	    			MOVWF	_pid_motor+5, 1
$3452	$0E00	    			MOVLW	0
$3454	$6FB1	    			MOVWF	_pid_motor+6, 1
$3456	$0E00	    			MOVLW	0
$3458	$6FB2	    			MOVWF	_pid_motor+7, 1
$345A	$0E00	    			MOVLW	0
$345C	$6FB3	    			MOVWF	_pid_motor+8, 1
$345E	$0E00	    			MOVLW	0
$3460	$6FB4	    			MOVWF	_pid_motor+9, 1
$3462	$0E00	    			MOVLW	0
$3464	$6FB5	    			MOVWF	_pid_motor+10, 1
$3466	$0E00	    			MOVLW	0
$3468	$6FB6	    			MOVWF	_pid_motor+11, 1
$346A	$0EC8	    			MOVLW	200
$346C	$6FB7	    			MOVWF	_pid_motor+12, 1
$346E	$0E00	    			MOVLW	0
$3470	$6FB8	    			MOVWF	_pid_motor+13, 1
$3472	$0E80	    			MOVLW	128
$3474	$6FB9	    			MOVWF	_pid_motor+14, 1
$3476	$0EF0	    			MOVLW	240
$3478	$6FBA	    			MOVWF	_pid_motor+15, 1
$347A	$0EFA	    			MOVLW	250
$347C	$6FBB	    			MOVWF	_pid_motor+16, 1
$347E	$0E02	    			MOVLW	2
$3480	$6FBC	    			MOVWF	_pid_motor+17, 1
$3482	$0ED0	    			MOVLW	208
$3484	$6FBD	    			MOVWF	_pid_motor+18, 1
$3486	$0E07	    			MOVLW	7
$3488	$6FBE	    			MOVWF	_pid_motor+19, 1
$348A	$0E20	    			MOVLW	32
$348C	$6FBF	    			MOVWF	_pid_motor+20, 1
$348E	$0E4E	    			MOVLW	78
$3490	$6FC0	    			MOVWF	_pid_motor+21, 1
$3492	$0E00	    			MOVLW	0
$3494	$6FC1	    			MOVWF	_pid_motor+22, 1
$3496	$0E00	    			MOVLW	0
$3498	$6FC2	    			MOVWF	_pid_motor+23, 1
$349A	$0E00	    			MOVLW	0
$349C	$6FC3	    			MOVWF	_pid_motor+24, 1
$349E	$0E00	    			MOVLW	0
$34A0	$6FC4	    			MOVWF	_pid_motor+25, 1
$34A2	$0E00	    			MOVLW	0
$34A4	$6FC5	    			MOVWF	_pid_motor+26, 1
$34A6	$0E00	    			MOVLW	0
$34A8	$6FC6	    			MOVWF	_pid_motor+27, 1
$34AA	$0E00	    			MOVLW	0
$34AC	$6FC7	    			MOVWF	_pid_motor+28, 1
$34AE	$0E00	    			MOVLW	0
$34B0	$6FC8	    			MOVWF	_pid_motor+29, 1
$34B2	$0E00	    			MOVLW	0
$34B4	$6FC9	    			MOVWF	_pid_motor+30, 1
$34B6	$0E00	    			MOVLW	0
$34B8	$6FCA	    			MOVWF	_pid_motor+31, 1
$34BA	$0E00	    			MOVLW	0
$34BC	$6FCB	    			MOVWF	_pid_motor+32, 1
$34BE	$0E00	    			MOVLW	0
$34C0	$6FCC	    			MOVWF	_pid_motor+33, 1
$34C2	$0E00	    			MOVLW	0
$34C4	$6FCD	    			MOVWF	_pid_motor+34, 1
$34C6	$0E00	    			MOVLW	0
$34C8	$6FCE	    			MOVWF	_pid_motor+35, 1
$34CA	$0E00	    			MOVLW	0
$34CC	$6FCF	    			MOVWF	_pid_motor+36, 1
$34CE	$0E00	    			MOVLW	0
$34D0	$6FD0	    			MOVWF	_pid_motor+37, 1
$34D2	$0E00	    			MOVLW	0
$34D4	$6FD1	    			MOVWF	_pid_motor+38, 1
$34D6	$0E00	    			MOVLW	0
$34D8	$6FD2	    			MOVWF	_pid_motor+39, 1
$34DA	$0E00	    			MOVLW	0
$34DC	$6FD3	    			MOVWF	_pid_motor+40, 1
$34DE	$0E00	    			MOVLW	0
$34E0	$6FD4	    			MOVWF	_pid_motor+41, 1
$34E2	$0E00	    			MOVLW	0
$34E4	$6FD5	    			MOVWF	_pid_motor+42, 1
$34E6	$0E00	    			MOVLW	0
$34E8	$6FD6	    			MOVWF	_pid_motor+43, 1
$34EA	$0E00	    			MOVLW	0
$34EC	$6FD7	    			MOVWF	_pid_motor+44, 1
$34EE	$0E00	    			MOVLW	0
$34F0	$6FD8	    			MOVWF	_pid_motor+45, 1
$34F2	$0E00	    			MOVLW	0
$34F4	$6FD9	    			MOVWF	_pid_motor+46, 1
$34F6	$0E00	    			MOVLW	0
$34F8	$6FDA	    			MOVWF	_pid_motor+47, 1
$34FA	$0E66	    			MOVLW	102
$34FC	$6FDB	    			MOVWF	_pid_motor+48, 1
$34FE	$0E66	    			MOVLW	102
$3500	$6FDC	    			MOVWF	_pid_motor+49, 1
$3502	$0E66	    			MOVLW	102
$3504	$6FDD	    			MOVWF	_pid_motor+50, 1
$3506	$0E7E	    			MOVLW	126
$3508	$6FDE	    			MOVWF	_pid_motor+51, 1
$350A	$0E0A	    			MOVLW	10
$350C	$6FDF	    			MOVWF	_pid_motor+52, 1
$350E	$0ED7	    			MOVLW	215
$3510	$6FE0	    			MOVWF	_pid_motor+53, 1
$3512	$0E23	    			MOVLW	35
$3514	$6FE1	    			MOVWF	_pid_motor+54, 1
$3516	$0E7B	    			MOVLW	123
$3518	$6FE2	    			MOVWF	_pid_motor+55, 1
$351A	$0ECD	    			MOVLW	205
$351C	$6FE3	    			MOVWF	_pid_motor+56, 1
$351E	$0ECC	    			MOVLW	204
$3520	$6FE4	    			MOVWF	_pid_motor+57, 1
$3522	$0E4C	    			MOVLW	76
$3524	$6FE5	    			MOVWF	_pid_motor+58, 1
$3526	$0E7C	    			MOVLW	124
$3528	$6FE6	    			MOVWF	_pid_motor+59, 1
$352A	$0E00	    			MOVLW	0
$352C	$6FE7	    			MOVWF	_pid_motor+60, 1
$352E	$0E00	    			MOVLW	0
$3530	$6FE8	    			MOVWF	_pid_motor+61, 1
$3532	$0E00	    			MOVLW	0
$3534	$6FE9	    			MOVWF	_pid_motor+62, 1
$3536	$0E00	    			MOVLW	0
$3538	$6FEA	    			MOVWF	_pid_motor+63, 1
$353A	$0E00	    			MOVLW	0
$353C	$6FEB	    			MOVWF	_pid_motor+64, 1
$353E	$0E00	    			MOVLW	0
$3540	$6FEC	    			MOVWF	_pid_motor+65, 1
$3542	$0E00	    			MOVLW	0
$3544	$6FED	    			MOVWF	_pid_motor+66, 1
$3546	$0E80	    			MOVLW	128
$3548	$6FEE	    			MOVWF	_pid_motor+67, 1
$354A	$0EFC	    			MOVLW	252
$354C	$6FEF	    			MOVWF	_pid_motor+68, 1
$354E	$0E03	    			MOVLW	3
$3550	$6FF0	    			MOVWF	_pid_motor+69, 1
$3552	$0E00	    			MOVLW	0
$3554	$6FF1	    			MOVWF	_pid_motor+70, 1
$3556	$0E00	    			MOVLW	0
$3558	$6FF2	    			MOVWF	_pid_motor+71, 1
$355A	$0E00	    			MOVLW	0
$355C	$6FF3	    			MOVWF	_pid_motor+72, 1
$355E	$0E00	    			MOVLW	0
$3560	$6FF4	    			MOVWF	_pid_motor+73, 1
$3562	$0E96	    			MOVLW	#lstr_1_extruder
$3564	$0101	    			MOVLB	1
$3566	$6F25	    			MOVWF	_cmdPrompt+0, 1
$3568	$0E3A	    			MOVLW	@#lstr_1_extruder
$356A	$6F26	    			MOVWF	_cmdPrompt+1, 1
$356C	$0E00	    			MOVLW	@@#lstr_1_extruder
$356E	$6F27	    			MOVWF	_cmdPrompt+2, 1
$3570	$0E9E	    			MOVLW	#lstr_2_extruder
$3572	$6F28	    			MOVWF	_noEeprom+0, 1
$3574	$0E3A	    			MOVLW	@#lstr_2_extruder
$3576	$6F29	    			MOVWF	_noEeprom+1, 1
$3578	$0E00	    			MOVLW	@@#lstr_2_extruder
$357A	$6F2A	    			MOVWF	_noEeprom+2, 1
$357C	$0EB0	    			MOVLW	#lstr_3_extruder
$357E	$6F2B	    			MOVWF	_unknownCommand+0, 1
$3580	$0E3A	    			MOVLW	@#lstr_3_extruder
$3582	$6F2C	    			MOVWF	_unknownCommand+1, 1
$3584	$0E00	    			MOVLW	@@#lstr_3_extruder
$3586	$6F2D	    			MOVWF	_unknownCommand+2, 1
$3588	$0EAC	    			MOVLW	172
$358A	$6E56	    			MOVWF	_EEPROM_VERSION_ID+0, 0
$358C	$0012	    			RETURN
$358E	$	_Usart_Init:
$358E	$8AAC	    			BSF	TXSTA, 5, 0
$3590	$0E90	    			MOVLW	144
$3592	$6EAB	    			MOVWF	RCSTA, 0
$3594	$8E94	    			BSF	TRISC, 7, 0
$3596	$9C94	    			BCF	TRISC, 6, 0
$3598	$	L_Usart_Init_0:
$3598	$AA9E	    			BTFSS	PIR1, 5, 0
$359A	$D003	    			BRA	L_Usart_Init_1
$359C	$CFAE	F05F			MOVFF	RCREG, Usart_Init_tmp_L0
$35A0	$D7FB	    			BRA	L_Usart_Init_0
$35A2	$	L_Usart_Init_1:
$35A2	$0012	    			RETURN
$35A4	$	_main:
;extruder.c,1023 :: 			void main() {
;extruder.c,1027 :: 			txtPos = 0;
$35A4	$EC3B	F019			CALL	GlobalIniextruder, 1
$35A8	$6A57	    			CLRF	_txtPos, 0
;extruder.c,1030 :: 			Usart_Init(38400);
$35AA	$0E40	    			MOVLW	64
$35AC	$6EAF	    			MOVWF	SPBRG, 0
$35AE	$84AC	    			BSF	TXSTA, BRGH, 0
$35B0	$ECC7	F01A			CALL	_Usart_Init
;extruder.c,1031 :: 			initDuty(120);
$35B4	$0E78	    			MOVLW	120
$35B6	$6E5F	    			MOVWF	FARG_initDuty+0, 0
$35B8	$EC02	F016			CALL	_initDuty
;extruder.c,1032 :: 			initRegisters();
$35BC	$EC08	F016			CALL	_initRegisters
;extruder.c,1033 :: 			resetPosition();
$35C0	$EC40	F016			CALL	_resetPosition
;extruder.c,1037 :: 			printMessage(SPLASH);
$35C4	$0EB4	    			MOVLW	#lstr_22_extruder
$35C6	$0101	    			MOVLB	1
$35C8	$6F75	    			MOVWF	FARG_printMessage+0, 1
$35CA	$0E3A	    			MOVLW	@#lstr_22_extruder
$35CC	$6F76	    			MOVWF	FARG_printMessage+1, 1
$35CE	$0E00	    			MOVLW	@@#lstr_22_extruder
$35D0	$6F77	    			MOVWF	FARG_printMessage+2, 1
$35D2	$EC50	F016			CALL	_printMessage
;extruder.c,1040 :: 			if ( ! readMemory() ){
$35D6	$EC6A	F016			CALL	_readMemory
$35DA	$5200	    			MOVF	STACK_0, 1, 0
$35DC	$E108	    			BNZ	L_main_50
;extruder.c,1041 :: 			printMessage(noEeprom);
$35DE	$C128	F175			MOVFF	_noEeprom, FARG_printMessage+0
$35E2	$C129	F176			MOVFF	_noEeprom+1, FARG_printMessage+1
$35E6	$C12A	F177			MOVFF	_noEeprom+2, FARG_printMessage+2
$35EA	$EC50	F016			CALL	_printMessage
;extruder.c,1042 :: 			}
$35EE	$	L_main_50:
;extruder.c,1043 :: 			printMessage(cmdPrompt);
$35EE	$C125	F175			MOVFF	_cmdPrompt, FARG_printMessage+0
$35F2	$C126	F176			MOVFF	_cmdPrompt+1, FARG_printMessage+1
$35F6	$C127	F177			MOVFF	_cmdPrompt+2, FARG_printMessage+2
$35FA	$EC50	F016			CALL	_printMessage
;extruder.c,1048 :: 			RCON.IPEN = 1;
$35FE	$8ED0	    			BSF	RCON, 7, 0
;extruder.c,1049 :: 			INTCON.GIE = 1;
$3600	$8EF2	    			BSF	INTCON, 7, 0
;extruder.c,1050 :: 			INTCON.PEIE = 1;
$3602	$8CF2	    			BSF	INTCON, 6, 0
;extruder.c,1051 :: 			MOTOR_BRAKE_PIN = 0;
$3604	$9081	    			BCF	PORTB, 0, 0
;extruder.c,1052 :: 			while(1) {
$3606	$	L_main_51:
;extruder.c,1053 :: 			CPU_BANDWIDTH_PIN = ~CPU_BANDWIDTH_PIN;
$3606	$6A04	    			CLRF	STACK_4, 0
$3608	$BC83	    			BTFSC	PORTD, 6, 0
$360A	$2A04	    			INCF	STACK_4, 1, 0
$360C	$1C04	    			COMF	STACK_4, 0, 0
$360E	$6E00	    			MOVWF	STACK_0, 0
$3610	$0E00	    			MOVLW	0
$3612	$B000	    			BTFSC	STACK_0, 0, 0
$3614	$0E40	    			MOVLW	64
$3616	$1883	    			XORWF	PORTD, 0, 0
$3618	$0B40	    			ANDLW	64
$361A	$1A83	    			XORWF	PORTD, 1, 0
;extruder.c,1056 :: 			while ( Usart_Data_Ready() ) {
$361C	$	L_main_53:
$361C	$EC9B	F016			CALL	_Usart_Data_Ready
$3620	$5200	    			MOVF	STACK_0, 1, 0
$3622	$B4D8	    			BTFSC	STATUS, Z, 0
$3624	$D236	    			BRA	L_main_54
;extruder.c,1057 :: 			x = Usart_Read();
$3626	$ECA1	F016			CALL	_Usart_Read
;extruder.c,1063 :: 			if ( pushChar(x) ){
$362A	$C000	F05F			MOVFF	STACK_0, FARG_pushChar+0
$362E	$ECAA	F016			CALL	_pushChar
$3632	$5000	    			MOVF	STACK_0, 0, 0
$3634	$1001	    			IORWF	STACK_0+1, 0, 0
$3636	$B4D8	    			BTFSC	STATUS, Z, 0
$3638	$D22B	    			BRA	L_main_55
;extruder.c,1066 :: 			if ( commandMatches(COMMAND_STATUS ) ){
$363A	$0EC4	    			MOVLW	#lstr_23_extruder
$363C	$0101	    			MOVLB	1
$363E	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3640	$0E3A	    			MOVLW	@#lstr_23_extruder
$3642	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3644	$0E00	    			MOVLW	@@#lstr_23_extruder
$3646	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$3648	$ECD3	F016			CALL	_commandMatches
$364C	$5200	    			MOVF	STACK_0, 1, 0
$364E	$E003	    			BZ	L_main_56
;extruder.c,1067 :: 			printStatus();
$3650	$EC0B	F017			CALL	_printStatus
;extruder.c,1068 :: 			}
$3654	$D215	    			BRA	L_main_57
$3656	$	L_main_56:
;extruder.c,1069 :: 			else if ( commandMatches(COMMAND_SAVE_EEPROM )){
$3656	$0EC6	    			MOVLW	#lstr_24_extruder
$3658	$0101	    			MOVLB	1
$365A	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$365C	$0E3A	    			MOVLW	@#lstr_24_extruder
$365E	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3660	$0E00	    			MOVLW	@@#lstr_24_extruder
$3662	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$3664	$ECD3	F016			CALL	_commandMatches
$3668	$5200	    			MOVF	STACK_0, 1, 0
$366A	$E003	    			BZ	L_main_58
;extruder.c,1070 :: 			writeMemory();
$366C	$ECB2	F018			CALL	_writeMemory
;extruder.c,1071 :: 			}
$3670	$D207	    			BRA	L_main_59
$3672	$	L_main_58:
;extruder.c,1072 :: 			else if ( commandMatches(COMMAND_READ_EEPROM )){
$3672	$0EC8	    			MOVLW	#lstr_25_extruder
$3674	$0101	    			MOVLB	1
$3676	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3678	$0E3A	    			MOVLW	@#lstr_25_extruder
$367A	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$367C	$0E00	    			MOVLW	@@#lstr_25_extruder
$367E	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$3680	$ECD3	F016			CALL	_commandMatches
$3684	$5200	    			MOVF	STACK_0, 1, 0
$3686	$E003	    			BZ	L_main_60
;extruder.c,1073 :: 			readMemory();
$3688	$EC6A	F016			CALL	_readMemory
;extruder.c,1074 :: 			}
$368C	$D1F9	    			BRA	L_main_61
$368E	$	L_main_60:
;extruder.c,1075 :: 			else if ( commandMatches(COMMAND_MOTOR_ENABLE)){
$368E	$0ECC	    			MOVLW	#lstr_26_extruder
$3690	$0101	    			MOVLB	1
$3692	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3694	$0E3A	    			MOVLW	@#lstr_26_extruder
$3696	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3698	$0E00	    			MOVLW	@@#lstr_26_extruder
$369A	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$369C	$ECD3	F016			CALL	_commandMatches
$36A0	$5200	    			MOVF	STACK_0, 1, 0
$36A2	$E00A	    			BZ	L_main_62
;extruder.c,1076 :: 			motorGlobalEnable = findIntValue(cmdBuffer);
$36A4	$0EF5	    			MOVLW	_cmdBuffer
$36A6	$0101	    			MOVLB	1
$36A8	$6F75	    			MOVWF	FARG_findIntValue+0, 1
$36AA	$0E00	    			MOVLW	@_cmdBuffer
$36AC	$6F76	    			MOVWF	FARG_findIntValue+1, 1
$36AE	$ECDC	F018			CALL	_findIntValue
$36B2	$C000	F02D			MOVFF	STACK_0, _motorGlobalEnable
;extruder.c,1077 :: 			}
$36B6	$D1E4	    			BRA	L_main_63
$36B8	$	L_main_62:
;extruder.c,1078 :: 			else if ( commandMatches(COMMAND_HEATER_ENABLE)){
$36B8	$0ED0	    			MOVLW	#lstr_27_extruder
$36BA	$0101	    			MOVLB	1
$36BC	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$36BE	$0E3A	    			MOVLW	@#lstr_27_extruder
$36C0	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$36C2	$0E00	    			MOVLW	@@#lstr_27_extruder
$36C4	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$36C6	$ECD3	F016			CALL	_commandMatches
$36CA	$5200	    			MOVF	STACK_0, 1, 0
$36CC	$E00A	    			BZ	L_main_64
;extruder.c,1079 :: 			heaterGlobalEnable = findIntValue(cmdBuffer);
$36CE	$0EF5	    			MOVLW	_cmdBuffer
$36D0	$0101	    			MOVLB	1
$36D2	$6F75	    			MOVWF	FARG_findIntValue+0, 1
$36D4	$0E00	    			MOVLW	@_cmdBuffer
$36D6	$6F76	    			MOVWF	FARG_findIntValue+1, 1
$36D8	$ECDC	F018			CALL	_findIntValue
$36DC	$C000	F021			MOVFF	STACK_0, _heaterGlobalEnable
;extruder.c,1080 :: 			}
$36E0	$D1CF	    			BRA	L_main_65
$36E2	$	L_main_64:
;extruder.c,1081 :: 			else if ( commandMatches(COMMAND_DEFAULTS)){
$36E2	$0ED4	    			MOVLW	#lstr_28_extruder
$36E4	$0101	    			MOVLB	1
$36E6	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$36E8	$0E3A	    			MOVLW	@#lstr_28_extruder
$36EA	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$36EC	$0E00	    			MOVLW	@@#lstr_28_extruder
$36EE	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$36F0	$ECD3	F016			CALL	_commandMatches
$36F4	$5200	    			MOVF	STACK_0, 1, 0
$36F6	$E003	    			BZ	L_main_66
;extruder.c,1083 :: 			clearMemory();
$36F8	$ECF7	F018			CALL	_clearMemory
;extruder.c,1084 :: 			}
$36FC	$D1C1	    			BRA	L_main_67
$36FE	$	L_main_66:
;extruder.c,1085 :: 			else if ( commandMatches(COMMAND_HEATER_FFO)){
$36FE	$0ED6	    			MOVLW	#lstr_29_extruder
$3700	$0101	    			MOVLB	1
$3702	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3704	$0E3A	    			MOVLW	@#lstr_29_extruder
$3706	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3708	$0E00	    			MOVLW	@@#lstr_29_extruder
$370A	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$370C	$ECD3	F016			CALL	_commandMatches
$3710	$5200	    			MOVF	STACK_0, 1, 0
$3712	$E010	    			BZ	L_main_68
;extruder.c,1086 :: 			pid_heater.ff0gain = findFloatValue(cmdBuffer);
$3714	$0EF5	    			MOVLW	_cmdBuffer
$3716	$0101	    			MOVLB	1
$3718	$6F75	    			MOVWF	FARG_findFloatValue+0, 1
$371A	$0E00	    			MOVLW	@_cmdBuffer
$371C	$6F76	    			MOVWF	FARG_findFloatValue+1, 1
$371E	$EC05	F019			CALL	_findFloatValue
$3722	$C000	F09D			MOVFF	STACK_0, _pid_heater+60
$3726	$C001	F09E			MOVFF	STACK_0+1, _pid_heater+61
$372A	$C002	F09F			MOVFF	STACK_0+2, _pid_heater+62
$372E	$C003	F0A0			MOVFF	STACK_0+3, _pid_heater+63
;extruder.c,1087 :: 			}
$3732	$D1A6	    			BRA	L_main_69
$3734	$	L_main_68:
;extruder.c,1088 :: 			else if ( commandMatches(COMMAND_HEATER_FEEDBACK)){
$3734	$0EDC	    			MOVLW	#lstr_30_extruder
$3736	$0101	    			MOVLB	1
$3738	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$373A	$0E3A	    			MOVLW	@#lstr_30_extruder
$373C	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$373E	$0E00	    			MOVLW	@@#lstr_30_extruder
$3740	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$3742	$ECD3	F016			CALL	_commandMatches
$3746	$5200	    			MOVF	STACK_0, 1, 0
$3748	$E012	    			BZ	L_main_70
;extruder.c,1089 :: 			pid_heater.feedback = findIntValue(cmdBuffer);
$374A	$0EF5	    			MOVLW	_cmdBuffer
$374C	$0101	    			MOVLB	1
$374E	$6F75	    			MOVWF	FARG_findIntValue+0, 1
$3750	$0E00	    			MOVLW	@_cmdBuffer
$3752	$6F76	    			MOVWF	FARG_findIntValue+1, 1
$3754	$ECDC	F018			CALL	_findIntValue
$3758	$C000	F065			MOVFF	STACK_0, _pid_heater+4
$375C	$C001	F066			MOVFF	STACK_0+1, _pid_heater+5
$3760	$0E00	    			MOVLW	0
$3762	$BE01	    			BTFSC	STACK_0+1, 7, 0
$3764	$0EFF	    			MOVLW	255
$3766	$0100	    			MOVLB	0
$3768	$6F67	    			MOVWF	_pid_heater+6, 1
$376A	$6F68	    			MOVWF	_pid_heater+7, 1
;extruder.c,1090 :: 			}
$376C	$D189	    			BRA	L_main_71
$376E	$	L_main_70:
;extruder.c,1091 :: 			else if ( commandMatches(COMMAND_HEATER_KP )){
$376E	$0EE0	    			MOVLW	#lstr_31_extruder
$3770	$0101	    			MOVLB	1
$3772	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3774	$0E3A	    			MOVLW	@#lstr_31_extruder
$3776	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3778	$0E00	    			MOVLW	@@#lstr_31_extruder
$377A	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$377C	$ECD3	F016			CALL	_commandMatches
$3780	$5200	    			MOVF	STACK_0, 1, 0
$3782	$E010	    			BZ	L_main_72
;extruder.c,1092 :: 			pid_heater.pgain = findFloatValue(cmdBuffer);
$3784	$0EF5	    			MOVLW	_cmdBuffer
$3786	$0101	    			MOVLB	1
$3788	$6F75	    			MOVWF	FARG_findFloatValue+0, 1
$378A	$0E00	    			MOVLW	@_cmdBuffer
$378C	$6F76	    			MOVWF	FARG_findFloatValue+1, 1
$378E	$EC05	F019			CALL	_findFloatValue
$3792	$C000	F091			MOVFF	STACK_0, _pid_heater+48
$3796	$C001	F092			MOVFF	STACK_0+1, _pid_heater+49
$379A	$C002	F093			MOVFF	STACK_0+2, _pid_heater+50
$379E	$C003	F094			MOVFF	STACK_0+3, _pid_heater+51
;extruder.c,1093 :: 			}
$37A2	$D16E	    			BRA	L_main_73
$37A4	$	L_main_72:
;extruder.c,1094 :: 			else if ( commandMatches(COMMAND_HEATER_KI )){
$37A4	$0EE4	    			MOVLW	#lstr_32_extruder
$37A6	$0101	    			MOVLB	1
$37A8	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$37AA	$0E3A	    			MOVLW	@#lstr_32_extruder
$37AC	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$37AE	$0E00	    			MOVLW	@@#lstr_32_extruder
$37B0	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$37B2	$ECD3	F016			CALL	_commandMatches
$37B6	$5200	    			MOVF	STACK_0, 1, 0
$37B8	$E010	    			BZ	L_main_74
;extruder.c,1095 :: 			pid_heater.igain = findFloatValue(cmdBuffer);
$37BA	$0EF5	    			MOVLW	_cmdBuffer
$37BC	$0101	    			MOVLB	1
$37BE	$6F75	    			MOVWF	FARG_findFloatValue+0, 1
$37C0	$0E00	    			MOVLW	@_cmdBuffer
$37C2	$6F76	    			MOVWF	FARG_findFloatValue+1, 1
$37C4	$EC05	F019			CALL	_findFloatValue
$37C8	$C000	F095			MOVFF	STACK_0, _pid_heater+52
$37CC	$C001	F096			MOVFF	STACK_0+1, _pid_heater+53
$37D0	$C002	F097			MOVFF	STACK_0+2, _pid_heater+54
$37D4	$C003	F098			MOVFF	STACK_0+3, _pid_heater+55
;extruder.c,1096 :: 			}
$37D8	$D153	    			BRA	L_main_75
$37DA	$	L_main_74:
;extruder.c,1097 :: 			else if ( commandMatches(COMMAND_HEATER_KD )){
$37DA	$0EE8	    			MOVLW	#lstr_33_extruder
$37DC	$0101	    			MOVLB	1
$37DE	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$37E0	$0E3A	    			MOVLW	@#lstr_33_extruder
$37E2	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$37E4	$0E00	    			MOVLW	@@#lstr_33_extruder
$37E6	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$37E8	$ECD3	F016			CALL	_commandMatches
$37EC	$5200	    			MOVF	STACK_0, 1, 0
$37EE	$E010	    			BZ	L_main_76
;extruder.c,1098 :: 			pid_heater.dgain = findFloatValue(cmdBuffer);
$37F0	$0EF5	    			MOVLW	_cmdBuffer
$37F2	$0101	    			MOVLB	1
$37F4	$6F75	    			MOVWF	FARG_findFloatValue+0, 1
$37F6	$0E00	    			MOVLW	@_cmdBuffer
$37F8	$6F76	    			MOVWF	FARG_findFloatValue+1, 1
$37FA	$EC05	F019			CALL	_findFloatValue
$37FE	$C000	F099			MOVFF	STACK_0, _pid_heater+56
$3802	$C001	F09A			MOVFF	STACK_0+1, _pid_heater+57
$3806	$C002	F09B			MOVFF	STACK_0+2, _pid_heater+58
$380A	$C003	F09C			MOVFF	STACK_0+3, _pid_heater+59
;extruder.c,1099 :: 			}
$380E	$D138	    			BRA	L_main_77
$3810	$	L_main_76:
;extruder.c,1100 :: 			else if ( commandMatches(COMMAND_HEATER_DUTY )){
$3810	$0EEC	    			MOVLW	#lstr_34_extruder
$3812	$0101	    			MOVLB	1
$3814	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3816	$0E3A	    			MOVLW	@#lstr_34_extruder
$3818	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$381A	$0E00	    			MOVLW	@@#lstr_34_extruder
$381C	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$381E	$ECD3	F016			CALL	_commandMatches
$3822	$5200	    			MOVF	STACK_0, 1, 0
$3824	$E00C	    			BZ	L_main_78
;extruder.c,1101 :: 			debugHeaterDuty = findIntValue(cmdBuffer);
$3826	$0EF5	    			MOVLW	_cmdBuffer
$3828	$0101	    			MOVLB	1
$382A	$6F75	    			MOVWF	FARG_findIntValue+0, 1
$382C	$0E00	    			MOVLW	@_cmdBuffer
$382E	$6F76	    			MOVWF	FARG_findIntValue+1, 1
$3830	$ECDC	F018			CALL	_findIntValue
$3834	$C000	F05D			MOVFF	STACK_0, _debugHeaterDuty
$3838	$C001	F05E			MOVFF	STACK_0+1, _debugHeaterDuty+1
;extruder.c,1102 :: 			}
$383C	$D121	    			BRA	L_main_79
$383E	$	L_main_78:
;extruder.c,1103 :: 			else if ( commandMatches(COMMAND_HT )){
$383E	$0EF0	    			MOVLW	#lstr_35_extruder
$3840	$0101	    			MOVLB	1
$3842	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3844	$0E3A	    			MOVLW	@#lstr_35_extruder
$3846	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3848	$0E00	    			MOVLW	@@#lstr_35_extruder
$384A	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$384C	$ECD3	F016			CALL	_commandMatches
$3850	$5200	    			MOVF	STACK_0, 1, 0
$3852	$E012	    			BZ	L_main_80
;extruder.c,1104 :: 			pid_heater.command = findIntValue(cmdBuffer);
$3854	$0EF5	    			MOVLW	_cmdBuffer
$3856	$0101	    			MOVLB	1
$3858	$6F75	    			MOVWF	FARG_findIntValue+0, 1
$385A	$0E00	    			MOVLW	@_cmdBuffer
$385C	$6F76	    			MOVWF	FARG_findIntValue+1, 1
$385E	$ECDC	F018			CALL	_findIntValue
$3862	$C000	F061			MOVFF	STACK_0, _pid_heater+0
$3866	$C001	F062			MOVFF	STACK_0+1, _pid_heater+1
$386A	$0E00	    			MOVLW	0
$386C	$BE01	    			BTFSC	STACK_0+1, 7, 0
$386E	$0EFF	    			MOVLW	255
$3870	$0100	    			MOVLB	0
$3872	$6F63	    			MOVWF	_pid_heater+2, 1
$3874	$6F64	    			MOVWF	_pid_heater+3, 1
;extruder.c,1105 :: 			}
$3876	$D104	    			BRA	L_main_81
$3878	$	L_main_80:
;extruder.c,1106 :: 			else if ( commandMatches(COMMAND_MOTOR_KP )){
$3878	$0EF4	    			MOVLW	#lstr_36_extruder
$387A	$0101	    			MOVLB	1
$387C	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$387E	$0E3A	    			MOVLW	@#lstr_36_extruder
$3880	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3882	$0E00	    			MOVLW	@@#lstr_36_extruder
$3884	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$3886	$ECD3	F016			CALL	_commandMatches
$388A	$5200	    			MOVF	STACK_0, 1, 0
$388C	$E010	    			BZ	L_main_82
;extruder.c,1107 :: 			pid_motor.pgain = findFloatValue(cmdBuffer);
$388E	$0EF5	    			MOVLW	_cmdBuffer
$3890	$0101	    			MOVLB	1
$3892	$6F75	    			MOVWF	FARG_findFloatValue+0, 1
$3894	$0E00	    			MOVLW	@_cmdBuffer
$3896	$6F76	    			MOVWF	FARG_findFloatValue+1, 1
$3898	$EC05	F019			CALL	_findFloatValue
$389C	$C000	F0DB			MOVFF	STACK_0, _pid_motor+48
$38A0	$C001	F0DC			MOVFF	STACK_0+1, _pid_motor+49
$38A4	$C002	F0DD			MOVFF	STACK_0+2, _pid_motor+50
$38A8	$C003	F0DE			MOVFF	STACK_0+3, _pid_motor+51
;extruder.c,1108 :: 			}
$38AC	$D0E9	    			BRA	L_main_83
$38AE	$	L_main_82:
;extruder.c,1109 :: 			else if ( commandMatches(COMMAND_MOTOR_KI )){
$38AE	$0EF8	    			MOVLW	#lstr_37_extruder
$38B0	$0101	    			MOVLB	1
$38B2	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$38B4	$0E3A	    			MOVLW	@#lstr_37_extruder
$38B6	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$38B8	$0E00	    			MOVLW	@@#lstr_37_extruder
$38BA	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$38BC	$ECD3	F016			CALL	_commandMatches
$38C0	$5200	    			MOVF	STACK_0, 1, 0
$38C2	$E010	    			BZ	L_main_84
;extruder.c,1110 :: 			pid_motor.igain = findFloatValue(cmdBuffer);
$38C4	$0EF5	    			MOVLW	_cmdBuffer
$38C6	$0101	    			MOVLB	1
$38C8	$6F75	    			MOVWF	FARG_findFloatValue+0, 1
$38CA	$0E00	    			MOVLW	@_cmdBuffer
$38CC	$6F76	    			MOVWF	FARG_findFloatValue+1, 1
$38CE	$EC05	F019			CALL	_findFloatValue
$38D2	$C000	F0DF			MOVFF	STACK_0, _pid_motor+52
$38D6	$C001	F0E0			MOVFF	STACK_0+1, _pid_motor+53
$38DA	$C002	F0E1			MOVFF	STACK_0+2, _pid_motor+54
$38DE	$C003	F0E2			MOVFF	STACK_0+3, _pid_motor+55
;extruder.c,1111 :: 			}
$38E2	$D0CE	    			BRA	L_main_85
$38E4	$	L_main_84:
;extruder.c,1112 :: 			else if ( commandMatches(COMMAND_MOTOR_KD )){
$38E4	$0EFC	    			MOVLW	#lstr_38_extruder
$38E6	$0101	    			MOVLB	1
$38E8	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$38EA	$0E3A	    			MOVLW	@#lstr_38_extruder
$38EC	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$38EE	$0E00	    			MOVLW	@@#lstr_38_extruder
$38F0	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$38F2	$ECD3	F016			CALL	_commandMatches
$38F6	$5200	    			MOVF	STACK_0, 1, 0
$38F8	$E010	    			BZ	L_main_86
;extruder.c,1113 :: 			pid_motor.dgain = findFloatValue(cmdBuffer);
$38FA	$0EF5	    			MOVLW	_cmdBuffer
$38FC	$0101	    			MOVLB	1
$38FE	$6F75	    			MOVWF	FARG_findFloatValue+0, 1
$3900	$0E00	    			MOVLW	@_cmdBuffer
$3902	$6F76	    			MOVWF	FARG_findFloatValue+1, 1
$3904	$EC05	F019			CALL	_findFloatValue
$3908	$C000	F0E3			MOVFF	STACK_0, _pid_motor+56
$390C	$C001	F0E4			MOVFF	STACK_0+1, _pid_motor+57
$3910	$C002	F0E5			MOVFF	STACK_0+2, _pid_motor+58
$3914	$C003	F0E6			MOVFF	STACK_0+3, _pid_motor+59
;extruder.c,1114 :: 			}
$3918	$D0B3	    			BRA	L_main_87
$391A	$	L_main_86:
;extruder.c,1115 :: 			else if ( commandMatches(COMMAND_MOTOR_FF0 )){
$391A	$0E00	    			MOVLW	#lstr_39_extruder
$391C	$0101	    			MOVLB	1
$391E	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3920	$0E3B	    			MOVLW	@#lstr_39_extruder
$3922	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3924	$0E00	    			MOVLW	@@#lstr_39_extruder
$3926	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$3928	$ECD3	F016			CALL	_commandMatches
$392C	$5200	    			MOVF	STACK_0, 1, 0
$392E	$E010	    			BZ	L_main_88
;extruder.c,1116 :: 			pid_motor.ff1gain = findFloatValue(cmdBuffer);
$3930	$0EF5	    			MOVLW	_cmdBuffer
$3932	$0101	    			MOVLB	1
$3934	$6F75	    			MOVWF	FARG_findFloatValue+0, 1
$3936	$0E00	    			MOVLW	@_cmdBuffer
$3938	$6F76	    			MOVWF	FARG_findFloatValue+1, 1
$393A	$EC05	F019			CALL	_findFloatValue
$393E	$C000	F0EB			MOVFF	STACK_0, _pid_motor+64
$3942	$C001	F0EC			MOVFF	STACK_0+1, _pid_motor+65
$3946	$C002	F0ED			MOVFF	STACK_0+2, _pid_motor+66
$394A	$C003	F0EE			MOVFF	STACK_0+3, _pid_motor+67
;extruder.c,1117 :: 			}
$394E	$D098	    			BRA	L_main_89
$3950	$	L_main_88:
;extruder.c,1118 :: 			else if ( commandMatches(COMMAND_MOTOR_DUTY )){
$3950	$0E04	    			MOVLW	#lstr_40_extruder
$3952	$0101	    			MOVLB	1
$3954	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3956	$0E3B	    			MOVLW	@#lstr_40_extruder
$3958	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$395A	$0E00	    			MOVLW	@@#lstr_40_extruder
$395C	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$395E	$ECD3	F016			CALL	_commandMatches
$3962	$5200	    			MOVF	STACK_0, 1, 0
$3964	$E00C	    			BZ	L_main_90
;extruder.c,1119 :: 			debugMotorDuty = findIntValue(cmdBuffer);
$3966	$0EF5	    			MOVLW	_cmdBuffer
$3968	$0101	    			MOVLB	1
$396A	$6F75	    			MOVWF	FARG_findIntValue+0, 1
$396C	$0E00	    			MOVLW	@_cmdBuffer
$396E	$6F76	    			MOVWF	FARG_findIntValue+1, 1
$3970	$ECDC	F018			CALL	_findIntValue
$3974	$C000	F11D			MOVFF	STACK_0, _debugMotorDuty
$3978	$C001	F11E			MOVFF	STACK_0+1, _debugMotorDuty+1
;extruder.c,1121 :: 			}
$397C	$D081	    			BRA	L_main_91
$397E	$	L_main_90:
;extruder.c,1122 :: 			else if ( commandMatches(COMMAND_MOTOR_POS )){
$397E	$0E08	    			MOVLW	#lstr_41_extruder
$3980	$0101	    			MOVLB	1
$3982	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3984	$0E3B	    			MOVLW	@#lstr_41_extruder
$3986	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3988	$0E00	    			MOVLW	@@#lstr_41_extruder
$398A	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$398C	$ECD3	F016			CALL	_commandMatches
$3990	$5200	    			MOVF	STACK_0, 1, 0
$3992	$E010	    			BZ	L_main_92
;extruder.c,1123 :: 			pid_motor.command = findLongValue(cmdBuffer);
$3994	$0EF5	    			MOVLW	_cmdBuffer
$3996	$0101	    			MOVLB	1
$3998	$6F75	    			MOVWF	FARG_findLongValue+0, 1
$399A	$0E00	    			MOVLW	@_cmdBuffer
$399C	$6F76	    			MOVWF	FARG_findLongValue+1, 1
$399E	$EC20	F019			CALL	_findLongValue
$39A2	$C000	F0AB			MOVFF	STACK_0, _pid_motor+0
$39A6	$C001	F0AC			MOVFF	STACK_0+1, _pid_motor+1
$39AA	$C002	F0AD			MOVFF	STACK_0+2, _pid_motor+2
$39AE	$C003	F0AE			MOVFF	STACK_0+3, _pid_motor+3
;extruder.c,1124 :: 			}
$39B2	$D066	    			BRA	L_main_93
$39B4	$	L_main_92:
;extruder.c,1125 :: 			else if ( commandMatches(COMMAND_MOTOR_SPEED )){
$39B4	$0E0E	    			MOVLW	#lstr_42_extruder
$39B6	$0101	    			MOVLB	1
$39B8	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$39BA	$0E3B	    			MOVLW	@#lstr_42_extruder
$39BC	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$39BE	$0E00	    			MOVLW	@@#lstr_42_extruder
$39C0	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$39C2	$ECD3	F016			CALL	_commandMatches
$39C6	$5200	    			MOVF	STACK_0, 1, 0
$39C8	$E00C	    			BZ	L_main_94
;extruder.c,1126 :: 			debugMotorSpeed = findIntValue(cmdBuffer);
$39CA	$0EF5	    			MOVLW	_cmdBuffer
$39CC	$0101	    			MOVLB	1
$39CE	$6F75	    			MOVWF	FARG_findIntValue+0, 1
$39D0	$0E00	    			MOVLW	@_cmdBuffer
$39D2	$6F76	    			MOVWF	FARG_findIntValue+1, 1
$39D4	$ECDC	F018			CALL	_findIntValue
$39D8	$C000	F11F			MOVFF	STACK_0, _debugMotorSpeed
$39DC	$C001	F120			MOVFF	STACK_0+1, _debugMotorSpeed+1
;extruder.c,1127 :: 			}
$39E0	$D04F	    			BRA	L_main_95
$39E2	$	L_main_94:
;extruder.c,1128 :: 			else if ( commandMatches(COMMAND_MOTOR_FEEDBACK)){
$39E2	$0E12	    			MOVLW	#lstr_43_extruder
$39E4	$0101	    			MOVLB	1
$39E6	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$39E8	$0E3B	    			MOVLW	@#lstr_43_extruder
$39EA	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$39EC	$0E00	    			MOVLW	@@#lstr_43_extruder
$39EE	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$39F0	$ECD3	F016			CALL	_commandMatches
$39F4	$5200	    			MOVF	STACK_0, 1, 0
$39F6	$E010	    			BZ	L_main_96
;extruder.c,1129 :: 			pid_motor.feedback = findLongValue(cmdBuffer);
$39F8	$0EF5	    			MOVLW	_cmdBuffer
$39FA	$0101	    			MOVLB	1
$39FC	$6F75	    			MOVWF	FARG_findLongValue+0, 1
$39FE	$0E00	    			MOVLW	@_cmdBuffer
$3A00	$6F76	    			MOVWF	FARG_findLongValue+1, 1
$3A02	$EC20	F019			CALL	_findLongValue
$3A06	$C000	F0AF			MOVFF	STACK_0, _pid_motor+4
$3A0A	$C001	F0B0			MOVFF	STACK_0+1, _pid_motor+5
$3A0E	$C002	F0B1			MOVFF	STACK_0+2, _pid_motor+6
$3A12	$C003	F0B2			MOVFF	STACK_0+3, _pid_motor+7
;extruder.c,1131 :: 			}
$3A16	$D034	    			BRA	L_main_97
$3A18	$	L_main_96:
;extruder.c,1132 :: 			else if ( commandMatches(COMMAND_FLOWCOMP)){
$3A18	$0E16	    			MOVLW	#lstr_44_extruder
$3A1A	$0101	    			MOVLB	1
$3A1C	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3A1E	$0E3B	    			MOVLW	@#lstr_44_extruder
$3A20	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3A22	$0E00	    			MOVLW	@@#lstr_44_extruder
$3A24	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$3A26	$ECD3	F016			CALL	_commandMatches
$3A2A	$5200	    			MOVF	STACK_0, 1, 0
$3A2C	$E00A	    			BZ	L_main_98
;extruder.c,1133 :: 			meltFlowComp = findIntValue(cmdBuffer);
$3A2E	$0EF5	    			MOVLW	_cmdBuffer
$3A30	$0101	    			MOVLB	1
$3A32	$6F75	    			MOVWF	FARG_findIntValue+0, 1
$3A34	$0E00	    			MOVLW	@_cmdBuffer
$3A36	$6F76	    			MOVWF	FARG_findIntValue+1, 1
$3A38	$ECDC	F018			CALL	_findIntValue
$3A3C	$C000	F022			MOVFF	STACK_0, _meltFlowComp
;extruder.c,1134 :: 			}
$3A40	$D01F	    			BRA	L_main_99
$3A42	$	L_main_98:
;extruder.c,1135 :: 			else if ( commandMatches(COMMAND_MOTOR_TEST)){
$3A42	$0E1A	    			MOVLW	#lstr_45_extruder
$3A44	$0101	    			MOVLB	1
$3A46	$6F75	    			MOVWF	FARG_commandMatches+0, 1
$3A48	$0E3B	    			MOVLW	@#lstr_45_extruder
$3A4A	$6F76	    			MOVWF	FARG_commandMatches+1, 1
$3A4C	$0E00	    			MOVLW	@@#lstr_45_extruder
$3A4E	$6F77	    			MOVWF	FARG_commandMatches+2, 1
$3A50	$ECD3	F016			CALL	_commandMatches
$3A54	$5200	    			MOVF	STACK_0, 1, 0
$3A56	$E005	    			BZ	L_main_100
;extruder.c,1137 :: 			simulateDuration = SIMULATE_DURATION;
$3A58	$0EB8	    			MOVLW	184
$3A5A	$6E5B	    			MOVWF	_simulateDuration, 0
$3A5C	$0E0B	    			MOVLW	11
$3A5E	$6E5C	    			MOVWF	_simulateDuration+1, 0
;extruder.c,1138 :: 			}
$3A60	$D00F	    			BRA	L_main_101
$3A62	$	L_main_100:
;extruder.c,1141 :: 			printMessage(unknownCommand);
$3A62	$C12B	F175			MOVFF	_unknownCommand, FARG_printMessage+0
$3A66	$C12C	F176			MOVFF	_unknownCommand+1, FARG_printMessage+1
$3A6A	$C12D	F177			MOVFF	_unknownCommand+2, FARG_printMessage+2
$3A6E	$EC50	F016			CALL	_printMessage
;extruder.c,1142 :: 			USART_Send_String(cmdBuffer);
$3A72	$0EF5	    			MOVLW	_cmdBuffer
$3A74	$0101	    			MOVLB	1
$3A76	$6FC8	    			MOVWF	FARG_USART_Send_String+0, 1
$3A78	$0E00	    			MOVLW	@_cmdBuffer
$3A7A	$6FC9	    			MOVWF	FARG_USART_Send_String+1, 1
$3A7C	$EC7A	F011			CALL	_USART_Send_String
;extruder.c,1144 :: 			}
$3A80	$	L_main_101:
$3A80	$	L_main_99:
$3A80	$	L_main_97:
$3A80	$	L_main_95:
$3A80	$	L_main_93:
$3A80	$	L_main_91:
$3A80	$	L_main_89:
$3A80	$	L_main_87:
$3A80	$	L_main_85:
$3A80	$	L_main_83:
$3A80	$	L_main_81:
$3A80	$	L_main_79:
$3A80	$	L_main_77:
$3A80	$	L_main_75:
$3A80	$	L_main_73:
$3A80	$	L_main_71:
$3A80	$	L_main_69:
$3A80	$	L_main_67:
$3A80	$	L_main_65:
$3A80	$	L_main_63:
$3A80	$	L_main_61:
$3A80	$	L_main_59:
$3A80	$	L_main_57:
;extruder.c,1145 :: 			printMessage(cmdPrompt);
$3A80	$C125	F175			MOVFF	_cmdPrompt, FARG_printMessage+0
$3A84	$C126	F176			MOVFF	_cmdPrompt+1, FARG_printMessage+1
$3A88	$C127	F177			MOVFF	_cmdPrompt+2, FARG_printMessage+2
$3A8C	$EC50	F016			CALL	_printMessage
;extruder.c,1146 :: 			}
$3A90	$	L_main_55:
;extruder.c,1149 :: 			}
$3A90	$D5C5	    			BRA	L_main_53
$3A92	$	L_main_54:
;extruder.c,1150 :: 			};
$3A92	$D5B9	    			BRA	L_main_51
;extruder.c,1152 :: 			}//~!
$3A94	$D7FF	    			BRA	$
$3A96	$430A	    			DATA	DATA lstr_1_extruder
$3A98	$646D	    			DATA	DATA lstr_1_extruder
$3A9A	$3E3A	    			DATA	DATA lstr_1_extruder
$3A9C	$FF00	    			DATA	DATA
$3A9E	$4E0A	    			DATA	DATA lstr_2_extruder
$3AA0	$206F	    			DATA	DATA lstr_2_extruder
$3AA2	$4545	    			DATA	DATA lstr_2_extruder
$3AA4	$5250	    			DATA	DATA lstr_2_extruder
$3AA6	$4D4F	    			DATA	DATA lstr_2_extruder
$3AA8	$4420	    			DATA	DATA lstr_2_extruder
$3AAA	$7461	    			DATA	DATA lstr_2_extruder
$3AAC	$2E61	    			DATA	DATA lstr_2_extruder
$3AAE	$FF00	    			DATA	DATA
$3AB0	$3F0A	    			DATA	DATA lstr_3_extruder
$3AB2	$003A	    			DATA	DATA lstr_3_extruder
$3AB4	$7845	    			DATA	DATA lstr_22_extruder
$3AB6	$7274	    			DATA	DATA lstr_22_extruder
$3AB8	$6475	    			DATA	DATA lstr_22_extruder
$3ABA	$7265	    			DATA	DATA lstr_22_extruder
$3ABC	$7620	    			DATA	DATA lstr_22_extruder
$3ABE	$2E30	    			DATA	DATA lstr_22_extruder
$3AC0	$0032	    			DATA	DATA lstr_22_extruder
$3AC2	$FF00	    			DATA	DATA
$3AC4	$0073	    			DATA	DATA lstr_23_extruder
$3AC6	$0076	    			DATA	DATA lstr_24_extruder
$3AC8	$6472	    			DATA	DATA lstr_25_extruder
$3ACA	$FF00	    			DATA	DATA
$3ACC	$676D	    			DATA	DATA lstr_26_extruder
$3ACE	$0065	    			DATA	DATA lstr_26_extruder
$3AD0	$6768	    			DATA	DATA lstr_27_extruder
$3AD2	$0065	    			DATA	DATA lstr_27_extruder
$3AD4	$0064	    			DATA	DATA lstr_28_extruder
$3AD6	$6668	    			DATA	DATA lstr_29_extruder
$3AD8	$3067	    			DATA	DATA lstr_29_extruder
$3ADA	$FF00	    			DATA	DATA
$3ADC	$6668	    			DATA	DATA lstr_30_extruder
$3ADE	$FF00	    			DATA	DATA
$3AE0	$7068	    			DATA	DATA lstr_31_extruder
$3AE2	$FF00	    			DATA	DATA
$3AE4	$6968	    			DATA	DATA lstr_32_extruder
$3AE6	$FF00	    			DATA	DATA
$3AE8	$6468	    			DATA	DATA lstr_33_extruder
$3AEA	$FF00	    			DATA	DATA
$3AEC	$7968	    			DATA	DATA lstr_34_extruder
$3AEE	$FF00	    			DATA	DATA
$3AF0	$7468	    			DATA	DATA lstr_35_extruder
$3AF2	$FF00	    			DATA	DATA
$3AF4	$706D	    			DATA	DATA lstr_36_extruder
$3AF6	$FF00	    			DATA	DATA
$3AF8	$696D	    			DATA	DATA lstr_37_extruder
$3AFA	$FF00	    			DATA	DATA
$3AFC	$646D	    			DATA	DATA lstr_38_extruder
$3AFE	$FF00	    			DATA	DATA
$3B00	$666D	    			DATA	DATA lstr_39_extruder
$3B02	$0067	    			DATA	DATA lstr_39_extruder
$3B04	$796D	    			DATA	DATA lstr_40_extruder
$3B06	$FF00	    			DATA	DATA
$3B08	$636D	    			DATA	DATA lstr_41_extruder
$3B0A	$646D	    			DATA	DATA lstr_41_extruder
$3B0C	$FF00	    			DATA	DATA
$3B0E	$736D	    			DATA	DATA lstr_42_extruder
$3B10	$0070	    			DATA	DATA lstr_42_extruder
$3B12	$666D	    			DATA	DATA lstr_43_extruder
$3B14	$FF00	    			DATA	DATA
$3B16	$6363	    			DATA	DATA lstr_44_extruder
$3B18	$FF00	    			DATA	DATA
$3B1A	$0074	    			DATA	DATA lstr_45_extruder
