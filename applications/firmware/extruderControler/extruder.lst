;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 8/27/2011 5:22:35 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EF3E	F01B			GOTO	_main
$0008	$EF02	F001			GOTO	_interrupt
$0204	$	_interrupt:
$0204	$C003	F282			MOVFF	STACK_3, STSAVED_3
$0208	$C002	F281			MOVFF	STACK_2, STSAVED_2
$020C	$C001	F280			MOVFF	STACK_1, STSAVED_1
$0210	$C000	F27F			MOVFF	STACK_0, STSAVED_0
$0214	$CFE9	F165			MOVFF	FSR0L, ?saveFSR0
$0218	$CFEA	F166			MOVFF	FSR0H, ?saveFSR0+1
$021C	$CFE1	F167			MOVFF	FSR1L, ?saveFSR1
$0220	$CFE2	F168			MOVFF	FSR1H, ?saveFSR1+1
;extruder.c,536 :: 			void interrupt ( void ){
;extruder.c,540 :: 			if ( INTCON.INT0IF ){
$0224	$A2F2	    			BTFSS	INTCON, 1, 0
$0226	$D018	    			BRA	L_interrupt_32
;extruder.c,544 :: 			if ( DIR_PIN ){
$0228	$A082	    			BTFSS	PORTC, 0, 0
$022A	$D007	    			BRA	L_interrupt_33
;extruder.c,545 :: 			motorPulses += stepMultiplier;
$022C	$5019	    			MOVF	_stepMultiplier, 0, 0
$022E	$2615	    			ADDWF	_motorPulses, 1, 0
$0230	$0E00	    			MOVLW	0
$0232	$2216	    			ADDWFC	_motorPulses+1, 1, 0
$0234	$2217	    			ADDWFC	_motorPulses+2, 1, 0
$0236	$2218	    			ADDWFC	_motorPulses+3, 1, 0
;extruder.c,546 :: 			}
$0238	$D00E	    			BRA	L_interrupt_34
$023A	$	L_interrupt_33:
;extruder.c,548 :: 			motorPulses -= stepMultiplier;
$023A	$C019	F000			MOVFF	_stepMultiplier, STACK_0
$023E	$0E00	    			MOVLW	0
$0240	$6E01	    			MOVWF	STACK_0+1, 0
$0242	$6E02	    			MOVWF	STACK_0+2, 0
$0244	$6E03	    			MOVWF	STACK_0+3, 0
$0246	$5000	    			MOVF	STACK_0, 0, 0
$0248	$5E15	    			SUBWF	_motorPulses, 1, 0
$024A	$5001	    			MOVF	STACK_0+1, 0, 0
$024C	$5A16	    			SUBWFB	_motorPulses+1, 1, 0
$024E	$5002	    			MOVF	STACK_0+2, 0, 0
$0250	$5A17	    			SUBWFB	_motorPulses+2, 1, 0
$0252	$5003	    			MOVF	STACK_0+3, 0, 0
$0254	$5A18	    			SUBWFB	_motorPulses+3, 1, 0
;extruder.c,549 :: 			}
$0256	$	L_interrupt_34:
;extruder.c,550 :: 			INTCON.INT0IF = 0;
$0256	$92F2	    			BCF	INTCON, 1, 0
;extruder.c,551 :: 			}
$0258	$	L_interrupt_32:
;extruder.c,552 :: 			if  ( PIR3.IC2QEIF ){
$0258	$A4A4	    			BTFSS	PIR3, 2, 0
$025A	$D011	    			BRA	L_interrupt_35
;extruder.c,558 :: 			if ( QEICON.F5 = 1 ){
$025C	$8AB6	    			BSF	QEICON, 5, 0
$025E	$AAB6	    			BTFSS	QEICON, 5, 0
$0260	$D007	    			BRA	L_interrupt_36
;extruder.c,560 :: 			motorTurns++;
$0262	$0E01	    			MOVLW	1
$0264	$261A	    			ADDWF	_motorTurns, 1, 0
$0266	$0E00	    			MOVLW	0
$0268	$221B	    			ADDWFC	_motorTurns+1, 1, 0
$026A	$221C	    			ADDWFC	_motorTurns+2, 1, 0
$026C	$221D	    			ADDWFC	_motorTurns+3, 1, 0
;extruder.c,561 :: 			}
$026E	$D006	    			BRA	L_interrupt_37
$0270	$	L_interrupt_36:
;extruder.c,564 :: 			motorTurns--;
$0270	$0E01	    			MOVLW	1
$0272	$5E1A	    			SUBWF	_motorTurns, 1, 0
$0274	$0E00	    			MOVLW	0
$0276	$5A1B	    			SUBWFB	_motorTurns+1, 1, 0
$0278	$5A1C	    			SUBWFB	_motorTurns+2, 1, 0
$027A	$5A1D	    			SUBWFB	_motorTurns+3, 1, 0
;extruder.c,565 :: 			}
$027C	$	L_interrupt_37:
;extruder.c,566 :: 			PIR3.IC2QEIF = 0;
$027C	$94A4	    			BCF	PIR3, 2, 0
;extruder.c,567 :: 			}
$027E	$	L_interrupt_35:
;extruder.c,569 :: 			}
$027E	$	L_Interrupt_end:
$027E	$C165	FFE9			MOVFF	?saveFSR0, FSR0L
$0282	$C166	FFEA			MOVFF	?saveFSR0+1, FSR0H
$0286	$C167	FFE1			MOVFF	?saveFSR1, FSR1L
$028A	$C168	FFE2			MOVFF	?saveFSR1+1, FSR1H
$028E	$C282	F003			MOVFF	STSAVED_3, STACK_3
$0292	$C281	F002			MOVFF	STSAVED_2, STACK_2
$0296	$C280	F001			MOVFF	STSAVED_1, STACK_1
$029A	$C27F	F000			MOVFF	STSAVED_0, STACK_0
$029E	$0011	    			RETFIE
$02A0	$	_RES032:
$02A0	$0100	    			MOVLB	0
$02A2	$6A02	    			CLRF	STACK_2, 0
$02A4	$6A01	    			CLRF	STACK_1, 0
$02A6	$6A00	    			CLRF	STACK_0, 0
$02A8	$6A08	    			CLRF	STACK_8, 0
$02AA	$6A03	    			CLRF	STACK_3, 0
$02AC	$0E00	    			MOVLW	0
$02AE	$0012	    			RETURN
$02B0	$	_SETFUN32:
$02B0	$0100	    			MOVLB	0
$02B2	$840B	    			BSF	STACK_11, 2, 0
$02B4	$AE0B	    			BTFSS	STACK_11, 7, 0
$02B6	$EF64	F001			GOTO	SETFUN32EEE
$02BA	$0E01	    			MOVLW	0x01
$02BC	$6E03	    			MOVWF	STACK_3, 0
$02BE	$6A02	    			CLRF	STACK_2, 0
$02C0	$6A01	    			CLRF	STACK_1, 0
$02C2	$6A00	    			CLRF	STACK_0, 0
$02C4	$360A	    			RLCF	STACK_10, F, 0
$02C6	$3202	    			RRCF	STACK_2, F, 0
$02C8	$	SETFUN32EEE:
$02C8	$0EFF	    			MOVLW	0xFF
$02CA	$0012	    			RETURN
$000C	$	_FIXSIGN32:
$000C	$0100	    			MOVLB	0
$000E	$AE0A	    			BTFSS	STACK_10, 7, 0
$0010	$9E02	    			BCF	STACK_2, 7, 0
$0012	$0E00	    			MOVLW	0
$0014	$0012	    			RETURN
$02CC	$	_SETFOV32:
$02CC	$0100	    			MOVLB	0
$02CE	$820B	    			BSF	STACK_11, 1, 0
$02D0	$AE0B	    			BTFSS	STACK_11, 7, 0
$02D2	$EF71	F001			GOTO	SETFOV32EEE
$02D6	$6803	    			SETF	STACK_3, 0
$02D8	$6802	    			SETF	STACK_2, 0
$02DA	$6801	    			SETF	STACK_1, 0
$02DC	$6800	    			SETF	STACK_0, 0
$02DE	$360A	    			RLCF	STACK_10, F, 0
$02E0	$3202	    			RRCF	STACK_2, F, 0
$02E2	$	SETFOV32EEE:
$02E2	$0EFF	    			MOVLW	0xFF
$02E4	$0012	    			RETURN
$02E6	$	_NRM3232:
$02E6	$0100	    			MOVLB	0
$02E8	$6A0C	    			CLRF	STACK_12, 0
$02EA	$6A0E	    			CLRF	STACK_14, 0
$02EC	$5002	    			MOVF	STACK_2, W, 0
$02EE	$A4D8	    			BTFSS	STATUS, Z, 0
$02F0	$EF8D	F001			GOTO	NORM3232
$02F4	$C001	F002			MOVFF	STACK_1, STACK_2
$02F8	$C000	F001			MOVFF	STACK_0, STACK_1
$02FC	$6A00	    			CLRF	STACK_0, 0
$02FE	$860E	    			BSF	STACK_14, 3, 0
$0300	$5002	    			MOVF	STACK_2, W, 0
$0302	$A4D8	    			BTFSS	STATUS, Z, 0
$0304	$EF8D	F001			GOTO	NORM3232
$0308	$C001	F002			MOVFF	STACK_1, STACK_2
$030C	$6A01	    			CLRF	STACK_1, 0
$030E	$960E	    			BCF	STACK_14, 3, 0
$0310	$880E	    			BSF	STACK_14, 4, 0
$0312	$5002	    			MOVF	STACK_2, W, 0
$0314	$B4D8	    			BTFSC	STATUS, Z, 0
$0316	$EF9F	F001			GOTO	JPNRES032
$031A	$	NORM3232:
$031A	$500E	    			MOVF	STACK_14, W, 0
$031C	$5E03	    			SUBWF	STACK_3, F, 0
$031E	$A4D8	    			BTFSS	STATUS, Z, 0
$0320	$A0D8	    			BTFSS	STATUS, C, 0
$0322	$EFA5	F001			GOTO	JPNSETFUN32
$0326	$90D8	    			BCF	STATUS, C, 0
$0328	$	NORM3232A:
$0328	$BE02	    			BTFSC	STACK_2, 7, 0
$032A	$EFAB	F001			GOTO	JMPNFIXSIGN32
$032E	$3600	    			RLCF	STACK_0, F, 0
$0330	$3601	    			RLCF	STACK_1, F, 0
$0332	$3602	    			RLCF	STACK_2, F, 0
$0334	$2E03	    			DECFSZ	STACK_3, F, 0
$0336	$EF94	F001			GOTO	NORM3232A
$033A	$EFA5	F001			GOTO	JPNSETFUN32
$033E	$	JPNRES032:
$033E	$0E01	    			MOVLW	0x01
$0340	$6E0C	    			MOVWF	STACK_12, 0
$0342	$EC50	F001			CALL	_RES032
$0346	$EFAF	F001			GOTO	NORM32EEE
$034A	$	JPNSETFUN32:
$034A	$0E02	    			MOVLW	0x02
$034C	$6E0C	    			MOVWF	STACK_12, 0
$034E	$EC58	F001			CALL	_SETFUN32
$0352	$EFAF	F001			GOTO	NORM32EEE
$0356	$	JMPNFIXSIGN32:
$0356	$0E04	    			MOVLW	0x04
$0358	$6E0C	    			MOVWF	STACK_12, 0
$035A	$EC06	F000			CALL	_FIXSIGN32
$035E	$	NORM32EEE:
$035E	$0012	    			RETURN
$0360	$	_NRM4032:
$0360	$0100	    			MOVLB	0
$0362	$B00C	    			BTFSC	STACK_12, 0, 0
$0364	$EFF3	F001			GOTO	NRMRND4032
$0368	$A20C	    			BTFSS	STACK_12, 1, 0
$036A	$EF9B	F002			GOTO	NRM40JPSETFOV32
$036E	$	NRM4032:
$036E	$6A0E	    			CLRF	STACK_14, 0
$0370	$0E00	    			MOVLW	0x00
$0372	$6402	    			CPFSGT	STACK_2, 0
$0374	$EF0A	F002			GOTO	NRM4032A
$0378	$	TNIB4032:
$0378	$0EF0	    			MOVLW	0xF0
$037A	$1402	    			ANDWF	STACK_2, W, 0
$037C	$A4D8	    			BTFSS	STATUS, Z, 0
$037E	$EFD5	F001			GOTO	NORM4032
$0382	$3A02	    			SWAPF	STACK_2, F, 0
$0384	$3801	    			SWAPF	STACK_1, W, 0
$0386	$0B0F	    			ANDLW	0x0F
$0388	$2602	    			ADDWF	STACK_2, F, 0
$038A	$3801	    			SWAPF	STACK_1, W, 0
$038C	$0BF0	    			ANDLW	0xF0
$038E	$6E01	    			MOVWF	STACK_1, 0
$0390	$3800	    			SWAPF	STACK_0, W, 0
$0392	$0B0F	    			ANDLW	0x0F
$0394	$2601	    			ADDWF	STACK_1, F, 0
$0396	$3800	    			SWAPF	STACK_0, W, 0
$0398	$0BF0	    			ANDLW	0xF0
$039A	$6E00	    			MOVWF	STACK_0, 0
$039C	$3808	    			SWAPF	STACK_8, W, 0
$039E	$0B0F	    			ANDLW	0x0F
$03A0	$2600	    			ADDWF	STACK_0, F, 0
$03A2	$3808	    			SWAPF	STACK_8, W, 0
$03A4	$0BF0	    			ANDLW	0xF0
$03A6	$6E08	    			MOVWF	STACK_8, 0
$03A8	$840E	    			BSF	STACK_14, 2, 0
$03AA	$	NORM4032:
$03AA	$90D8	    			BCF	STATUS, C, 0
$03AC	$BE02	    			BTFSC	STACK_2, 7, 0
$03AE	$EFEE	F001			GOTO	TNORMUN4032
$03B2	$3608	    			RLCF	STACK_8, F, 0
$03B4	$3600	    			RLCF	STACK_0, F, 0
$03B6	$3601	    			RLCF	STACK_1, F, 0
$03B8	$3602	    			RLCF	STACK_2, F, 0
$03BA	$2A0E	    			INCF	STACK_14, F, 0
$03BC	$BE02	    			BTFSC	STACK_2, 7, 0
$03BE	$EFEE	F001			GOTO	TNORMUN4032
$03C2	$3608	    			RLCF	STACK_8, F, 0
$03C4	$3600	    			RLCF	STACK_0, F, 0
$03C6	$3601	    			RLCF	STACK_1, F, 0
$03C8	$3602	    			RLCF	STACK_2, F, 0
$03CA	$2A0E	    			INCF	STACK_14, F, 0
$03CC	$BE02	    			BTFSC	STACK_2, 7, 0
$03CE	$EFEE	F001			GOTO	TNORMUN4032
$03D2	$3608	    			RLCF	STACK_8, F, 0
$03D4	$3600	    			RLCF	STACK_0, F, 0
$03D6	$3601	    			RLCF	STACK_1, F, 0
$03D8	$3602	    			RLCF	STACK_2, F, 0
$03DA	$2A0E	    			INCF	STACK_14, F, 0
$03DC	$	TNORMUN4032:
$03DC	$500E	    			MOVF	STACK_14, W, 0
$03DE	$6403	    			CPFSGT	STACK_3, 0
$03E0	$EF8F	F002			GOTO	NRM40JPSETFUN32
$03E4	$5E03	    			SUBWF	STACK_3, F, 0
$03E6	$	NRMRND4032:
$03E6	$BC0B	    			BTFSC	STACK_11, 6, 0
$03E8	$AE08	    			BTFSS	STACK_8, 7, 0
$03EA	$EF95	F002			GOTO	NRM40JPFIXSIGN32
$03EE	$80D8	    			BSF	STATUS, C, 0
$03F0	$0E80	    			MOVLW	0x80
$03F2	$6408	    			CPFSGT	STACK_8, 0
$03F4	$3000	    			RRCF	STACK_0, W, 0
$03F6	$0E00	    			MOVLW	0x00
$03F8	$2200	    			ADDWFC	STACK_0, F, 0
$03FA	$2201	    			ADDWFC	STACK_1, F, 0
$03FC	$2202	    			ADDWFC	STACK_2, F, 0
$03FE	$A0D8	    			BTFSS	STATUS, C, 0
$0400	$EF95	F002			GOTO	NRM40JPFIXSIGN32
$0404	$3202	    			RRCF	STACK_2, F, 0
$0406	$3201	    			RRCF	STACK_1, F, 0
$0408	$3200	    			RRCF	STACK_0, F, 0
$040A	$4A03	    			INFSNZ	STACK_3, F, 0
$040C	$EF9B	F002			GOTO	NRM40JPSETFOV32
$0410	$EF95	F002			GOTO	NRM40JPFIXSIGN32
$0414	$	NRM4032A:
$0414	$C001	F002			MOVFF	STACK_1, STACK_2
$0418	$C000	F001			MOVFF	STACK_0, STACK_1
$041C	$C008	F000			MOVFF	STACK_8, STACK_0
$0420	$6A08	    			CLRF	STACK_8, 0
$0422	$0E00	    			MOVLW	0x00
$0424	$860E	    			BSF	STACK_14, 3, 0
$0426	$6402	    			CPFSGT	STACK_2, 0
$0428	$EF41	F002			GOTO	NRM4032B
$042C	$	TNIB4032A:
$042C	$0EF0	    			MOVLW	0xF0
$042E	$1402	    			ANDWF	STACK_2, W, 0
$0430	$A4D8	    			BTFSS	STATUS, Z, 0
$0432	$EF29	F002			GOTO	NORM4032A
$0436	$3A02	    			SWAPF	STACK_2, F, 0
$0438	$3801	    			SWAPF	STACK_1, W, 0
$043A	$0B0F	    			ANDLW	0x0F
$043C	$2602	    			ADDWF	STACK_2, F, 0
$043E	$3801	    			SWAPF	STACK_1, W, 0
$0440	$0BF0	    			ANDLW	0xF0
$0442	$6E01	    			MOVWF	STACK_1, 0
$0444	$3800	    			SWAPF	STACK_0, W, 0
$0446	$0B0F	    			ANDLW	0x0F
$0448	$2601	    			ADDWF	STACK_1, F, 0
$044A	$3800	    			SWAPF	STACK_0, W, 0
$044C	$0BF0	    			ANDLW	0xF0
$044E	$6E00	    			MOVWF	STACK_0, 0
$0450	$840E	    			BSF	STACK_14, 2, 0
$0452	$	NORM4032A:
$0452	$90D8	    			BCF	STATUS, C, 0
$0454	$BE02	    			BTFSC	STACK_2, 7, 0
$0456	$EFEE	F001			GOTO	TNORMUN4032
$045A	$3600	    			RLCF	STACK_0, F, 0
$045C	$3601	    			RLCF	STACK_1, F, 0
$045E	$3602	    			RLCF	STACK_2, F, 0
$0460	$2A0E	    			INCF	STACK_14, F, 0
$0462	$BE02	    			BTFSC	STACK_2, 7, 0
$0464	$EFEE	F001			GOTO	TNORMUN4032
$0468	$3600	    			RLCF	STACK_0, F, 0
$046A	$3601	    			RLCF	STACK_1, F, 0
$046C	$3602	    			RLCF	STACK_2, F, 0
$046E	$2A0E	    			INCF	STACK_14, F, 0
$0470	$BE02	    			BTFSC	STACK_2, 7, 0
$0472	$EFEE	F001			GOTO	TNORMUN4032
$0476	$3600	    			RLCF	STACK_0, F, 0
$0478	$3601	    			RLCF	STACK_1, F, 0
$047A	$3602	    			RLCF	STACK_2, F, 0
$047C	$2A0E	    			INCF	STACK_14, F, 0
$047E	$EFEE	F001			GOTO	TNORMUN4032
$0482	$	NRM4032B:
$0482	$C001	F002			MOVFF	STACK_1, STACK_2
$0486	$C000	F001			MOVFF	STACK_0, STACK_1
$048A	$6A00	    			CLRF	STACK_0, 0
$048C	$0E00	    			MOVLW	0x00
$048E	$960E	    			BCF	STACK_14, 3, 0
$0490	$880E	    			BSF	STACK_14, 4, 0
$0492	$6402	    			CPFSGT	STACK_2, 0
$0494	$EF6E	F002			GOTO	NRM4032C
$0498	$	TNIB4032B:
$0498	$0EF0	    			MOVLW	0xF0
$049A	$1402	    			ANDWF	STACK_2, W, 0
$049C	$A4D8	    			BTFSS	STATUS, Z, 0
$049E	$EF59	F002			GOTO	NORM4032B
$04A2	$3A02	    			SWAPF	STACK_2, F, 0
$04A4	$3801	    			SWAPF	STACK_1, W, 0
$04A6	$0B0F	    			ANDLW	0x0F
$04A8	$2602	    			ADDWF	STACK_2, F, 0
$04AA	$3801	    			SWAPF	STACK_1, W, 0
$04AC	$0BF0	    			ANDLW	0xF0
$04AE	$6E01	    			MOVWF	STACK_1, 0
$04B0	$840E	    			BSF	STACK_14, 2, 0
$04B2	$	NORM4032B:
$04B2	$90D8	    			BCF	STATUS, C, 0
$04B4	$BE02	    			BTFSC	STACK_2, 7, 0
$04B6	$EFEE	F001			GOTO	TNORMUN4032
$04BA	$3601	    			RLCF	STACK_1, F, 0
$04BC	$3602	    			RLCF	STACK_2, F, 0
$04BE	$2A0E	    			INCF	STACK_14, F, 0
$04C0	$BE02	    			BTFSC	STACK_2, 7, 0
$04C2	$EFEE	F001			GOTO	TNORMUN4032
$04C6	$3601	    			RLCF	STACK_1, F, 0
$04C8	$3602	    			RLCF	STACK_2, F, 0
$04CA	$2A0E	    			INCF	STACK_14, F, 0
$04CC	$BE02	    			BTFSC	STACK_2, 7, 0
$04CE	$EFEE	F001			GOTO	TNORMUN4032
$04D2	$3601	    			RLCF	STACK_1, F, 0
$04D4	$3602	    			RLCF	STACK_2, F, 0
$04D6	$2A0E	    			INCF	STACK_14, F, 0
$04D8	$EFEE	F001			GOTO	TNORMUN4032
$04DC	$	NRM4032C:
$04DC	$C001	F002			MOVFF	STACK_1, STACK_2
$04E0	$6A01	    			CLRF	STACK_1, 0
$04E2	$0E00	    			MOVLW	0x00
$04E4	$860E	    			BSF	STACK_14, 3, 0
$04E6	$6402	    			CPFSGT	STACK_2, 0
$04E8	$EFA1	F002			GOTO	NRM40JPRES032
$04EC	$	TNIB4032C:
$04EC	$0EF0	    			MOVLW	0xF0
$04EE	$1402	    			ANDWF	STACK_2, W, 0
$04F0	$A4D8	    			BTFSS	STATUS, Z, 0
$04F2	$EF7D	F002			GOTO	NORM4032C
$04F6	$3A02	    			SWAPF	STACK_2, F, 0
$04F8	$840E	    			BSF	STACK_14, 2, 0
$04FA	$	NORM4032C:
$04FA	$90D8	    			BCF	STATUS, C, 0
$04FC	$BE02	    			BTFSC	STACK_2, 7, 0
$04FE	$EFEE	F001			GOTO	TNORMUN4032
$0502	$3602	    			RLCF	STACK_2, F, 0
$0504	$2A0E	    			INCF	STACK_14, F, 0
$0506	$BE02	    			BTFSC	STACK_2, 7, 0
$0508	$EFEE	F001			GOTO	TNORMUN4032
$050C	$3602	    			RLCF	STACK_2, F, 0
$050E	$2A0E	    			INCF	STACK_14, F, 0
$0510	$BE02	    			BTFSC	STACK_2, 7, 0
$0512	$EFEE	F001			GOTO	TNORMUN4032
$0516	$3602	    			RLCF	STACK_2, F, 0
$0518	$2A0E	    			INCF	STACK_14, F, 0
$051A	$EFEE	F001			GOTO	TNORMUN4032
$051E	$	NRM40JPSETFUN32:
$051E	$0E01	    			MOVLW	0x01
$0520	$6E0C	    			MOVWF	STACK_12, 0
$0522	$EC58	F001			CALL	_SETFUN32
$0526	$EFA5	F002			GOTO	NRM40EEE
$052A	$	NRM40JPFIXSIGN32:
$052A	$0E02	    			MOVLW	0x02
$052C	$6E0C	    			MOVWF	STACK_12, 0
$052E	$EC06	F000			CALL	_FIXSIGN32
$0532	$EFA5	F002			GOTO	NRM40EEE
$0536	$	NRM40JPSETFOV32:
$0536	$0E04	    			MOVLW	0x04
$0538	$6E0C	    			MOVWF	STACK_12, 0
$053A	$EC66	F001			CALL	_SETFOV32
$053E	$EFA5	F002			GOTO	NRM40EEE
$0542	$	NRM40JPRES032:
$0542	$0E08	    			MOVLW	0x08
$0544	$6E0C	    			MOVWF	STACK_12, 0
$0546	$EC50	F001			CALL	_RES032
$054A	$	NRM40EEE:
$054A	$0012	    			RETURN
$054C	$	_SETIOV3224:
$054C	$0100	    			MOVLB	0
$054E	$800B	    			BSF	STACK_11, 0, 0
$0550	$AE0B	    			BTFSS	STACK_11, 7, 0
$0552	$EFB3	F002			GOTO	SETIOV3224EEE
$0556	$6A02	    			CLRF	STACK_2, 0
$0558	$AE0A	    			BTFSS	STACK_10, 7, 0
$055A	$0EFF	    			MOVLW	0xFF
$055C	$6E02	    			MOVWF	STACK_2, 0
$055E	$6E01	    			MOVWF	STACK_1, 0
$0560	$6E00	    			MOVWF	STACK_0, 0
$0562	$360A	    			RLCF	STACK_10, F, 0
$0564	$3202	    			RRCF	STACK_2, F, 0
$0566	$	SETIOV3224EEE:
$0566	$0EFF	    			MOVLW	0xFF
$0568	$0012	    			RETURN
$056A	$	_Mul_32x32_U:
$056A	$0100	    			MOVLB	0
$056C	$0E22	    			MOVLW	34
$056E	$6E0C	    			MOVWF	STACK_12, 0
$0570	$6A08	    			CLRF	STACK_8, 0
$0572	$6A09	    			CLRF	STACK_9, 0
$0574	$6A0A	    			CLRF	STACK_10, 0
$0576	$6A0B	    			CLRF	STACK_11, 0
$0578	$	_NEXT:
$0578	$060C	    			DECF	STACK_12, F, 0
$057A	$B4D8	    			BTFSC	STATUS, Z, 0
$057C	$EFE2	F002			GOTO	_EXIT2
$0580	$90D8	    			BCF	STATUS, C, 0
$0582	$	_LOOP:
$0582	$320B	    			RRCF	STACK_11, F, 0
$0584	$320A	    			RRCF	STACK_10, F, 0
$0586	$3209	    			RRCF	STACK_9, F, 0
$0588	$3208	    			RRCF	STACK_8, F, 0
$058A	$3203	    			RRCF	STACK_3, F, 0
$058C	$3202	    			RRCF	STACK_2, F, 0
$058E	$3201	    			RRCF	STACK_1, F, 0
$0590	$3200	    			RRCF	STACK_0, F, 0
$0592	$A0D8	    			BTFSS	STATUS, C, 0
$0594	$EFBC	F002			GOTO	_NEXT
$0598	$060C	    			DECF	STACK_12, F, 0
$059A	$B4D8	    			BTFSC	STATUS, Z, 0
$059C	$EFDA	F002			GOTO	_EXIT1
$05A0	$5004	    			MOVF	STACK_4, W, 0
$05A2	$2608	    			ADDWF	STACK_8, F, 0
$05A4	$5005	    			MOVF	STACK_5, W, 0
$05A6	$2209	    			ADDWFC	STACK_9, F, 0
$05A8	$5006	    			MOVF	STACK_6, W, 0
$05AA	$220A	    			ADDWFC	STACK_10, F, 0
$05AC	$5007	    			MOVF	STACK_7, W, 0
$05AE	$220B	    			ADDWFC	STACK_11, F, 0
$05B0	$EFC1	F002			GOTO	_LOOP
$05B4	$	_EXIT1:
$05B4	$5004	    			MOVF	STACK_4, W, 0
$05B6	$2608	    			ADDWF	STACK_8, F, 0
$05B8	$5005	    			MOVF	STACK_5, W, 0
$05BA	$2209	    			ADDWFC	STACK_9, F, 0
$05BC	$5006	    			MOVF	STACK_6, W, 0
$05BE	$220A	    			ADDWFC	STACK_10, F, 0
$05C0	$5007	    			MOVF	STACK_7, W, 0
$05C2	$220B	    			ADDWFC	STACK_11, F, 0
$05C4	$	_EXIT2:
$05C4	$0012	    			RETURN
$05C6	$	_Int2Double:
$05C6	$0100	    			MOVLB	0
$05C8	$C000	F008			MOVFF	STACK_0, STACK_8
$05CC	$5001	    			MOVF	STACK_1, W, 0
$05CE	$6E00	    			MOVWF	STACK_0, 0
$05D0	$6A01	    			CLRF	STACK_1, 0
$05D2	$6A02	    			CLRF	STACK_2, 0
$05D4	$6A03	    			CLRF	STACK_3, 0
$05D6	$	FLO1632:
$05D6	$6A0B	    			CLRF	STACK_11, 0
$05D8	$6A0C	    			CLRF	STACK_12, 0
$05DA	$6A01	    			CLRF	STACK_1, 0
$05DC	$6A02	    			CLRF	STACK_2, 0
$05DE	$6A03	    			CLRF	STACK_3, 0
$05E0	$0E96	    			MOVLW	150
$05E2	$6E03	    			MOVWF	STACK_3, 0
$05E4	$6A0A	    			CLRF	STACK_10, 0
$05E6	$AE00	    			BTFSS	STACK_0, 7, 0
$05E8	$EFFC	F002			GOTO	FLO1632EEE
$05EC	$1E08	    			COMF	STACK_8, F, 0
$05EE	$1E00	    			COMF	STACK_0, F, 0
$05F0	$2A08	    			INCF	STACK_8, F, 0
$05F2	$B4D8	    			BTFSC	STATUS, Z, 0
$05F4	$2A00	    			INCF	STACK_0, F, 0
$05F6	$8E0A	    			BSF	STACK_10, 7, 0
$05F8	$	FLO1632EEE:
$05F8	$C000	F001			MOVFF	STACK_0, STACK_1
$05FC	$C008	F000			MOVFF	STACK_8, STACK_0
$0600	$6A08	    			CLRF	STACK_8, 0
$0602	$6A02	    			CLRF	STACK_2, 0
$0604	$EC73	F001			CALL	_NRM3232
$0608	$0012	    			RETURN
$060A	$	_Longint2Double:
$060A	$0100	    			MOVLB	0
$060C	$5000	    			MOVF	STACK_0, W, 0
$060E	$6E08	    			MOVWF	STACK_8, 0
$0610	$5001	    			MOVF	STACK_1, W, 0
$0612	$6E00	    			MOVWF	STACK_0, 0
$0614	$5002	    			MOVF	STACK_2, W, 0
$0616	$6E01	    			MOVWF	STACK_1, 0
$0618	$5003	    			MOVF	STACK_3, W, 0
$061A	$6E02	    			MOVWF	STACK_2, 0
$061C	$6A03	    			CLRF	STACK_3, 0
$061E	$	FLO3232:
$061E	$6A0B	    			CLRF	STACK_11, 0
$0620	$6A0C	    			CLRF	STACK_12, 0
$0622	$0E9E	    			MOVLW	158
$0624	$6E03	    			MOVWF	STACK_3, 0
$0626	$6A0A	    			CLRF	STACK_10, 0
$0628	$AE02	    			BTFSS	STACK_2, 7, 0
$062A	$EF23	F003			GOTO	FLO3232EEE
$062E	$1E08	    			COMF	STACK_8, F, 0
$0630	$1E00	    			COMF	STACK_0, F, 0
$0632	$1E01	    			COMF	STACK_1, F, 0
$0634	$1E02	    			COMF	STACK_2, F, 0
$0636	$2A08	    			INCF	STACK_8, F, 0
$0638	$B4D8	    			BTFSC	STATUS, Z, 0
$063A	$2A00	    			INCF	STACK_0, F, 0
$063C	$B4D8	    			BTFSC	STATUS, Z, 0
$063E	$2A01	    			INCF	STACK_1, F, 0
$0640	$B4D8	    			BTFSC	STATUS, Z, 0
$0642	$2A02	    			INCF	STACK_2, F, 0
$0644	$8E0A	    			BSF	STACK_10, 7, 0
$0646	$	FLO3232EEE:
$0646	$0E02	    			MOVLW	0x02
$0648	$6E0C	    			MOVWF	STACK_12, 0
$064A	$ECB0	F001			CALL	_NRM4032
$064E	$0012	    			RETURN
$0650	$	_Mul_32x32_FP:
$0650	$0100	    			MOVLB	0
$0652	$	FPM32:
$0652	$6A08	    			CLRF	STACK_8, 0
$0654	$6A09	    			CLRF	STACK_9, 0
$0656	$0E00	    			MOVLW	0x00
$0658	$6207	    			CPFSEQ	STACK_7, 0
$065A	$6403	    			CPFSGT	STACK_3, 0
$065C	$EFAE	F003			GOTO	MULJPRES032
$0660	$	M32BNE0:
$0660	$5002	    			MOVF	STACK_2, W, 0
$0662	$1806	    			XORWF	STACK_6, W, 0
$0664	$6E0A	    			MOVWF	STACK_10, 0
$0666	$5007	    			MOVF	STACK_7, W, 0
$0668	$2603	    			ADDWF	STACK_3, F, 0
$066A	$0E7E	    			MOVLW	126
$066C	$A0D8	    			BTFSS	STATUS, C, 0
$066E	$EF3F	F003			GOTO	MTUN32
$0672	$5E03	    			SUBWF	STACK_3, F, 0
$0674	$B0D8	    			BTFSC	STATUS, C, 0
$0676	$EFB3	F003			GOTO	MULJPSETFOV32
$067A	$EF43	F003			GOTO	MOK32
$067E	$	MTUN32:
$067E	$5E03	    			SUBWF	STACK_3, F, 0
$0680	$A0D8	    			BTFSS	STATUS, C, 0
$0682	$EFB8	F003			GOTO	MULJPSETFUN32
$0686	$	MOK32:
$0686	$8E02	    			BSF	STACK_2, 7, 0
$0688	$8E06	    			BSF	STACK_6, 7, 0
$068A	$C002	F00E			MOVFF	STACK_2, STACK_14
$068E	$C001	F00B			MOVFF	STACK_1, STACK_11
$0692	$C000	F00D			MOVFF	STACK_0, STACK_13
$0696	$5000	    			MOVF	STACK_0, W, 0
$0698	$0204	    			MULWF	STACK_4, 0
$069A	$CFF4	F00C			MOVFF	PRODH, STACK_12
$069E	$5001	    			MOVF	STACK_1, W, 0
$06A0	$0205	    			MULWF	STACK_5, 0
$06A2	$CFF4	F000			MOVFF	PRODH, STACK_0
$06A6	$CFF3	F008			MOVFF	PRODL, STACK_8
$06AA	$0204	    			MULWF	STACK_4, 0
$06AC	$50F3	    			MOVF	PRODL, W, 0
$06AE	$260C	    			ADDWF	STACK_12, F, 0
$06B0	$50F4	    			MOVF	PRODH, W, 0
$06B2	$2208	    			ADDWFC	STACK_8, F, 0
$06B4	$0E00	    			MOVLW	0x00
$06B6	$2200	    			ADDWFC	STACK_0, F, 0
$06B8	$500D	    			MOVF	STACK_13, W, 0
$06BA	$0205	    			MULWF	STACK_5, 0
$06BC	$50F3	    			MOVF	PRODL, W, 0
$06BE	$260C	    			ADDWF	STACK_12, F, 0
$06C0	$50F4	    			MOVF	PRODH, W, 0
$06C2	$2208	    			ADDWFC	STACK_8, F, 0
$06C4	$0E00	    			MOVLW	0x00
$06C6	$2200	    			ADDWFC	STACK_0, F, 0
$06C8	$5002	    			MOVF	STACK_2, W, 0
$06CA	$0204	    			MULWF	STACK_4, 0
$06CC	$50F3	    			MOVF	PRODL, W, 0
$06CE	$2608	    			ADDWF	STACK_8, F, 0
$06D0	$50F4	    			MOVF	PRODH, W, 0
$06D2	$2200	    			ADDWFC	STACK_0, F, 0
$06D4	$5002	    			MOVF	STACK_2, W, 0
$06D6	$0205	    			MULWF	STACK_5, 0
$06D8	$6A01	    			CLRF	STACK_1, 0
$06DA	$0E00	    			MOVLW	0x00
$06DC	$2201	    			ADDWFC	STACK_1, F, 0
$06DE	$50F3	    			MOVF	PRODL, W, 0
$06E0	$2600	    			ADDWF	STACK_0, F, 0
$06E2	$50F4	    			MOVF	PRODH, W, 0
$06E4	$2201	    			ADDWFC	STACK_1, F, 0
$06E6	$500D	    			MOVF	STACK_13, W, 0
$06E8	$0206	    			MULWF	STACK_6, 0
$06EA	$50F3	    			MOVF	PRODL, W, 0
$06EC	$2608	    			ADDWF	STACK_8, F, 0
$06EE	$50F4	    			MOVF	PRODH, W, 0
$06F0	$2200	    			ADDWFC	STACK_0, F, 0
$06F2	$6A02	    			CLRF	STACK_2, 0
$06F4	$0E00	    			MOVLW	0x00
$06F6	$2201	    			ADDWFC	STACK_1, F, 0
$06F8	$2202	    			ADDWFC	STACK_2, F, 0
$06FA	$500B	    			MOVF	STACK_11, W, 0
$06FC	$0206	    			MULWF	STACK_6, 0
$06FE	$50F3	    			MOVF	PRODL, W, 0
$0700	$2600	    			ADDWF	STACK_0, F, 0
$0702	$50F4	    			MOVF	PRODH, W, 0
$0704	$2201	    			ADDWFC	STACK_1, F, 0
$0706	$0E00	    			MOVLW	0x00
$0708	$2202	    			ADDWFC	STACK_2, F, 0
$070A	$500E	    			MOVF	STACK_14, W, 0
$070C	$0206	    			MULWF	STACK_6, 0
$070E	$50F3	    			MOVF	PRODL, W, 0
$0710	$2601	    			ADDWF	STACK_1, F, 0
$0712	$50F4	    			MOVF	PRODH, W, 0
$0714	$2202	    			ADDWFC	STACK_2, F, 0
$0716	$BE02	    			BTFSC	STACK_2, 7, 0
$0718	$EF96	F003			GOTO	MROUND32
$071C	$3608	    			RLCF	STACK_8, F, 0
$071E	$3600	    			RLCF	STACK_0, F, 0
$0720	$3601	    			RLCF	STACK_1, F, 0
$0722	$3602	    			RLCF	STACK_2, F, 0
$0724	$0603	    			DECF	STACK_3, F, 0
$0726	$B4D8	    			BTFSC	STATUS, Z, 0
$0728	$EFB8	F003			GOTO	MULJPSETFUN32
$072C	$	MROUND32:
$072C	$EFA9	F003			GOTO	MUL32OK
$0730	$80D8	    			BSF	STATUS, C, 0
$0732	$0E80	    			MOVLW	0x80
$0734	$6408	    			CPFSGT	STACK_8, 0
$0736	$3000	    			RRCF	STACK_0, W, 0
$0738	$0E00	    			MOVLW	0x00
$073A	$2200	    			ADDWFC	STACK_0, F, 0
$073C	$2201	    			ADDWFC	STACK_1, F, 0
$073E	$2202	    			ADDWFC	STACK_2, F, 0
$0740	$A0D8	    			BTFSS	STATUS, C, 0
$0742	$EFA9	F003			GOTO	MUL32OK
$0746	$3202	    			RRCF	STACK_2, F, 0
$0748	$3201	    			RRCF	STACK_1, F, 0
$074A	$3200	    			RRCF	STACK_0, F, 0
$074C	$4A03	    			INFSNZ	STACK_3, F, 0
$074E	$EFB3	F003			GOTO	MULJPSETFOV32
$0752	$	MUL32OK:
$0752	$AE0A	    			BTFSS	STACK_10, 7, 0
$0754	$9E02	    			BCF	STACK_2, 7, 0
$0756	$0E00	    			MOVLW	0
$0758	$EFBB	F003			GOTO	MULEEE
$075C	$	MULJPRES032:
$075C	$0E01	    			MOVLW	0x01
$075E	$EC50	F001			CALL	_RES032
$0762	$EFBB	F003			GOTO	MULEEE
$0766	$	MULJPSETFOV32:
$0766	$0E02	    			MOVLW	0x02
$0768	$EC66	F001			CALL	_SETFOV32
$076C	$EFBB	F003			GOTO	MULEEE
$0770	$	MULJPSETFUN32:
$0770	$0E04	    			MOVLW	0x04
$0772	$EC58	F001			CALL	_SETFUN32
$0776	$	MULEEE:
$0776	$0012	    			RETURN
$0778	$	_Add_32x32_FP:
$0778	$0100	    			MOVLB	0
$077A	$	FPA32:
$077A	$5002	    			MOVF	STACK_2, W, 0
$077C	$1806	    			XORWF	STACK_6, W, 0
$077E	$6E0E	    			MOVWF	STACK_14, 0
$0780	$6A08	    			CLRF	STACK_8, 0
$0782	$6A09	    			CLRF	STACK_9, 0
$0784	$6A0B	    			CLRF	STACK_11, 0
$0786	$5003	    			MOVF	STACK_3, W, 0
$0788	$6407	    			CPFSGT	STACK_7, 0
$078A	$EFB0	F004			GOTO	USEA32
$078E	$	USEB32:
$078E	$5006	    			MOVF	STACK_6, W, 0
$0790	$6E0A	    			MOVWF	STACK_10, 0
$0792	$8E06	    			BSF	STACK_6, 7, 0
$0794	$8E02	    			BSF	STACK_2, 7, 0
$0796	$5003	    			MOVF	STACK_3, W, 0
$0798	$6E0B	    			MOVWF	STACK_11, 0
$079A	$5007	    			MOVF	STACK_7, W, 0
$079C	$6E03	    			MOVWF	STACK_3, 0
$079E	$0E00	    			MOVLW	0x00
$07A0	$640B	    			CPFSGT	STACK_11, 0
$07A2	$EF00	F004			GOTO	BRETURN32
$07A6	$500B	    			MOVF	STACK_11, W, 0
$07A8	$5E07	    			SUBWF	STACK_7, F, 0
$07AA	$B4D8	    			BTFSC	STATUS, Z, 0
$07AC	$EFA1	F004			GOTO	BLIGNED32
$07B0	$0E07	    			MOVLW	7
$07B2	$6407	    			CPFSGT	STACK_7, 0
$07B4	$EF6F	F004			GOTO	BNIB32
$07B8	$5E07	    			SUBWF	STACK_7, F, 0
$07BA	$C000	F008			MOVFF	STACK_0, STACK_8
$07BE	$C001	F000			MOVFF	STACK_1, STACK_0
$07C2	$C002	F001			MOVFF	STACK_2, STACK_1
$07C6	$6A02	    			CLRF	STACK_2, 0
$07C8	$4E07	    			DCFSNZ	STACK_7, F, 0
$07CA	$EFA1	F004			GOTO	BLIGNED32
$07CE	$6407	    			CPFSGT	STACK_7, 0
$07D0	$EF44	F004			GOTO	BNIB32A
$07D4	$5E07	    			SUBWF	STACK_7, F, 0
$07D6	$C000	F008			MOVFF	STACK_0, STACK_8
$07DA	$C001	F000			MOVFF	STACK_1, STACK_0
$07DE	$6A01	    			CLRF	STACK_1, 0
$07E0	$4E07	    			DCFSNZ	STACK_7, F, 0
$07E2	$EFA1	F004			GOTO	BLIGNED32
$07E6	$6407	    			CPFSGT	STACK_7, 0
$07E8	$EF22	F004			GOTO	BNIB32B
$07EC	$5E07	    			SUBWF	STACK_7, F, 0
$07EE	$C000	F008			MOVFF	STACK_0, STACK_8
$07F2	$6A00	    			CLRF	STACK_0, 0
$07F4	$4E07	    			DCFSNZ	STACK_7, F, 0
$07F6	$EFA1	F004			GOTO	BLIGNED32
$07FA	$6407	    			CPFSGT	STACK_7, 0
$07FC	$EF09	F004			GOTO	BNIB32C
$0800	$	BRETURN32:
$0800	$C00A	F002			MOVFF	STACK_10, STACK_2
$0804	$C005	F001			MOVFF	STACK_5, STACK_1
$0808	$C004	F000			MOVFF	STACK_4, STACK_0
$080C	$6A08	    			CLRF	STACK_8, 0
$080E	$EFCD	F005			GOTO	ADDEOK
$0812	$	BNIB32C:
$0812	$0E03	    			MOVLW	3
$0814	$6407	    			CPFSGT	STACK_7, 0
$0816	$EF14	F004			GOTO	BLOOP32C
$081A	$5E07	    			SUBWF	STACK_7, F, 0
$081C	$3808	    			SWAPF	STACK_8, W, 0
$081E	$0B0F	    			ANDLW	0x0F
$0820	$6E08	    			MOVWF	STACK_8, 0
$0822	$4E07	    			DCFSNZ	STACK_7, F, 0
$0824	$EFA1	F004			GOTO	BLIGNED32
$0828	$	BLOOP32C:
$0828	$90D8	    			BCF	STATUS, C, 0
$082A	$3208	    			RRCF	STACK_8, F, 0
$082C	$4E07	    			DCFSNZ	STACK_7, F, 0
$082E	$EFA1	F004			GOTO	BLIGNED32
$0832	$90D8	    			BCF	STATUS, C, 0
$0834	$3208	    			RRCF	STACK_8, F, 0
$0836	$4E07	    			DCFSNZ	STACK_7, F, 0
$0838	$EFA1	F004			GOTO	BLIGNED32
$083C	$90D8	    			BCF	STATUS, C, 0
$083E	$3208	    			RRCF	STACK_8, F, 0
$0840	$EFA1	F004			GOTO	BLIGNED32
$0844	$	BNIB32B:
$0844	$0E03	    			MOVLW	3
$0846	$6407	    			CPFSGT	STACK_7, 0
$0848	$EF33	F004			GOTO	BLOOP32B
$084C	$5E07	    			SUBWF	STACK_7, F, 0
$084E	$3808	    			SWAPF	STACK_8, W, 0
$0850	$0B0F	    			ANDLW	0x0F
$0852	$6E08	    			MOVWF	STACK_8, 0
$0854	$3800	    			SWAPF	STACK_0, W, 0
$0856	$0BF0	    			ANDLW	0xF0
$0858	$2608	    			ADDWF	STACK_8, F, 0
$085A	$3800	    			SWAPF	STACK_0, W, 0
$085C	$0B0F	    			ANDLW	0x0F
$085E	$6E00	    			MOVWF	STACK_0, 0
$0860	$4E07	    			DCFSNZ	STACK_7, F, 0
$0862	$EFA1	F004			GOTO	BLIGNED32
$0866	$	BLOOP32B:
$0866	$90D8	    			BCF	STATUS, C, 0
$0868	$3200	    			RRCF	STACK_0, F, 0
$086A	$3208	    			RRCF	STACK_8, F, 0
$086C	$4E07	    			DCFSNZ	STACK_7, F, 0
$086E	$EFA1	F004			GOTO	BLIGNED32
$0872	$90D8	    			BCF	STATUS, C, 0
$0874	$3200	    			RRCF	STACK_0, F, 0
$0876	$3208	    			RRCF	STACK_8, F, 0
$0878	$4E07	    			DCFSNZ	STACK_7, F, 0
$087A	$EFA1	F004			GOTO	BLIGNED32
$087E	$90D8	    			BCF	STATUS, C, 0
$0880	$3200	    			RRCF	STACK_0, F, 0
$0882	$3208	    			RRCF	STACK_8, F, 0
$0884	$EFA1	F004			GOTO	BLIGNED32
$0888	$	BNIB32A:
$0888	$0E03	    			MOVLW	3
$088A	$6407	    			CPFSGT	STACK_7, 0
$088C	$EF5B	F004			GOTO	BLOOP32A
$0890	$5E07	    			SUBWF	STACK_7, F, 0
$0892	$3808	    			SWAPF	STACK_8, W, 0
$0894	$0B0F	    			ANDLW	0x0F
$0896	$6E08	    			MOVWF	STACK_8, 0
$0898	$3800	    			SWAPF	STACK_0, W, 0
$089A	$0BF0	    			ANDLW	0xF0
$089C	$2608	    			ADDWF	STACK_8, F, 0
$089E	$3800	    			SWAPF	STACK_0, W, 0
$08A0	$0B0F	    			ANDLW	0x0F
$08A2	$6E00	    			MOVWF	STACK_0, 0
$08A4	$3801	    			SWAPF	STACK_1, W, 0
$08A6	$0BF0	    			ANDLW	0xF0
$08A8	$2600	    			ADDWF	STACK_0, F, 0
$08AA	$3801	    			SWAPF	STACK_1, W, 0
$08AC	$0B0F	    			ANDLW	0x0F
$08AE	$6E01	    			MOVWF	STACK_1, 0
$08B0	$4E07	    			DCFSNZ	STACK_7, F, 0
$08B2	$EFA1	F004			GOTO	BLIGNED32
$08B6	$	BLOOP32A:
$08B6	$90D8	    			BCF	STATUS, C, 0
$08B8	$3201	    			RRCF	STACK_1, F, 0
$08BA	$3200	    			RRCF	STACK_0, F, 0
$08BC	$3208	    			RRCF	STACK_8, F, 0
$08BE	$4E07	    			DCFSNZ	STACK_7, F, 0
$08C0	$EFA1	F004			GOTO	BLIGNED32
$08C4	$90D8	    			BCF	STATUS, C, 0
$08C6	$3201	    			RRCF	STACK_1, F, 0
$08C8	$3200	    			RRCF	STACK_0, F, 0
$08CA	$3208	    			RRCF	STACK_8, F, 0
$08CC	$4E07	    			DCFSNZ	STACK_7, F, 0
$08CE	$EFA1	F004			GOTO	BLIGNED32
$08D2	$90D8	    			BCF	STATUS, C, 0
$08D4	$3201	    			RRCF	STACK_1, F, 0
$08D6	$3200	    			RRCF	STACK_0, F, 0
$08D8	$3208	    			RRCF	STACK_8, F, 0
$08DA	$EFA1	F004			GOTO	BLIGNED32
$08DE	$	BNIB32:
$08DE	$0E03	    			MOVLW	3
$08E0	$6407	    			CPFSGT	STACK_7, 0
$08E2	$EF8C	F004			GOTO	BLOOP32
$08E6	$5E07	    			SUBWF	STACK_7, F, 0
$08E8	$3808	    			SWAPF	STACK_8, W, 0
$08EA	$0B0F	    			ANDLW	0x0F
$08EC	$6E08	    			MOVWF	STACK_8, 0
$08EE	$3800	    			SWAPF	STACK_0, W, 0
$08F0	$0BF0	    			ANDLW	0xF0
$08F2	$2608	    			ADDWF	STACK_8, F, 0
$08F4	$3800	    			SWAPF	STACK_0, W, 0
$08F6	$0B0F	    			ANDLW	0x0F
$08F8	$6E00	    			MOVWF	STACK_0, 0
$08FA	$3801	    			SWAPF	STACK_1, W, 0
$08FC	$0BF0	    			ANDLW	0xF0
$08FE	$2600	    			ADDWF	STACK_0, F, 0
$0900	$3801	    			SWAPF	STACK_1, W, 0
$0902	$0B0F	    			ANDLW	0x0F
$0904	$6E01	    			MOVWF	STACK_1, 0
$0906	$3802	    			SWAPF	STACK_2, W, 0
$0908	$0BF0	    			ANDLW	0xF0
$090A	$2601	    			ADDWF	STACK_1, F, 0
$090C	$3802	    			SWAPF	STACK_2, W, 0
$090E	$0B0F	    			ANDLW	0x0F
$0910	$6E02	    			MOVWF	STACK_2, 0
$0912	$4E07	    			DCFSNZ	STACK_7, F, 0
$0914	$EFA1	F004			GOTO	BLIGNED32
$0918	$	BLOOP32:
$0918	$90D8	    			BCF	STATUS, C, 0
$091A	$3202	    			RRCF	STACK_2, F, 0
$091C	$3201	    			RRCF	STACK_1, F, 0
$091E	$3200	    			RRCF	STACK_0, F, 0
$0920	$3208	    			RRCF	STACK_8, F, 0
$0922	$4E07	    			DCFSNZ	STACK_7, F, 0
$0924	$EFA1	F004			GOTO	BLIGNED32
$0928	$90D8	    			BCF	STATUS, C, 0
$092A	$3202	    			RRCF	STACK_2, F, 0
$092C	$3201	    			RRCF	STACK_1, F, 0
$092E	$3200	    			RRCF	STACK_0, F, 0
$0930	$3208	    			RRCF	STACK_8, F, 0
$0932	$4E07	    			DCFSNZ	STACK_7, F, 0
$0934	$EFA1	F004			GOTO	BLIGNED32
$0938	$90D8	    			BCF	STATUS, C, 0
$093A	$3202	    			RRCF	STACK_2, F, 0
$093C	$3201	    			RRCF	STACK_1, F, 0
$093E	$3200	    			RRCF	STACK_0, F, 0
$0940	$3208	    			RRCF	STACK_8, F, 0
$0942	$	BLIGNED32:
$0942	$6A09	    			CLRF	STACK_9, 0
$0944	$0E00	    			MOVLW	0x00
$0946	$AE0E	    			BTFSS	STACK_14, 7, 0
$0948	$EF95	F005			GOTO	AOK32
$094C	$1E08	    			COMF	STACK_8, F, 0
$094E	$1E00	    			COMF	STACK_0, F, 0
$0950	$1E01	    			COMF	STACK_1, F, 0
$0952	$1E02	    			COMF	STACK_2, F, 0
$0954	$2A08	    			INCF	STACK_8, F, 0
$0956	$2200	    			ADDWFC	STACK_0, F, 0
$0958	$2201	    			ADDWFC	STACK_1, F, 0
$095A	$2202	    			ADDWFC	STACK_2, F, 0
$095C	$EF95	F005			GOTO	AOK32
$0960	$	USEA32:
$0960	$5007	    			MOVF	STACK_7, W, 0
$0962	$A4D8	    			BTFSS	STATUS, Z, 0
$0964	$EFB6	F004			GOTO	BNE032
$0968	$EFCD	F005			GOTO	ADDEOK
$096C	$	BNE032:
$096C	$6A09	    			CLRF	STACK_9, 0
$096E	$C002	F00A			MOVFF	STACK_2, STACK_10
$0972	$8E02	    			BSF	STACK_2, 7, 0
$0974	$8E06	    			BSF	STACK_6, 7, 0
$0976	$5007	    			MOVF	STACK_7, W, 0
$0978	$5C03	    			SUBWF	STACK_3, W, 0
$097A	$6E07	    			MOVWF	STACK_7, 0
$097C	$B4D8	    			BTFSC	STATUS, Z, 0
$097E	$EF88	F005			GOTO	ALIGNED32
$0982	$0E07	    			MOVLW	7
$0984	$6407	    			CPFSGT	STACK_7, 0
$0986	$EF56	F005			GOTO	ANIB32
$098A	$5E07	    			SUBWF	STACK_7, F, 0
$098C	$5004	    			MOVF	STACK_4, W, 0
$098E	$6E09	    			MOVWF	STACK_9, 0
$0990	$5005	    			MOVF	STACK_5, W, 0
$0992	$6E04	    			MOVWF	STACK_4, 0
$0994	$5006	    			MOVF	STACK_6, W, 0
$0996	$6E05	    			MOVWF	STACK_5, 0
$0998	$6A06	    			CLRF	STACK_6, 0
$099A	$4E07	    			DCFSNZ	STACK_7, F, 0
$099C	$EF88	F005			GOTO	ALIGNED32
$09A0	$0E07	    			MOVLW	7
$09A2	$6407	    			CPFSGT	STACK_7, 0
$09A4	$EF2B	F005			GOTO	ANIB32A
$09A8	$5E07	    			SUBWF	STACK_7, F, 0
$09AA	$5004	    			MOVF	STACK_4, W, 0
$09AC	$6E09	    			MOVWF	STACK_9, 0
$09AE	$5005	    			MOVF	STACK_5, W, 0
$09B0	$6E04	    			MOVWF	STACK_4, 0
$09B2	$6A05	    			CLRF	STACK_5, 0
$09B4	$4E07	    			DCFSNZ	STACK_7, F, 0
$09B6	$EF88	F005			GOTO	ALIGNED32
$09BA	$0E07	    			MOVLW	7
$09BC	$6407	    			CPFSGT	STACK_7, 0
$09BE	$EF09	F005			GOTO	ANIB32B
$09C2	$5E07	    			SUBWF	STACK_7, F, 0
$09C4	$5004	    			MOVF	STACK_4, W, 0
$09C6	$6E09	    			MOVWF	STACK_9, 0
$09C8	$6A04	    			CLRF	STACK_4, 0
$09CA	$4E07	    			DCFSNZ	STACK_7, F, 0
$09CC	$EF88	F005			GOTO	ALIGNED32
$09D0	$0E07	    			MOVLW	7
$09D2	$6407	    			CPFSGT	STACK_7, 0
$09D4	$EFF0	F004			GOTO	ANIB32C
$09D8	$C00A	F002			MOVFF	STACK_10, STACK_2
$09DC	$EFCD	F005			GOTO	ADDEOK
$09E0	$	ANIB32C:
$09E0	$0E03	    			MOVLW	3
$09E2	$6407	    			CPFSGT	STACK_7, 0
$09E4	$EFFB	F004			GOTO	ALOOP32C
$09E8	$5E07	    			SUBWF	STACK_7, F, 0
$09EA	$3809	    			SWAPF	STACK_9, W, 0
$09EC	$0B0F	    			ANDLW	0x0F
$09EE	$6E09	    			MOVWF	STACK_9, 0
$09F0	$4E07	    			DCFSNZ	STACK_7, F, 0
$09F2	$EF88	F005			GOTO	ALIGNED32
$09F6	$	ALOOP32C:
$09F6	$90D8	    			BCF	STATUS, C, 0
$09F8	$3209	    			RRCF	STACK_9, F, 0
$09FA	$4E07	    			DCFSNZ	STACK_7, F, 0
$09FC	$EF88	F005			GOTO	ALIGNED32
$0A00	$90D8	    			BCF	STATUS, C, 0
$0A02	$3209	    			RRCF	STACK_9, F, 0
$0A04	$4E07	    			DCFSNZ	STACK_7, F, 0
$0A06	$EF88	F005			GOTO	ALIGNED32
$0A0A	$90D8	    			BCF	STATUS, C, 0
$0A0C	$3209	    			RRCF	STACK_9, F, 0
$0A0E	$EF88	F005			GOTO	ALIGNED32
$0A12	$	ANIB32B:
$0A12	$0E03	    			MOVLW	3
$0A14	$6407	    			CPFSGT	STACK_7, 0
$0A16	$EF1A	F005			GOTO	ALOOP32B
$0A1A	$5E07	    			SUBWF	STACK_7, F, 0
$0A1C	$3809	    			SWAPF	STACK_9, W, 0
$0A1E	$0B0F	    			ANDLW	0x0F
$0A20	$6E09	    			MOVWF	STACK_9, 0
$0A22	$3804	    			SWAPF	STACK_4, W, 0
$0A24	$0BF0	    			ANDLW	0xF0
$0A26	$2609	    			ADDWF	STACK_9, F, 0
$0A28	$3804	    			SWAPF	STACK_4, W, 0
$0A2A	$0B0F	    			ANDLW	0x0F
$0A2C	$6E04	    			MOVWF	STACK_4, 0
$0A2E	$4E07	    			DCFSNZ	STACK_7, F, 0
$0A30	$EF88	F005			GOTO	ALIGNED32
$0A34	$	ALOOP32B:
$0A34	$90D8	    			BCF	STATUS, C, 0
$0A36	$3204	    			RRCF	STACK_4, F, 0
$0A38	$3209	    			RRCF	STACK_9, F, 0
$0A3A	$4E07	    			DCFSNZ	STACK_7, F, 0
$0A3C	$EF88	F005			GOTO	ALIGNED32
$0A40	$90D8	    			BCF	STATUS, C, 0
$0A42	$3204	    			RRCF	STACK_4, F, 0
$0A44	$3209	    			RRCF	STACK_9, F, 0
$0A46	$4E07	    			DCFSNZ	STACK_7, F, 0
$0A48	$EF88	F005			GOTO	ALIGNED32
$0A4C	$90D8	    			BCF	STATUS, C, 0
$0A4E	$3204	    			RRCF	STACK_4, F, 0
$0A50	$3209	    			RRCF	STACK_9, F, 0
$0A52	$EF88	F005			GOTO	ALIGNED32
$0A56	$	ANIB32A:
$0A56	$0E03	    			MOVLW	3
$0A58	$6407	    			CPFSGT	STACK_7, 0
$0A5A	$EF42	F005			GOTO	ALOOP32A
$0A5E	$5E07	    			SUBWF	STACK_7, F, 0
$0A60	$3809	    			SWAPF	STACK_9, W, 0
$0A62	$0B0F	    			ANDLW	0x0F
$0A64	$6E09	    			MOVWF	STACK_9, 0
$0A66	$3804	    			SWAPF	STACK_4, W, 0
$0A68	$0BF0	    			ANDLW	0xF0
$0A6A	$2609	    			ADDWF	STACK_9, F, 0
$0A6C	$3804	    			SWAPF	STACK_4, W, 0
$0A6E	$0B0F	    			ANDLW	0x0F
$0A70	$6E04	    			MOVWF	STACK_4, 0
$0A72	$3805	    			SWAPF	STACK_5, W, 0
$0A74	$0BF0	    			ANDLW	0xF0
$0A76	$2604	    			ADDWF	STACK_4, F, 0
$0A78	$3805	    			SWAPF	STACK_5, W, 0
$0A7A	$0B0F	    			ANDLW	0x0F
$0A7C	$6E05	    			MOVWF	STACK_5, 0
$0A7E	$4E07	    			DCFSNZ	STACK_7, F, 0
$0A80	$EF88	F005			GOTO	ALIGNED32
$0A84	$	ALOOP32A:
$0A84	$90D8	    			BCF	STATUS, C, 0
$0A86	$3205	    			RRCF	STACK_5, F, 0
$0A88	$3204	    			RRCF	STACK_4, F, 0
$0A8A	$3209	    			RRCF	STACK_9, F, 0
$0A8C	$4E07	    			DCFSNZ	STACK_7, F, 0
$0A8E	$EF88	F005			GOTO	ALIGNED32
$0A92	$90D8	    			BCF	STATUS, C, 0
$0A94	$3205	    			RRCF	STACK_5, F, 0
$0A96	$3204	    			RRCF	STACK_4, F, 0
$0A98	$3209	    			RRCF	STACK_9, F, 0
$0A9A	$4E07	    			DCFSNZ	STACK_7, F, 0
$0A9C	$EF88	F005			GOTO	ALIGNED32
$0AA0	$90D8	    			BCF	STATUS, C, 0
$0AA2	$3205	    			RRCF	STACK_5, F, 0
$0AA4	$3204	    			RRCF	STACK_4, F, 0
$0AA6	$3209	    			RRCF	STACK_9, F, 0
$0AA8	$EF88	F005			GOTO	ALIGNED32
$0AAC	$	ANIB32:
$0AAC	$0E03	    			MOVLW	3
$0AAE	$6407	    			CPFSGT	STACK_7, 0
$0AB0	$EF73	F005			GOTO	ALOOP32
$0AB4	$5E07	    			SUBWF	STACK_7, F, 0
$0AB6	$3809	    			SWAPF	STACK_9, W, 0
$0AB8	$0B0F	    			ANDLW	0x0F
$0ABA	$6E09	    			MOVWF	STACK_9, 0
$0ABC	$3804	    			SWAPF	STACK_4, W, 0
$0ABE	$0BF0	    			ANDLW	0xF0
$0AC0	$2609	    			ADDWF	STACK_9, F, 0
$0AC2	$3804	    			SWAPF	STACK_4, W, 0
$0AC4	$0B0F	    			ANDLW	0x0F
$0AC6	$6E04	    			MOVWF	STACK_4, 0
$0AC8	$3805	    			SWAPF	STACK_5, W, 0
$0ACA	$0BF0	    			ANDLW	0xF0
$0ACC	$2604	    			ADDWF	STACK_4, F, 0
$0ACE	$3805	    			SWAPF	STACK_5, W, 0
$0AD0	$0B0F	    			ANDLW	0x0F
$0AD2	$6E05	    			MOVWF	STACK_5, 0
$0AD4	$3806	    			SWAPF	STACK_6, W, 0
$0AD6	$0BF0	    			ANDLW	0xF0
$0AD8	$2605	    			ADDWF	STACK_5, F, 0
$0ADA	$3806	    			SWAPF	STACK_6, W, 0
$0ADC	$0B0F	    			ANDLW	0x0F
$0ADE	$6E06	    			MOVWF	STACK_6, 0
$0AE0	$4E07	    			DCFSNZ	STACK_7, F, 0
$0AE2	$EF88	F005			GOTO	ALIGNED32
$0AE6	$	ALOOP32:
$0AE6	$90D8	    			BCF	STATUS, C, 0
$0AE8	$3206	    			RRCF	STACK_6, F, 0
$0AEA	$3205	    			RRCF	STACK_5, F, 0
$0AEC	$3204	    			RRCF	STACK_4, F, 0
$0AEE	$3209	    			RRCF	STACK_9, F, 0
$0AF0	$4E07	    			DCFSNZ	STACK_7, F, 0
$0AF2	$EF88	F005			GOTO	ALIGNED32
$0AF6	$90D8	    			BCF	STATUS, C, 0
$0AF8	$3206	    			RRCF	STACK_6, F, 0
$0AFA	$3205	    			RRCF	STACK_5, F, 0
$0AFC	$3204	    			RRCF	STACK_4, F, 0
$0AFE	$3209	    			RRCF	STACK_9, F, 0
$0B00	$4E07	    			DCFSNZ	STACK_7, F, 0
$0B02	$EF88	F005			GOTO	ALIGNED32
$0B06	$90D8	    			BCF	STATUS, C, 0
$0B08	$3206	    			RRCF	STACK_6, F, 0
$0B0A	$3205	    			RRCF	STACK_5, F, 0
$0B0C	$3204	    			RRCF	STACK_4, F, 0
$0B0E	$3209	    			RRCF	STACK_9, F, 0
$0B10	$	ALIGNED32:
$0B10	$6A08	    			CLRF	STACK_8, 0
$0B12	$0E00	    			MOVLW	0x00
$0B14	$AE0E	    			BTFSS	STACK_14, 7, 0
$0B16	$EF95	F005			GOTO	AOK32
$0B1A	$1E09	    			COMF	STACK_9, F, 0
$0B1C	$1E04	    			COMF	STACK_4, F, 0
$0B1E	$1E05	    			COMF	STACK_5, F, 0
$0B20	$1E06	    			COMF	STACK_6, F, 0
$0B22	$2A09	    			INCF	STACK_9, F, 0
$0B24	$2204	    			ADDWFC	STACK_4, F, 0
$0B26	$2205	    			ADDWFC	STACK_5, F, 0
$0B28	$2206	    			ADDWFC	STACK_6, F, 0
$0B2A	$	AOK32:
$0B2A	$5009	    			MOVF	STACK_9, W, 0
$0B2C	$2608	    			ADDWF	STACK_8, F, 0
$0B2E	$5004	    			MOVF	STACK_4, W, 0
$0B30	$2200	    			ADDWFC	STACK_0, F, 0
$0B32	$5005	    			MOVF	STACK_5, W, 0
$0B34	$2201	    			ADDWFC	STACK_1, F, 0
$0B36	$5006	    			MOVF	STACK_6, W, 0
$0B38	$2202	    			ADDWFC	STACK_2, F, 0
$0B3A	$BE0E	    			BTFSC	STACK_14, 7, 0
$0B3C	$EFAC	F005			GOTO	ACOMP32
$0B40	$A0D8	    			BTFSS	STATUS, C, 0
$0B42	$EFBB	F005			GOTO	ADDJPNRMRND4032
$0B46	$3202	    			RRCF	STACK_2, F, 0
$0B48	$3201	    			RRCF	STACK_1, F, 0
$0B4A	$3200	    			RRCF	STACK_0, F, 0
$0B4C	$3208	    			RRCF	STACK_8, F, 0
$0B4E	$3E03	    			INCFSZ	STACK_3, F, 0
$0B50	$EFBB	F005			GOTO	ADDJPNRMRND4032
$0B54	$EFC7	F005			GOTO	ADDJPSETFOV32
$0B58	$	ACOMP32:
$0B58	$B0D8	    			BTFSC	STATUS, C, 0
$0B5A	$EFC1	F005			GOTO	ADDJPNRM4032
$0B5E	$0E00	    			MOVLW	0x00
$0B60	$1E08	    			COMF	STACK_8, F, 0
$0B62	$1E00	    			COMF	STACK_0, F, 0
$0B64	$1E01	    			COMF	STACK_1, F, 0
$0B66	$1E02	    			COMF	STACK_2, F, 0
$0B68	$2A08	    			INCF	STACK_8, F, 0
$0B6A	$2200	    			ADDWFC	STACK_0, F, 0
$0B6C	$2201	    			ADDWFC	STACK_1, F, 0
$0B6E	$2202	    			ADDWFC	STACK_2, F, 0
$0B70	$7E0A	    			BTG	STACK_10, 7, 0
$0B72	$EFC1	F005			GOTO	ADDJPNRM4032
$0B76	$	ADDJPNRMRND4032:
$0B76	$0E01	    			MOVLW	0x01
$0B78	$6E0C	    			MOVWF	STACK_12, 0
$0B7A	$ECB0	F001			CALL	_NRM4032
$0B7E	$EFCF	F005			GOTO	ADDEEE
$0B82	$	ADDJPNRM4032:
$0B82	$0E02	    			MOVLW	0x02
$0B84	$6E0C	    			MOVWF	STACK_12, 0
$0B86	$ECB0	F001			CALL	_NRM4032
$0B8A	$EFCF	F005			GOTO	ADDEEE
$0B8E	$	ADDJPSETFOV32:
$0B8E	$0E04	    			MOVLW	0x04
$0B90	$6E0C	    			MOVWF	STACK_12, 0
$0B92	$EC66	F001			CALL	_SETFOV32
$0B96	$EFCF	F005			GOTO	ADDEEE
$0B9A	$	ADDEOK:
$0B9A	$0E00	    			MOVLW	0x00
$0B9C	$6E0C	    			MOVWF	STACK_12, 0
$0B9E	$	ADDEEE:
$0B9E	$0012	    			RETURN
$0BA0	$	_Compare_Double:
$0BA0	$0100	    			MOVLB	0
$0BA2	$6A0A	    			CLRF	STACK_10, 0
$0BA4	$5003	    			MOVF	STACK_3, W, 0
$0BA6	$A4D8	    			BTFSS	STATUS, Z, 0
$0BA8	$800A	    			BSF	STACK_10, 0, 0
$0BAA	$5007	    			MOVF	STACK_7, W, 0
$0BAC	$A4D8	    			BTFSS	STATUS, Z, 0
$0BAE	$820A	    			BSF	STACK_10, 1, 0
$0BB0	$500A	    			MOVF	STACK_10, W, 0
$0BB2	$B4D8	    			BTFSC	STATUS, Z, 0
$0BB4	$EF34	F006			GOTO	COMPARE_EQU
$0BB8	$0A03	    			XORLW	0x03
$0BBA	$B4D8	    			BTFSC	STATUS, Z, 0
$0BBC	$EFED	F005			GOTO	COMPARE_NOTZERO
$0BC0	$B00A	    			BTFSC	STACK_10, 0, 0
$0BC2	$EFE8	F005			GOTO	COMPARE_XNOTZERO
$0BC6	$	COMPARE_YNOTZERO:
$0BC6	$AE06	    			BTFSS	STACK_6, 7, 0
$0BC8	$EF32	F006			GOTO	COMPARE_LT
$0BCC	$EF30	F006			GOTO	COMPARE_GT
$0BD0	$	COMPARE_XNOTZERO:
$0BD0	$AE02	    			BTFSS	STACK_2, 7, 0
$0BD2	$EF30	F006			GOTO	COMPARE_GT
$0BD6	$EF32	F006			GOTO	COMPARE_LT
$0BDA	$	COMPARE_NOTZERO:
$0BDA	$5002	    			MOVF	STACK_2, W, 0
$0BDC	$0B80	    			ANDLW	0x80
$0BDE	$6E0A	    			MOVWF	STACK_10, 0
$0BE0	$9E02	    			BCF	STACK_2, 7, 0
$0BE2	$5006	    			MOVF	STACK_6, W, 0
$0BE4	$0B80	    			ANDLW	0x80
$0BE6	$9E06	    			BCF	STACK_6, 7, 0
$0BE8	$180A	    			XORWF	STACK_10, W, 0
$0BEA	$B4D8	    			BTFSC	STATUS, Z, 0
$0BEC	$EFFE	F005			GOTO	COMPARE_TESTALL
$0BF0	$500A	    			MOVF	STACK_10, W, 0
$0BF2	$B4D8	    			BTFSC	STATUS, Z, 0
$0BF4	$EF30	F006			GOTO	COMPARE_GT
$0BF8	$EF32	F006			GOTO	COMPARE_LT
$0BFC	$	COMPARE_TESTALL:
$0BFC	$5007	    			MOVF	STACK_7, W, 0
$0BFE	$5C03	    			SUBWF	STACK_3, W, 0
$0C00	$B4D8	    			BTFSC	STATUS, Z, 0
$0C02	$EF08	F006			GOTO	COMPARE_C1
$0C06	$A0D8	    			BTFSS	STATUS, C, 0
$0C08	$EF24	F006			GOTO	GT_FALSE
$0C0C	$EF2A	F006			GOTO	GT_TRUE
$0C10	$	COMPARE_C1:
$0C10	$5006	    			MOVF	STACK_6, W, 0
$0C12	$5C02	    			SUBWF	STACK_2, W, 0
$0C14	$B4D8	    			BTFSC	STATUS, Z, 0
$0C16	$EF12	F006			GOTO	COMPARE_C2
$0C1A	$A0D8	    			BTFSS	STATUS, C, 0
$0C1C	$EF24	F006			GOTO	GT_FALSE
$0C20	$EF2A	F006			GOTO	GT_TRUE
$0C24	$	COMPARE_C2:
$0C24	$5005	    			MOVF	STACK_5, W, 0
$0C26	$5C01	    			SUBWF	STACK_1, W, 0
$0C28	$B4D8	    			BTFSC	STATUS, Z, 0
$0C2A	$EF1C	F006			GOTO	COMPARE_C3
$0C2E	$A0D8	    			BTFSS	STATUS, C, 0
$0C30	$EF24	F006			GOTO	GT_FALSE
$0C34	$EF2A	F006			GOTO	GT_TRUE
$0C38	$	COMPARE_C3:
$0C38	$5004	    			MOVF	STACK_4, W, 0
$0C3A	$5C00	    			SUBWF	STACK_0, W, 0
$0C3C	$B4D8	    			BTFSC	STATUS, Z, 0
$0C3E	$EF34	F006			GOTO	COMPARE_EQU
$0C42	$B0D8	    			BTFSC	STATUS, C, 0
$0C44	$EF2A	F006			GOTO	GT_TRUE
$0C48	$	GT_FALSE:
$0C48	$520A	    			MOVF	STACK_10, F, 0
$0C4A	$B4D8	    			BTFSC	STATUS, Z, 0
$0C4C	$EF32	F006			GOTO	COMPARE_LT
$0C50	$EF30	F006			GOTO	COMPARE_GT
$0C54	$	GT_TRUE:
$0C54	$520A	    			MOVF	STACK_10, F, 0
$0C56	$B4D8	    			BTFSC	STATUS, Z, 0
$0C58	$EF30	F006			GOTO	COMPARE_GT
$0C5C	$EF32	F006			GOTO	COMPARE_LT
$0C60	$	COMPARE_GT:
$0C60	$80D8	    			BSF	STATUS, C, 0
$0C62	$0012	    			RETURN
$0C64	$	COMPARE_LT:
$0C64	$90D8	    			BCF	STATUS, C, 0
$0C66	$0012	    			RETURN
$0C68	$	COMPARE_EQU:
$0C68	$80D8	    			BSF	STATUS, C, 0
$0C6A	$84D8	    			BSF	STATUS, Z, 0
$0C6C	$0012	    			RETURN
$0C6E	$0012	    			RETURN
$0C70	$	_Double2Int:
$0C70	$0100	    			MOVLB	0
$0C72	$	INT3216:
$0C72	$6A0B	    			CLRF	STACK_11, 0
$0C74	$5003	    			MOVF	STACK_3, W, 0
$0C76	$B4D8	    			BTFSC	STATUS, Z, 0
$0C78	$EF7F	F006			GOTO	IRES016
$0C7C	$5002	    			MOVF	STACK_2, W, 0
$0C7E	$6E0A	    			MOVWF	STACK_10, 0
$0C80	$8E02	    			BSF	STACK_2, 7, 0
$0C82	$0E8E	    			MOVLW	142
$0C84	$5E03	    			SUBWF	STACK_3, F, 0
$0C86	$AE03	    			BTFSS	STACK_3, 7, 0
$0C88	$EF83	F006			GOTO	SETIOV16
$0C8C	$6C03	    			NEGF	STACK_3, 0
$0C8E	$0E08	    			MOVLW	8
$0C90	$5C03	    			SUBWF	STACK_3, W, 0
$0C92	$A0D8	    			BTFSS	STATUS, C, 0
$0C94	$EF5E	F006			GOTO	TSHIFT3216
$0C98	$6E03	    			MOVWF	STACK_3, 0
$0C9A	$3601	    			RLCF	STACK_1, F, 0
$0C9C	$C002	F001			MOVFF	STACK_2, STACK_1
$0CA0	$6A02	    			CLRF	STACK_2, 0
$0CA2	$0E08	    			MOVLW	8
$0CA4	$5C03	    			SUBWF	STACK_3, W, 0
$0CA6	$A0D8	    			BTFSS	STATUS, C, 0
$0CA8	$EF5E	F006			GOTO	TSHIFT3216
$0CAC	$6E03	    			MOVWF	STACK_3, 0
$0CAE	$3601	    			RLCF	STACK_1, F, 0
$0CB0	$6A01	    			CLRF	STACK_1, 0
$0CB2	$5003	    			MOVF	STACK_3, W, 0
$0CB4	$A4D8	    			BTFSS	STATUS, Z, 0
$0CB6	$90D8	    			BCF	STATUS, C, 0
$0CB8	$EF68	F006			GOTO	SHIFT3216OK
$0CBC	$	TSHIFT3216:
$0CBC	$5003	    			MOVF	STACK_3, W, 0
$0CBE	$B4D8	    			BTFSC	STATUS, Z, 0
$0CC0	$EF68	F006			GOTO	SHIFT3216OK
$0CC4	$	SHIFT3216:
$0CC4	$90D8	    			BCF	STATUS, C, 0
$0CC6	$3202	    			RRCF	STACK_2, F, 0
$0CC8	$3201	    			RRCF	STACK_1, F, 0
$0CCA	$2E03	    			DECFSZ	STACK_3, F, 0
$0CCC	$EF62	F006			GOTO	SHIFT3216
$0CD0	$	SHIFT3216OK:
$0CD0	$BC0B	    			BTFSC	STACK_11, 6, 0
$0CD2	$A001	    			BTFSS	STACK_1, 0, 0
$0CD4	$EF75	F006			GOTO	INT3216OK
$0CD8	$A0D8	    			BTFSS	STATUS, C, 0
$0CDA	$EF75	F006			GOTO	INT3216OK
$0CDE	$2A01	    			INCF	STACK_1, F, 0
$0CE0	$B4D8	    			BTFSC	STATUS, Z, 0
$0CE2	$2A02	    			INCF	STACK_2, F, 0
$0CE4	$BE02	    			BTFSC	STACK_2, 7, 0
$0CE6	$EF92	F006			GOTO	JPJSETIOV3224
$0CEA	$	INT3216OK:
$0CEA	$AE0A	    			BTFSS	STACK_10, 7, 0
$0CEC	$EF98	F006			GOTO	INT3216EOK
$0CF0	$1E02	    			COMF	STACK_2, F, 0
$0CF2	$1E01	    			COMF	STACK_1, F, 0
$0CF4	$2A01	    			INCF	STACK_1, F, 0
$0CF6	$B4D8	    			BTFSC	STATUS, Z, 0
$0CF8	$2A02	    			INCF	STACK_2, F, 0
$0CFA	$EF98	F006			GOTO	INT3216EOK
$0CFE	$	IRES016:
$0CFE	$6A02	    			CLRF	STACK_2, 0
$0D00	$6A01	    			CLRF	STACK_1, 0
$0D02	$EF98	F006			GOTO	INT3216EOK
$0D06	$	SETIOV16:
$0D06	$800B	    			BSF	STACK_11, 0, 0
$0D08	$AE0B	    			BTFSS	STACK_11, 7, 0
$0D0A	$EF9C	F006			GOTO	INT3216EER
$0D0E	$6A02	    			CLRF	STACK_2, 0
$0D10	$AE0A	    			BTFSS	STACK_10, 7, 0
$0D12	$EF9C	F006			GOTO	INT3216EER
$0D16	$0EFF	    			MOVLW	0xFF
$0D18	$6E02	    			MOVWF	STACK_2, 0
$0D1A	$6E01	    			MOVWF	STACK_1, 0
$0D1C	$360A	    			RLCF	STACK_10, F, 0
$0D1E	$3202	    			RRCF	STACK_2, F, 0
$0D20	$EF9C	F006			GOTO	INT3216EER
$0D24	$	JPJSETIOV3224:
$0D24	$0E01	    			MOVLW	0x01
$0D26	$6E0C	    			MOVWF	STACK_12, 0
$0D28	$ECA6	F002			CALL	_SETIOV3224
$0D2C	$EF9E	F006			GOTO	INT3216EEE
$0D30	$	INT3216EOK:
$0D30	$0E00	    			MOVLW	0x00
$0D32	$6E0C	    			MOVWF	STACK_12, 0
$0D34	$EF9E	F006			GOTO	INT3216EEE
$0D38	$	INT3216EER:
$0D38	$0EFF	    			MOVLW	0xFF
$0D3A	$6E0C	    			MOVWF	STACK_12, 0
$0D3C	$	INT3216EEE:
$0D3C	$5001	    			MOVF	STACK_1, W, 0
$0D3E	$6E00	    			MOVWF	STACK_0, 0
$0D40	$5002	    			MOVF	STACK_2, W, 0
$0D42	$6E01	    			MOVWF	STACK_1, 0
$0D44	$0012	    			RETURN
$0D46	$	_Mul_32x32_S:
$0D46	$0100	    			MOVLB	0
$0D48	$6A0D	    			CLRF	STACK_13, 0
$0D4A	$	_IF_FIRST:
$0D4A	$AE03	    			BTFSS	STACK_3, 7, 0
$0D4C	$EFB3	F006			GOTO	_IF_SECOND
$0D50	$	_INVERCE_FIRST:
$0D50	$1E00	    			COMF	STACK_0, F, 0
$0D52	$1E01	    			COMF	STACK_1, F, 0
$0D54	$1E02	    			COMF	STACK_2, F, 0
$0D56	$1E03	    			COMF	STACK_3, F, 0
$0D58	$0E00	    			MOVLW	0
$0D5A	$2A00	    			INCF	STACK_0, F, 0
$0D5C	$2201	    			ADDWFC	STACK_1, F, 0
$0D5E	$2202	    			ADDWFC	STACK_2, F, 0
$0D60	$2203	    			ADDWFC	STACK_3, F, 0
$0D62	$0E81	    			MOVLW	129
$0D64	$260D	    			ADDWF	STACK_13, F, 0
$0D66	$	_IF_SECOND:
$0D66	$AE07	    			BTFSS	STACK_7, 7, 0
$0D68	$EFC0	F006			GOTO	_MULT
$0D6C	$	_INBERSE_SECOND:
$0D6C	$1E04	    			COMF	STACK_4, F, 0
$0D6E	$1E05	    			COMF	STACK_5, F, 0
$0D70	$1E06	    			COMF	STACK_6, F, 0
$0D72	$1E07	    			COMF	STACK_7, F, 0
$0D74	$0E00	    			MOVLW	0
$0D76	$2A04	    			INCF	STACK_4, F, 0
$0D78	$2205	    			ADDWFC	STACK_5, F, 0
$0D7A	$2206	    			ADDWFC	STACK_6, F, 0
$0D7C	$2207	    			ADDWFC	STACK_7, F, 0
$0D7E	$2A0D	    			INCF	STACK_13, F, 0
$0D80	$	_MULT:
$0D80	$ECB5	F002			CALL	_Mul_32x32_U
$0D84	$A00D	    			BTFSS	STACK_13, 0, 0
$0D86	$EFD6	F006			GOTO	_EXIT
$0D8A	$1E00	    			COMF	STACK_0, F, 0
$0D8C	$1E01	    			COMF	STACK_1, F, 0
$0D8E	$1E02	    			COMF	STACK_2, F, 0
$0D90	$1E03	    			COMF	STACK_3, F, 0
$0D92	$1E08	    			COMF	STACK_8, F, 0
$0D94	$1E09	    			COMF	STACK_9, F, 0
$0D96	$1E0A	    			COMF	STACK_10, F, 0
$0D98	$1E0B	    			COMF	STACK_11, F, 0
$0D9A	$0E00	    			MOVLW	0
$0D9C	$2A00	    			INCF	STACK_0, F, 0
$0D9E	$2201	    			ADDWFC	STACK_1, F, 0
$0DA0	$2202	    			ADDWFC	STACK_2, F, 0
$0DA2	$2203	    			ADDWFC	STACK_3, F, 0
$0DA4	$2208	    			ADDWFC	STACK_8, F, 0
$0DA6	$2209	    			ADDWFC	STACK_9, F, 0
$0DA8	$220A	    			ADDWFC	STACK_10, F, 0
$0DAA	$220B	    			ADDWFC	STACK_11, F, 0
$0DAC	$	_EXIT:
$0DAC	$0012	    			RETURN
$0DAE	$	_dutyInterruptProc:
;duty.c,47 :: 			void dutyInterruptProc(void){
;duty.c,49 :: 			duty_count--;
$0DAE	$061E	    			DECF	_duty_count, 1, 0
;duty.c,50 :: 			if ( duty_count < setpoint ){
$0DB0	$501F	    			MOVF	_setpoint, 0, 0
$0DB2	$5C1E	    			SUBWF	_duty_count, 0, 0
$0DB4	$E203	    			BC	L_dutyInterruptProc_0
;duty.c,51 :: 			DUTY_PIN = 1;
$0DB6	$8A83	    			BSF	PORTD, 5, 0
;duty.c,52 :: 			}
$0DB8	$EFDF	F006			GOTO	L_dutyInterruptProc_1
$0DBC	$	L_dutyInterruptProc_0:
;duty.c,54 :: 			DUTY_PIN = 0;
$0DBC	$9A83	    			BCF	PORTD, 5, 0
;duty.c,55 :: 			}
$0DBE	$	L_dutyInterruptProc_1:
;duty.c,56 :: 			if ( duty_count == 0 ){
$0DBE	$501E	    			MOVF	_duty_count, 0, 0
$0DC0	$0A00	    			XORLW	0
$0DC2	$E102	    			BNZ	L_dutyInterruptProc_2
;duty.c,57 :: 			duty_count = duty_period;
$0DC4	$C020	F01E			MOVFF	_duty_period, _duty_count
;duty.c,58 :: 			}
$0DC8	$	L_dutyInterruptProc_2:
;duty.c,59 :: 			}
$0DC8	$0012	    			RETURN
$0DCA	$	_readTemp:
;extruder.c,332 :: 			void readTemp(){
;extruder.c,336 :: 			unsigned short res_h = 0;
$0DCA	$0101	    			MOVLB	1
$0DCC	$6B70	    			CLRF	readTemp_res_h_L0, 1
;extruder.c,337 :: 			unsigned short res_l = 0;
$0DCE	$6B71	    			CLRF	readTemp_res_l_L0, 1
;extruder.c,339 :: 			SPI_PIN = 0;
$0DD0	$9083	    			BCF	PORTD, 0, 0
;extruder.c,343 :: 			SSPBUF = 0xFF;
$0DD2	$0EFF	    			MOVLW	255
$0DD4	$6EC9	    			MOVWF	SSPBUF, 0
;extruder.c,344 :: 			while ( SSPSTAT.BF == 0u );
$0DD6	$	L_readTemp_12:
$0DD6	$0101	    			MOVLB	1
$0DD8	$0E01	    			MOVLW	1
$0DDA	$14C7	    			ANDWF	SSPSTAT, 0, 0
$0DDC	$6E01	    			MOVWF	STACK_1, 0
$0DDE	$5001	    			MOVF	STACK_1, 0, 0
$0DE0	$0A00	    			XORLW	0
$0DE2	$E0F9	    			BZ	L_readTemp_12
$0DE4	$	L_readTemp_13:
;extruder.c,345 :: 			res_h = SSPBUF;
$0DE4	$CFC9	F170			MOVFF	SSPBUF, readTemp_res_h_L0
;extruder.c,350 :: 			SSPBUF = 0xFF;
$0DE8	$0EFF	    			MOVLW	255
$0DEA	$6EC9	    			MOVWF	SSPBUF, 0
;extruder.c,351 :: 			while ( SSPSTAT.BF == 0u);
$0DEC	$	L_readTemp_14:
$0DEC	$0101	    			MOVLB	1
$0DEE	$0E01	    			MOVLW	1
$0DF0	$14C7	    			ANDWF	SSPSTAT, 0, 0
$0DF2	$6E01	    			MOVWF	STACK_1, 0
$0DF4	$5001	    			MOVF	STACK_1, 0, 0
$0DF6	$0A00	    			XORLW	0
$0DF8	$E0F9	    			BZ	L_readTemp_14
$0DFA	$	L_readTemp_15:
;extruder.c,352 :: 			res_l = SSPBUF;
$0DFA	$CFC9	F171			MOVFF	SSPBUF, readTemp_res_l_L0
;extruder.c,356 :: 			SPI_PIN = 1;
$0DFE	$8083	    			BSF	PORTD, 0, 0
;extruder.c,359 :: 			if ( res_l & 0x04 ){
$0E00	$A571	    			BTFSS	readTemp_res_l_L0, 2, 1
$0E02	$D00A	    			BRA	L_readTemp_16
;extruder.c,361 :: 			pid_heater.feedback = 2000;
$0E04	$0ED0	    			MOVLW	208
$0E06	$0100	    			MOVLB	0
$0E08	$6F65	    			MOVWF	_pid_heater+4, 1
$0E0A	$0E07	    			MOVLW	7
$0E0C	$6F66	    			MOVWF	_pid_heater+5, 1
$0E0E	$0E00	    			MOVLW	0
$0E10	$6F67	    			MOVWF	_pid_heater+6, 1
$0E12	$6F68	    			MOVWF	_pid_heater+7, 1
;extruder.c,362 :: 			pid_heater.enable = 0;
$0E14	$6BA9	    			CLRF	_pid_heater+72, 1
;extruder.c,363 :: 			}
$0E16	$D031	    			BRA	L_readTemp_17
$0E18	$	L_readTemp_16:
;extruder.c,372 :: 			if ( heaterGlobalEnable == 1  ){
$0E18	$0100	    			MOVLB	0
$0E1A	$5021	    			MOVF	_heaterGlobalEnable, 0, 0
$0E1C	$0A01	    			XORLW	1
$0E1E	$E102	    			BNZ	L_readTemp_18
;extruder.c,373 :: 			pid_heater.enable.F0 = 1;
$0E20	$81A9	    			BSF	_pid_heater+72, 0, 1
;extruder.c,374 :: 			}
$0E22	$D002	    			BRA	L_readTemp_19
$0E24	$	L_readTemp_18:
;extruder.c,376 :: 			pid_heater.enable.F0 = 0;
$0E24	$0100	    			MOVLB	0
$0E26	$91A9	    			BCF	_pid_heater+72, 0, 1
;extruder.c,377 :: 			}
$0E28	$	L_readTemp_19:
;extruder.c,379 :: 			res_temp =  ( res_h << 5 )+ (   res_l >> 3 );
$0E28	$0E05	    			MOVLW	5
$0E2A	$6E00	    			MOVWF	STACK_0, 0
$0E2C	$C170	F065			MOVFF	readTemp_res_h_L0, _pid_heater+4
$0E30	$0E00	    			MOVLW	0
$0E32	$6F66	    			MOVWF	_pid_heater+5, 1
$0E34	$5000	    			MOVF	STACK_0, 0, 0
$0E36	$	L_readTemp_109:
$0E36	$E005	    			BZ	L_readTemp_110
$0E38	$3765	    			RLCF	_pid_heater+4, 1, 1
$0E3A	$9165	    			BCF	_pid_heater+4, 0, 1
$0E3C	$3766	    			RLCF	_pid_heater+5, 1, 1
$0E3E	$0FFF	    			ADDLW	255
$0E40	$D7FA	    			BRA	L_readTemp_109
$0E42	$	L_readTemp_110:
$0E42	$0100	    			MOVLB	0
$0E44	$C171	F000			MOVFF	readTemp_res_l_L0, STACK_0
$0E48	$3200	    			RRCF	STACK_0, 1, 0
$0E4A	$9E00	    			BCF	STACK_0, 7, 0
$0E4C	$3200	    			RRCF	STACK_0, 1, 0
$0E4E	$9E00	    			BCF	STACK_0, 7, 0
$0E50	$3200	    			RRCF	STACK_0, 1, 0
$0E52	$9E00	    			BCF	STACK_0, 7, 0
$0E54	$0E00	    			MOVLW	0
$0E56	$6F67	    			MOVWF	_pid_heater+6, 1
$0E58	$6F68	    			MOVWF	_pid_heater+7, 1
$0E5A	$5000	    			MOVF	STACK_0, 0, 0
$0E5C	$2765	    			ADDWF	_pid_heater+4, 1, 1
$0E5E	$B0D8	    			BTFSC	STATUS, C, 0
$0E60	$2B66	    			INCF	_pid_heater+5, 1, 1
;extruder.c,381 :: 			pid_heater.feedback = (res_temp >> 2);
$0E62	$0E00	    			MOVLW	0
$0E64	$6F67	    			MOVWF	_pid_heater+6, 1
$0E66	$6F68	    			MOVWF	_pid_heater+7, 1
$0E68	$3366	    			RRCF	_pid_heater+5, 1, 1
$0E6A	$3365	    			RRCF	_pid_heater+4, 1, 1
$0E6C	$9F66	    			BCF	_pid_heater+5, 7, 1
$0E6E	$3366	    			RRCF	_pid_heater+5, 1, 1
$0E70	$3365	    			RRCF	_pid_heater+4, 1, 1
$0E72	$9F66	    			BCF	_pid_heater+5, 7, 1
$0E74	$0E00	    			MOVLW	0
$0E76	$6F67	    			MOVWF	_pid_heater+6, 1
$0E78	$6F68	    			MOVWF	_pid_heater+7, 1
;extruder.c,383 :: 			}
$0E7A	$	L_readTemp_17:
;extruder.c,385 :: 			}
$0E7A	$0012	    			RETURN
$0E7C	$	_calc_pid:
;pid.c,77 :: 			void calc_pid( struct PIDStruct *ps )
;pid.c,103 :: 			enable = ps->enable;
$0E7C	$0E48	    			MOVLW	72
$0E7E	$0101	    			MOVLB	1
$0E80	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0E82	$6EE9	    			MOVWF	FSR0L, 0
$0E84	$0E00	    			MOVLW	0
$0E86	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0E88	$6EEA	    			MOVWF	FSR0L+1, 0
$0E8A	$CFEE	F196			MOVFF	POSTINC0, calc_pid_enable_L0
;pid.c,104 :: 			maxerror = ps->maxerror;
$0E8E	$0E0E	    			MOVLW	14
$0E90	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0E92	$6EE9	    			MOVWF	FSR0L, 0
$0E94	$0E00	    			MOVLW	0
$0E96	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0E98	$6EEA	    			MOVWF	FSR0L+1, 0
$0E9A	$CFEE	F17A			MOVFF	POSTINC0, calc_pid_maxerror_L0
$0E9E	$CFEE	F17B			MOVFF	POSTINC0, calc_pid_maxerror_L0+1
$0EA2	$CFEE	F17C			MOVFF	POSTINC0, calc_pid_maxerror_L0+2
$0EA6	$CFEE	F17D			MOVFF	POSTINC0, calc_pid_maxerror_L0+3
;pid.c,105 :: 			deadband = ps->deadband;
$0EAA	$0E0C	    			MOVLW	12
$0EAC	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0EAE	$6EE9	    			MOVWF	FSR0L, 0
$0EB0	$0E00	    			MOVLW	0
$0EB2	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0EB4	$6EEA	    			MOVWF	FSR0L+1, 0
$0EB6	$CFEE	F197			MOVFF	POSTINC0, calc_pid_deadband_L0
$0EBA	$CFEE	F198			MOVFF	POSTINC0, calc_pid_deadband_L0+1
;pid.c,106 :: 			maxerror_i = ps->maxerror_i;
$0EBE	$0E12	    			MOVLW	18
$0EC0	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0EC2	$6EE9	    			MOVWF	FSR0L, 0
$0EC4	$0E00	    			MOVLW	0
$0EC6	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0EC8	$6EEA	    			MOVWF	FSR0L+1, 0
$0ECA	$CFEE	F17E			MOVFF	POSTINC0, calc_pid_maxerror_i_L0
$0ECE	$CFEE	F17F			MOVFF	POSTINC0, calc_pid_maxerror_i_L0+1
$0ED2	$0E00	    			MOVLW	0
$0ED4	$BF7F	    			BTFSC	calc_pid_maxerror_i_L0+1, 7, 1
$0ED6	$0EFF	    			MOVLW	255
$0ED8	$6F80	    			MOVWF	calc_pid_maxerror_i_L0+2, 1
$0EDA	$6F81	    			MOVWF	calc_pid_maxerror_i_L0+3, 1
$0EDC	$0E00	    			MOVLW	0
$0EDE	$BF7F	    			BTFSC	calc_pid_maxerror_i_L0+1, 7, 1
$0EE0	$0EFF	    			MOVLW	255
$0EE2	$6F80	    			MOVWF	calc_pid_maxerror_i_L0+2, 1
$0EE4	$6F81	    			MOVWF	calc_pid_maxerror_i_L0+3, 1
;pid.c,107 :: 			maxerror_d = ps->maxerror_d;
$0EE6	$0E14	    			MOVLW	20
$0EE8	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0EEA	$6EE9	    			MOVWF	FSR0L, 0
$0EEC	$0E00	    			MOVLW	0
$0EEE	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0EF0	$6EEA	    			MOVWF	FSR0L+1, 0
$0EF2	$CFEE	F182			MOVFF	POSTINC0, calc_pid_maxerror_d_L0
$0EF6	$CFEE	F183			MOVFF	POSTINC0, calc_pid_maxerror_d_L0+1
$0EFA	$CFEE	F184			MOVFF	POSTINC0, calc_pid_maxerror_d_L0+2
$0EFE	$CFEE	F185			MOVFF	POSTINC0, calc_pid_maxerror_d_L0+3
;pid.c,108 :: 			maxoutput = ps->maxoutput;
$0F02	$0E44	    			MOVLW	68
$0F04	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0F06	$6EE9	    			MOVWF	FSR0L, 0
$0F08	$0E00	    			MOVLW	0
$0F0A	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0F0C	$6EEA	    			MOVWF	FSR0L+1, 0
$0F0E	$CFEE	F199			MOVFF	POSTINC0, calc_pid_maxoutput_L0
$0F12	$CFEE	F19A			MOVFF	POSTINC0, calc_pid_maxoutput_L0+1
;pid.c,109 :: 			maxcmd_d = ps->maxcmd_d;
$0F16	$0E18	    			MOVLW	24
$0F18	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0F1A	$6EE9	    			MOVWF	FSR0L, 0
$0F1C	$0E00	    			MOVLW	0
$0F1E	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0F20	$6EEA	    			MOVWF	FSR0L+1, 0
$0F22	$CFEE	F18E			MOVFF	POSTINC0, calc_pid_maxcmd_d_L0
$0F26	$CFEE	F18F			MOVFF	POSTINC0, calc_pid_maxcmd_d_L0+1
$0F2A	$CFEE	F190			MOVFF	POSTINC0, calc_pid_maxcmd_d_L0+2
$0F2E	$CFEE	F191			MOVFF	POSTINC0, calc_pid_maxcmd_d_L0+3
;pid.c,112 :: 			tmp1 = (ps->command - ps->feedback);
$0F32	$C170	FFE9			MOVFF	FARG_calc_pid+0, FSR0L
$0F36	$C171	FFEA			MOVFF	FARG_calc_pid+1, FSR0H
$0F3A	$CFEE	F008			MOVFF	POSTINC0, STACK_8
$0F3E	$CFEE	F009			MOVFF	POSTINC0, STACK_8+1
$0F42	$CFEE	F00A			MOVFF	POSTINC0, STACK_8+2
$0F46	$CFEE	F00B			MOVFF	POSTINC0, STACK_8+3
$0F4A	$0E04	    			MOVLW	4
$0F4C	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0F4E	$6EE9	    			MOVWF	FSR0L, 0
$0F50	$0E00	    			MOVLW	0
$0F52	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0F54	$6EEA	    			MOVWF	FSR0L+1, 0
$0F56	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$0F5A	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$0F5E	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$0F62	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$0F66	$C008	F000			MOVFF	STACK_8, STACK_0
$0F6A	$C009	F001			MOVFF	STACK_8+1, STACK_0+1
$0F6E	$C00A	F002			MOVFF	STACK_8+2, STACK_0+2
$0F72	$C00B	F003			MOVFF	STACK_8+3, STACK_0+3
$0F76	$5004	    			MOVF	STACK_4, 0, 0
$0F78	$5E00	    			SUBWF	STACK_0, 1, 0
$0F7A	$5005	    			MOVF	STACK_4+1, 0, 0
$0F7C	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$0F7E	$5006	    			MOVF	STACK_4+2, 0, 0
$0F80	$5A02	    			SUBWFB	STACK_0+2, 1, 0
$0F82	$5007	    			MOVF	STACK_4+3, 0, 0
$0F84	$5A03	    			SUBWFB	STACK_0+3, 1, 0
$0F86	$C000	F172			MOVFF	STACK_0, calc_pid_tmp1_L0
$0F8A	$C001	F173			MOVFF	STACK_0+1, calc_pid_tmp1_L0+1
$0F8E	$C002	F174			MOVFF	STACK_0+2, calc_pid_tmp1_L0+2
$0F92	$C003	F175			MOVFF	STACK_0+3, calc_pid_tmp1_L0+3
;pid.c,113 :: 			ps->error = tmp1;
$0F96	$0E08	    			MOVLW	8
$0F98	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$0F9A	$6EE1	    			MOVWF	FSR1L, 0
$0F9C	$0E00	    			MOVLW	0
$0F9E	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$0FA0	$6EE2	    			MOVWF	FSR1L+1, 0
$0FA2	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0FA6	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$0FAA	$C002	FFE6			MOVFF	STACK_0+2, POSTINC1
$0FAE	$C003	FFE6			MOVFF	STACK_0+3, POSTINC1
;pid.c,116 :: 			if (maxerror != 0){
$0FB2	$0E00	    			MOVLW	0
$0FB4	$6E00	    			MOVWF	STACK_0, 0
$0FB6	$197D	    			XORWF	calc_pid_maxerror_L0+3, 0, 1
$0FB8	$E108	    			BNZ	L_calc_pid_29
$0FBA	$5000	    			MOVF	STACK_0, 0, 0
$0FBC	$197C	    			XORWF	calc_pid_maxerror_L0+2, 0, 1
$0FBE	$E105	    			BNZ	L_calc_pid_29
$0FC0	$5000	    			MOVF	STACK_0, 0, 0
$0FC2	$197B	    			XORWF	calc_pid_maxerror_L0+1, 0, 1
$0FC4	$E102	    			BNZ	L_calc_pid_29
$0FC6	$517A	    			MOVF	calc_pid_maxerror_L0, 0, 1
$0FC8	$0A00	    			XORLW	0
$0FCA	$	L_calc_pid_29:
$0FCA	$E050	    			BZ	L_calc_pid_0
;pid.c,117 :: 			if (tmp1 > maxerror){
$0FCC	$0E80	    			MOVLW	128
$0FCE	$197D	    			XORWF	calc_pid_maxerror_L0+3, 0, 1
$0FD0	$6E00	    			MOVWF	STACK_0, 0
$0FD2	$0E80	    			MOVLW	128
$0FD4	$1975	    			XORWF	calc_pid_tmp1_L0+3, 0, 1
$0FD6	$5C00	    			SUBWF	STACK_0, 0, 0
$0FD8	$E108	    			BNZ	L_calc_pid_30
$0FDA	$5174	    			MOVF	calc_pid_tmp1_L0+2, 0, 1
$0FDC	$5D7C	    			SUBWF	calc_pid_maxerror_L0+2, 0, 1
$0FDE	$E105	    			BNZ	L_calc_pid_30
$0FE0	$5173	    			MOVF	calc_pid_tmp1_L0+1, 0, 1
$0FE2	$5D7B	    			SUBWF	calc_pid_maxerror_L0+1, 0, 1
$0FE4	$E102	    			BNZ	L_calc_pid_30
$0FE6	$5172	    			MOVF	calc_pid_tmp1_L0, 0, 1
$0FE8	$5D7A	    			SUBWF	calc_pid_maxerror_L0, 0, 1
$0FEA	$	L_calc_pid_30:
$0FEA	$E210	    			BC	L_calc_pid_1
;pid.c,118 :: 			tmp1 = maxerror;
$0FEC	$C17A	F172			MOVFF	calc_pid_maxerror_L0, calc_pid_tmp1_L0
$0FF0	$C17B	F173			MOVFF	calc_pid_maxerror_L0+1, calc_pid_tmp1_L0+1
$0FF4	$C17C	F174			MOVFF	calc_pid_maxerror_L0+2, calc_pid_tmp1_L0+2
$0FF8	$C17D	F175			MOVFF	calc_pid_maxerror_L0+3, calc_pid_tmp1_L0+3
;pid.c,120 :: 			ps->enable = 0u;
$0FFC	$0E48	    			MOVLW	72
$0FFE	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1000	$6EE1	    			MOVWF	FSR1L, 0
$1002	$0E00	    			MOVLW	0
$1004	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1006	$6EE2	    			MOVWF	FSR1L+1, 0
$1008	$6AE6	    			CLRF	POSTINC1, 0
;pid.c,121 :: 			}
$100A	$D030	    			BRA	L_calc_pid_2
$100C	$	L_calc_pid_1:
;pid.c,122 :: 			else if (tmp1 < -maxerror){
$100C	$0101	    			MOVLB	1
$100E	$6A04	    			CLRF	STACK_4, 0
$1010	$6A05	    			CLRF	STACK_4+1, 0
$1012	$6A06	    			CLRF	STACK_4+2, 0
$1014	$6A07	    			CLRF	STACK_4+3, 0
$1016	$517A	    			MOVF	calc_pid_maxerror_L0, 0, 1
$1018	$5E04	    			SUBWF	STACK_4, 1, 0
$101A	$517B	    			MOVF	calc_pid_maxerror_L0+1, 0, 1
$101C	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$101E	$517C	    			MOVF	calc_pid_maxerror_L0+2, 0, 1
$1020	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$1022	$517D	    			MOVF	calc_pid_maxerror_L0+3, 0, 1
$1024	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$1026	$0E80	    			MOVLW	128
$1028	$1975	    			XORWF	calc_pid_tmp1_L0+3, 0, 1
$102A	$6E00	    			MOVWF	STACK_0, 0
$102C	$0E80	    			MOVLW	128
$102E	$1807	    			XORWF	STACK_4+3, 0, 0
$1030	$5C00	    			SUBWF	STACK_0, 0, 0
$1032	$E108	    			BNZ	L_calc_pid_31
$1034	$5006	    			MOVF	STACK_4+2, 0, 0
$1036	$5D74	    			SUBWF	calc_pid_tmp1_L0+2, 0, 1
$1038	$E105	    			BNZ	L_calc_pid_31
$103A	$5005	    			MOVF	STACK_4+1, 0, 0
$103C	$5D73	    			SUBWF	calc_pid_tmp1_L0+1, 0, 1
$103E	$E102	    			BNZ	L_calc_pid_31
$1040	$5004	    			MOVF	STACK_4, 0, 0
$1042	$5D72	    			SUBWF	calc_pid_tmp1_L0, 0, 1
$1044	$	L_calc_pid_31:
$1044	$E213	    			BC	L_calc_pid_3
;pid.c,123 :: 			tmp1 = -maxerror;
$1046	$6B72	    			CLRF	calc_pid_tmp1_L0, 1
$1048	$6B73	    			CLRF	calc_pid_tmp1_L0+1, 1
$104A	$6B74	    			CLRF	calc_pid_tmp1_L0+2, 1
$104C	$6B75	    			CLRF	calc_pid_tmp1_L0+3, 1
$104E	$517A	    			MOVF	calc_pid_maxerror_L0, 0, 1
$1050	$5F72	    			SUBWF	calc_pid_tmp1_L0, 1, 1
$1052	$517B	    			MOVF	calc_pid_maxerror_L0+1, 0, 1
$1054	$5B73	    			SUBWFB	calc_pid_tmp1_L0+1, 1, 1
$1056	$517C	    			MOVF	calc_pid_maxerror_L0+2, 0, 1
$1058	$5B74	    			SUBWFB	calc_pid_tmp1_L0+2, 1, 1
$105A	$517D	    			MOVF	calc_pid_maxerror_L0+3, 0, 1
$105C	$5B75	    			SUBWFB	calc_pid_tmp1_L0+3, 1, 1
;pid.c,124 :: 			ps->enable = 0u;
$105E	$0E48	    			MOVLW	72
$1060	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1062	$6EE1	    			MOVWF	FSR1L, 0
$1064	$0E00	    			MOVLW	0
$1066	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1068	$6EE2	    			MOVWF	FSR1L+1, 0
$106A	$6AE6	    			CLRF	POSTINC1, 0
;pid.c,125 :: 			}
$106C	$	L_calc_pid_3:
$106C	$	L_calc_pid_2:
;pid.c,126 :: 			}
$106C	$	L_calc_pid_0:
;pid.c,129 :: 			if (tmp1 > deadband) {
$106C	$0101	    			MOVLB	1
$106E	$0101	    			MOVLB	1
$1070	$0E80	    			MOVLW	128
$1072	$BF98	    			BTFSC	calc_pid_deadband_L0+1, 7, 1
$1074	$0E7F	    			MOVLW	127
$1076	$6E00	    			MOVWF	STACK_0, 0
$1078	$0E80	    			MOVLW	128
$107A	$1975	    			XORWF	calc_pid_tmp1_L0+3, 0, 1
$107C	$5C00	    			SUBWF	STACK_0, 0, 0
$107E	$E10C	    			BNZ	L_calc_pid_32
$1080	$0E00	    			MOVLW	0
$1082	$BF98	    			BTFSC	calc_pid_deadband_L0+1, 7, 1
$1084	$0EFF	    			MOVLW	255
$1086	$6E00	    			MOVWF	STACK_0, 0
$1088	$5174	    			MOVF	calc_pid_tmp1_L0+2, 0, 1
$108A	$5C00	    			SUBWF	STACK_0, 0, 0
$108C	$E105	    			BNZ	L_calc_pid_32
$108E	$5173	    			MOVF	calc_pid_tmp1_L0+1, 0, 1
$1090	$5D98	    			SUBWF	calc_pid_deadband_L0+1, 0, 1
$1092	$E102	    			BNZ	L_calc_pid_32
$1094	$5172	    			MOVF	calc_pid_tmp1_L0, 0, 1
$1096	$5D97	    			SUBWF	calc_pid_deadband_L0, 0, 1
$1098	$	L_calc_pid_32:
$1098	$E212	    			BC	L_calc_pid_4
;pid.c,130 :: 			tmp1 -= deadband;
$109A	$C197	F000			MOVFF	calc_pid_deadband_L0, STACK_0
$109E	$C198	F001			MOVFF	calc_pid_deadband_L0+1, STACK_0+1
$10A2	$0E00	    			MOVLW	0
$10A4	$BF98	    			BTFSC	calc_pid_deadband_L0+1, 7, 1
$10A6	$0EFF	    			MOVLW	255
$10A8	$6E02	    			MOVWF	STACK_0+2, 0
$10AA	$6E03	    			MOVWF	STACK_0+3, 0
$10AC	$5000	    			MOVF	STACK_0, 0, 0
$10AE	$5F72	    			SUBWF	calc_pid_tmp1_L0, 1, 1
$10B0	$5001	    			MOVF	STACK_0+1, 0, 0
$10B2	$5B73	    			SUBWFB	calc_pid_tmp1_L0+1, 1, 1
$10B4	$5002	    			MOVF	STACK_0+2, 0, 0
$10B6	$5B74	    			SUBWFB	calc_pid_tmp1_L0+2, 1, 1
$10B8	$5003	    			MOVF	STACK_0+3, 0, 0
$10BA	$5B75	    			SUBWFB	calc_pid_tmp1_L0+3, 1, 1
;pid.c,131 :: 			}
$10BC	$D034	    			BRA	L_calc_pid_5
$10BE	$	L_calc_pid_4:
;pid.c,132 :: 			else if (tmp1 < -deadband){
$10BE	$0101	    			MOVLB	1
$10C0	$5197	    			MOVF	calc_pid_deadband_L0, 0, 1
$10C2	$0800	    			SUBLW	0
$10C4	$6E04	    			MOVWF	STACK_4, 0
$10C6	$C198	F005			MOVFF	calc_pid_deadband_L0+1, STACK_4+1
$10CA	$6AE8	    			CLRF	WREG, 0
$10CC	$5605	    			SUBFWB	STACK_4+1, 1, 0
$10CE	$0E80	    			MOVLW	128
$10D0	$1975	    			XORWF	calc_pid_tmp1_L0+3, 0, 1
$10D2	$6E00	    			MOVWF	STACK_0, 0
$10D4	$0E80	    			MOVLW	128
$10D6	$BE05	    			BTFSC	STACK_4+1, 7, 0
$10D8	$0E7F	    			MOVLW	127
$10DA	$5C00	    			SUBWF	STACK_0, 0, 0
$10DC	$E10C	    			BNZ	L_calc_pid_33
$10DE	$0E00	    			MOVLW	0
$10E0	$BE05	    			BTFSC	STACK_4+1, 7, 0
$10E2	$0EFF	    			MOVLW	255
$10E4	$5D74	    			SUBWF	calc_pid_tmp1_L0+2, 0, 1
$10E6	$E107	    			BNZ	L_calc_pid_33
$10E8	$0E00	    			MOVLW	0
$10EA	$BE05	    			BTFSC	STACK_4+1, 7, 0
$10EC	$0EFF	    			MOVLW	255
$10EE	$5D73	    			SUBWF	calc_pid_tmp1_L0+1, 0, 1
$10F0	$E102	    			BNZ	L_calc_pid_33
$10F2	$5004	    			MOVF	STACK_4, 0, 0
$10F4	$5D72	    			SUBWF	calc_pid_tmp1_L0, 0, 1
$10F6	$	L_calc_pid_33:
$10F6	$E20A	    			BC	L_calc_pid_6
;pid.c,133 :: 			tmp1 += deadband;
$10F8	$5197	    			MOVF	calc_pid_deadband_L0, 0, 1
$10FA	$2772	    			ADDWF	calc_pid_tmp1_L0, 1, 1
$10FC	$5198	    			MOVF	calc_pid_deadband_L0+1, 0, 1
$10FE	$2373	    			ADDWFC	calc_pid_tmp1_L0+1, 1, 1
$1100	$0E00	    			MOVLW	0
$1102	$BF98	    			BTFSC	calc_pid_deadband_L0+1, 7, 1
$1104	$0EFF	    			MOVLW	255
$1106	$2374	    			ADDWFC	calc_pid_tmp1_L0+2, 1, 1
$1108	$2375	    			ADDWFC	calc_pid_tmp1_L0+3, 1, 1
;pid.c,134 :: 			}
$110A	$D00D	    			BRA	L_calc_pid_7
$110C	$	L_calc_pid_6:
;pid.c,136 :: 			tmp1 = 0;
$110C	$0101	    			MOVLB	1
$110E	$6B72	    			CLRF	calc_pid_tmp1_L0, 1
$1110	$6B73	    			CLRF	calc_pid_tmp1_L0+1, 1
$1112	$6B74	    			CLRF	calc_pid_tmp1_L0+2, 1
$1114	$6B75	    			CLRF	calc_pid_tmp1_L0+3, 1
;pid.c,138 :: 			ps->error_i = 0;
$1116	$0E1C	    			MOVLW	28
$1118	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$111A	$6EE1	    			MOVWF	FSR1L, 0
$111C	$0E00	    			MOVLW	0
$111E	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1120	$6EE2	    			MOVWF	FSR1L+1, 0
$1122	$6AE6	    			CLRF	POSTINC1, 0
$1124	$6AE6	    			CLRF	POSTINC1, 0
;pid.c,139 :: 			}
$1126	$	L_calc_pid_7:
$1126	$	L_calc_pid_5:
;pid.c,142 :: 			error_i = ps->error_i;
$1126	$0E1C	    			MOVLW	28
$1128	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$112A	$6EE9	    			MOVWF	FSR0L, 0
$112C	$0E00	    			MOVLW	0
$112E	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1130	$6EEA	    			MOVWF	FSR0L+1, 0
$1132	$CFEE	F186			MOVFF	POSTINC0, calc_pid_error_i_L0
$1136	$CFEE	F187			MOVFF	POSTINC0, calc_pid_error_i_L0+1
$113A	$0E00	    			MOVLW	0
$113C	$BF87	    			BTFSC	calc_pid_error_i_L0+1, 7, 1
$113E	$0EFF	    			MOVLW	255
$1140	$6F88	    			MOVWF	calc_pid_error_i_L0+2, 1
$1142	$6F89	    			MOVWF	calc_pid_error_i_L0+3, 1
$1144	$0E00	    			MOVLW	0
$1146	$BF87	    			BTFSC	calc_pid_error_i_L0+1, 7, 1
$1148	$0EFF	    			MOVLW	255
$114A	$6F88	    			MOVWF	calc_pid_error_i_L0+2, 1
$114C	$6F89	    			MOVWF	calc_pid_error_i_L0+3, 1
;pid.c,143 :: 			if (enable != 0u) {
$114E	$5196	    			MOVF	calc_pid_enable_L0, 0, 1
$1150	$0A00	    			XORLW	0
$1152	$B4D8	    			BTFSC	STATUS, Z, 0
$1154	$D066	    			BRA	L_calc_pid_8
;pid.c,145 :: 			if ( ps->limit_state == 0u ){
$1156	$0E49	    			MOVLW	73
$1158	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$115A	$6EE9	    			MOVWF	FSR0L, 0
$115C	$0E00	    			MOVLW	0
$115E	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1160	$6EEA	    			MOVWF	FSR0L+1, 0
$1162	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$1166	$5004	    			MOVF	STACK_4, 0, 0
$1168	$0A00	    			XORLW	0
$116A	$E108	    			BNZ	L_calc_pid_9
;pid.c,147 :: 			error_i += tmp1;
$116C	$5172	    			MOVF	calc_pid_tmp1_L0, 0, 1
$116E	$2786	    			ADDWF	calc_pid_error_i_L0, 1, 1
$1170	$5173	    			MOVF	calc_pid_tmp1_L0+1, 0, 1
$1172	$2387	    			ADDWFC	calc_pid_error_i_L0+1, 1, 1
$1174	$5174	    			MOVF	calc_pid_tmp1_L0+2, 0, 1
$1176	$2388	    			ADDWFC	calc_pid_error_i_L0+2, 1, 1
$1178	$5175	    			MOVF	calc_pid_tmp1_L0+3, 0, 1
$117A	$2389	    			ADDWFC	calc_pid_error_i_L0+3, 1, 1
;pid.c,148 :: 			}
$117C	$	L_calc_pid_9:
;pid.c,151 :: 			if (maxerror_i != 0u)	{
$117C	$0E00	    			MOVLW	0
$117E	$6E00	    			MOVWF	STACK_0, 0
$1180	$1981	    			XORWF	calc_pid_maxerror_i_L0+3, 0, 1
$1182	$E108	    			BNZ	L_calc_pid_34
$1184	$5000	    			MOVF	STACK_0, 0, 0
$1186	$1980	    			XORWF	calc_pid_maxerror_i_L0+2, 0, 1
$1188	$E105	    			BNZ	L_calc_pid_34
$118A	$5000	    			MOVF	STACK_0, 0, 0
$118C	$197F	    			XORWF	calc_pid_maxerror_i_L0+1, 0, 1
$118E	$E102	    			BNZ	L_calc_pid_34
$1190	$517E	    			MOVF	calc_pid_maxerror_i_L0, 0, 1
$1192	$0A00	    			XORLW	0
$1194	$	L_calc_pid_34:
$1194	$E042	    			BZ	L_calc_pid_10
;pid.c,152 :: 			if (error_i > maxerror_i){
$1196	$0E80	    			MOVLW	128
$1198	$1981	    			XORWF	calc_pid_maxerror_i_L0+3, 0, 1
$119A	$6E00	    			MOVWF	STACK_0, 0
$119C	$0E80	    			MOVLW	128
$119E	$1989	    			XORWF	calc_pid_error_i_L0+3, 0, 1
$11A0	$5C00	    			SUBWF	STACK_0, 0, 0
$11A2	$E108	    			BNZ	L_calc_pid_35
$11A4	$5188	    			MOVF	calc_pid_error_i_L0+2, 0, 1
$11A6	$5D80	    			SUBWF	calc_pid_maxerror_i_L0+2, 0, 1
$11A8	$E105	    			BNZ	L_calc_pid_35
$11AA	$5187	    			MOVF	calc_pid_error_i_L0+1, 0, 1
$11AC	$5D7F	    			SUBWF	calc_pid_maxerror_i_L0+1, 0, 1
$11AE	$E102	    			BNZ	L_calc_pid_35
$11B0	$5186	    			MOVF	calc_pid_error_i_L0, 0, 1
$11B2	$5D7E	    			SUBWF	calc_pid_maxerror_i_L0, 0, 1
$11B4	$	L_calc_pid_35:
$11B4	$E209	    			BC	L_calc_pid_11
;pid.c,153 :: 			error_i = maxerror_i;
$11B6	$C17E	F186			MOVFF	calc_pid_maxerror_i_L0, calc_pid_error_i_L0
$11BA	$C17F	F187			MOVFF	calc_pid_maxerror_i_L0+1, calc_pid_error_i_L0+1
$11BE	$C180	F188			MOVFF	calc_pid_maxerror_i_L0+2, calc_pid_error_i_L0+2
$11C2	$C181	F189			MOVFF	calc_pid_maxerror_i_L0+3, calc_pid_error_i_L0+3
;pid.c,154 :: 			}
$11C6	$D029	    			BRA	L_calc_pid_12
$11C8	$	L_calc_pid_11:
;pid.c,155 :: 			else if (error_i < (-maxerror_i)){
$11C8	$0101	    			MOVLB	1
$11CA	$6A04	    			CLRF	STACK_4, 0
$11CC	$6A05	    			CLRF	STACK_4+1, 0
$11CE	$6A06	    			CLRF	STACK_4+2, 0
$11D0	$6A07	    			CLRF	STACK_4+3, 0
$11D2	$517E	    			MOVF	calc_pid_maxerror_i_L0, 0, 1
$11D4	$5E04	    			SUBWF	STACK_4, 1, 0
$11D6	$517F	    			MOVF	calc_pid_maxerror_i_L0+1, 0, 1
$11D8	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$11DA	$5180	    			MOVF	calc_pid_maxerror_i_L0+2, 0, 1
$11DC	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$11DE	$5181	    			MOVF	calc_pid_maxerror_i_L0+3, 0, 1
$11E0	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$11E2	$0E80	    			MOVLW	128
$11E4	$1989	    			XORWF	calc_pid_error_i_L0+3, 0, 1
$11E6	$6E00	    			MOVWF	STACK_0, 0
$11E8	$0E80	    			MOVLW	128
$11EA	$1807	    			XORWF	STACK_4+3, 0, 0
$11EC	$5C00	    			SUBWF	STACK_0, 0, 0
$11EE	$E108	    			BNZ	L_calc_pid_36
$11F0	$5006	    			MOVF	STACK_4+2, 0, 0
$11F2	$5D88	    			SUBWF	calc_pid_error_i_L0+2, 0, 1
$11F4	$E105	    			BNZ	L_calc_pid_36
$11F6	$5005	    			MOVF	STACK_4+1, 0, 0
$11F8	$5D87	    			SUBWF	calc_pid_error_i_L0+1, 0, 1
$11FA	$E102	    			BNZ	L_calc_pid_36
$11FC	$5004	    			MOVF	STACK_4, 0, 0
$11FE	$5D86	    			SUBWF	calc_pid_error_i_L0, 0, 1
$1200	$	L_calc_pid_36:
$1200	$E20C	    			BC	L_calc_pid_13
;pid.c,156 :: 			error_i = -maxerror_i;
$1202	$6B86	    			CLRF	calc_pid_error_i_L0, 1
$1204	$6B87	    			CLRF	calc_pid_error_i_L0+1, 1
$1206	$6B88	    			CLRF	calc_pid_error_i_L0+2, 1
$1208	$6B89	    			CLRF	calc_pid_error_i_L0+3, 1
$120A	$517E	    			MOVF	calc_pid_maxerror_i_L0, 0, 1
$120C	$5F86	    			SUBWF	calc_pid_error_i_L0, 1, 1
$120E	$517F	    			MOVF	calc_pid_maxerror_i_L0+1, 0, 1
$1210	$5B87	    			SUBWFB	calc_pid_error_i_L0+1, 1, 1
$1212	$5180	    			MOVF	calc_pid_maxerror_i_L0+2, 0, 1
$1214	$5B88	    			SUBWFB	calc_pid_error_i_L0+2, 1, 1
$1216	$5181	    			MOVF	calc_pid_maxerror_i_L0+3, 0, 1
$1218	$5B89	    			SUBWFB	calc_pid_error_i_L0+3, 1, 1
;pid.c,157 :: 			}
$121A	$	L_calc_pid_13:
$121A	$	L_calc_pid_12:
;pid.c,158 :: 			}
$121A	$	L_calc_pid_10:
;pid.c,159 :: 			}
$121A	$0101	    			MOVLB	1
$121C	$0101	    			MOVLB	1
$121E	$0101	    			MOVLB	1
$1220	$D004	    			BRA	L_calc_pid_14
$1222	$	L_calc_pid_8:
;pid.c,162 :: 			error_i = 0;
$1222	$6B86	    			CLRF	calc_pid_error_i_L0, 1
$1224	$6B87	    			CLRF	calc_pid_error_i_L0+1, 1
$1226	$6B88	    			CLRF	calc_pid_error_i_L0+2, 1
$1228	$6B89	    			CLRF	calc_pid_error_i_L0+3, 1
;pid.c,163 :: 			}
$122A	$	L_calc_pid_14:
;pid.c,164 :: 			ps->error_i = error_i;
$122A	$0101	    			MOVLB	1
$122C	$0E1C	    			MOVLW	28
$122E	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1230	$6EE1	    			MOVWF	FSR1L, 0
$1232	$0E00	    			MOVLW	0
$1234	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1236	$6EE2	    			MOVWF	FSR1L+1, 0
$1238	$C186	FFE6			MOVFF	calc_pid_error_i_L0, POSTINC1
$123C	$C187	FFE6			MOVFF	calc_pid_error_i_L0+1, POSTINC1
;pid.c,167 :: 			error_d =  (tmp1 - ps->prev_error);
$1240	$0E1E	    			MOVLW	30
$1242	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1244	$6E04	    			MOVWF	STACK_4, 0
$1246	$0E00	    			MOVLW	0
$1248	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$124A	$6E05	    			MOVWF	STACK_4+1, 0
$124C	$C004	FFE9			MOVFF	STACK_4, FSR0L
$1250	$C005	FFEA			MOVFF	STACK_4+1, FSR0H
$1254	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1258	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$125C	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$1260	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$1264	$C172	F18A			MOVFF	calc_pid_tmp1_L0, calc_pid_error_d_L0
$1268	$C173	F18B			MOVFF	calc_pid_tmp1_L0+1, calc_pid_error_d_L0+1
$126C	$C174	F18C			MOVFF	calc_pid_tmp1_L0+2, calc_pid_error_d_L0+2
$1270	$C175	F18D			MOVFF	calc_pid_tmp1_L0+3, calc_pid_error_d_L0+3
$1274	$5000	    			MOVF	STACK_0, 0, 0
$1276	$5F8A	    			SUBWF	calc_pid_error_d_L0, 1, 1
$1278	$5001	    			MOVF	STACK_0+1, 0, 0
$127A	$5B8B	    			SUBWFB	calc_pid_error_d_L0+1, 1, 1
$127C	$5002	    			MOVF	STACK_0+2, 0, 0
$127E	$5B8C	    			SUBWFB	calc_pid_error_d_L0+2, 1, 1
$1280	$5003	    			MOVF	STACK_0+3, 0, 0
$1282	$5B8D	    			SUBWFB	calc_pid_error_d_L0+3, 1, 1
;pid.c,168 :: 			ps->prev_error = tmp1;
$1284	$C004	FFE1			MOVFF	STACK_4, FSR1L
$1288	$C005	FFE2			MOVFF	STACK_4+1, FSR1H
$128C	$C172	FFE6			MOVFF	calc_pid_tmp1_L0, POSTINC1
$1290	$C173	FFE6			MOVFF	calc_pid_tmp1_L0+1, POSTINC1
$1294	$C174	FFE6			MOVFF	calc_pid_tmp1_L0+2, POSTINC1
$1298	$C175	FFE6			MOVFF	calc_pid_tmp1_L0+3, POSTINC1
;pid.c,170 :: 			if (maxerror_d != 0u) {
$129C	$0E00	    			MOVLW	0
$129E	$6E00	    			MOVWF	STACK_0, 0
$12A0	$1985	    			XORWF	calc_pid_maxerror_d_L0+3, 0, 1
$12A2	$E108	    			BNZ	L_calc_pid_37
$12A4	$5000	    			MOVF	STACK_0, 0, 0
$12A6	$1984	    			XORWF	calc_pid_maxerror_d_L0+2, 0, 1
$12A8	$E105	    			BNZ	L_calc_pid_37
$12AA	$5000	    			MOVF	STACK_0, 0, 0
$12AC	$1983	    			XORWF	calc_pid_maxerror_d_L0+1, 0, 1
$12AE	$E102	    			BNZ	L_calc_pid_37
$12B0	$5182	    			MOVF	calc_pid_maxerror_d_L0, 0, 1
$12B2	$0A00	    			XORLW	0
$12B4	$	L_calc_pid_37:
$12B4	$E042	    			BZ	L_calc_pid_15
;pid.c,171 :: 			if (error_d > maxerror_d){
$12B6	$0E80	    			MOVLW	128
$12B8	$1985	    			XORWF	calc_pid_maxerror_d_L0+3, 0, 1
$12BA	$6E00	    			MOVWF	STACK_0, 0
$12BC	$0E80	    			MOVLW	128
$12BE	$198D	    			XORWF	calc_pid_error_d_L0+3, 0, 1
$12C0	$5C00	    			SUBWF	STACK_0, 0, 0
$12C2	$E108	    			BNZ	L_calc_pid_38
$12C4	$518C	    			MOVF	calc_pid_error_d_L0+2, 0, 1
$12C6	$5D84	    			SUBWF	calc_pid_maxerror_d_L0+2, 0, 1
$12C8	$E105	    			BNZ	L_calc_pid_38
$12CA	$518B	    			MOVF	calc_pid_error_d_L0+1, 0, 1
$12CC	$5D83	    			SUBWF	calc_pid_maxerror_d_L0+1, 0, 1
$12CE	$E102	    			BNZ	L_calc_pid_38
$12D0	$518A	    			MOVF	calc_pid_error_d_L0, 0, 1
$12D2	$5D82	    			SUBWF	calc_pid_maxerror_d_L0, 0, 1
$12D4	$	L_calc_pid_38:
$12D4	$E209	    			BC	L_calc_pid_16
;pid.c,172 :: 			error_d = maxerror_d;
$12D6	$C182	F18A			MOVFF	calc_pid_maxerror_d_L0, calc_pid_error_d_L0
$12DA	$C183	F18B			MOVFF	calc_pid_maxerror_d_L0+1, calc_pid_error_d_L0+1
$12DE	$C184	F18C			MOVFF	calc_pid_maxerror_d_L0+2, calc_pid_error_d_L0+2
$12E2	$C185	F18D			MOVFF	calc_pid_maxerror_d_L0+3, calc_pid_error_d_L0+3
;pid.c,173 :: 			}
$12E6	$D029	    			BRA	L_calc_pid_17
$12E8	$	L_calc_pid_16:
;pid.c,174 :: 			else if (error_d < -maxerror_d){
$12E8	$0101	    			MOVLB	1
$12EA	$6A04	    			CLRF	STACK_4, 0
$12EC	$6A05	    			CLRF	STACK_4+1, 0
$12EE	$6A06	    			CLRF	STACK_4+2, 0
$12F0	$6A07	    			CLRF	STACK_4+3, 0
$12F2	$5182	    			MOVF	calc_pid_maxerror_d_L0, 0, 1
$12F4	$5E04	    			SUBWF	STACK_4, 1, 0
$12F6	$5183	    			MOVF	calc_pid_maxerror_d_L0+1, 0, 1
$12F8	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$12FA	$5184	    			MOVF	calc_pid_maxerror_d_L0+2, 0, 1
$12FC	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$12FE	$5185	    			MOVF	calc_pid_maxerror_d_L0+3, 0, 1
$1300	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$1302	$0E80	    			MOVLW	128
$1304	$198D	    			XORWF	calc_pid_error_d_L0+3, 0, 1
$1306	$6E00	    			MOVWF	STACK_0, 0
$1308	$0E80	    			MOVLW	128
$130A	$1807	    			XORWF	STACK_4+3, 0, 0
$130C	$5C00	    			SUBWF	STACK_0, 0, 0
$130E	$E108	    			BNZ	L_calc_pid_39
$1310	$5006	    			MOVF	STACK_4+2, 0, 0
$1312	$5D8C	    			SUBWF	calc_pid_error_d_L0+2, 0, 1
$1314	$E105	    			BNZ	L_calc_pid_39
$1316	$5005	    			MOVF	STACK_4+1, 0, 0
$1318	$5D8B	    			SUBWF	calc_pid_error_d_L0+1, 0, 1
$131A	$E102	    			BNZ	L_calc_pid_39
$131C	$5004	    			MOVF	STACK_4, 0, 0
$131E	$5D8A	    			SUBWF	calc_pid_error_d_L0, 0, 1
$1320	$	L_calc_pid_39:
$1320	$E20C	    			BC	L_calc_pid_18
;pid.c,175 :: 			error_d = -maxerror_d;
$1322	$6B8A	    			CLRF	calc_pid_error_d_L0, 1
$1324	$6B8B	    			CLRF	calc_pid_error_d_L0+1, 1
$1326	$6B8C	    			CLRF	calc_pid_error_d_L0+2, 1
$1328	$6B8D	    			CLRF	calc_pid_error_d_L0+3, 1
$132A	$5182	    			MOVF	calc_pid_maxerror_d_L0, 0, 1
$132C	$5F8A	    			SUBWF	calc_pid_error_d_L0, 1, 1
$132E	$5183	    			MOVF	calc_pid_maxerror_d_L0+1, 0, 1
$1330	$5B8B	    			SUBWFB	calc_pid_error_d_L0+1, 1, 1
$1332	$5184	    			MOVF	calc_pid_maxerror_d_L0+2, 0, 1
$1334	$5B8C	    			SUBWFB	calc_pid_error_d_L0+2, 1, 1
$1336	$5185	    			MOVF	calc_pid_maxerror_d_L0+3, 0, 1
$1338	$5B8D	    			SUBWFB	calc_pid_error_d_L0+3, 1, 1
;pid.c,176 :: 			}
$133A	$	L_calc_pid_18:
$133A	$	L_calc_pid_17:
;pid.c,177 :: 			}
$133A	$	L_calc_pid_15:
;pid.c,178 :: 			ps->error_d = error_d;
$133A	$0101	    			MOVLB	1
$133C	$0101	    			MOVLB	1
$133E	$0101	    			MOVLB	1
$1340	$0E22	    			MOVLW	34
$1342	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1344	$6EE1	    			MOVWF	FSR1L, 0
$1346	$0E00	    			MOVLW	0
$1348	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$134A	$6EE2	    			MOVWF	FSR1L+1, 0
$134C	$C18A	FFE6			MOVFF	calc_pid_error_d_L0, POSTINC1
$1350	$C18B	FFE6			MOVFF	calc_pid_error_d_L0+1, POSTINC1
$1354	$C18C	FFE6			MOVFF	calc_pid_error_d_L0+2, POSTINC1
$1358	$C18D	FFE6			MOVFF	calc_pid_error_d_L0+3, POSTINC1
;pid.c,182 :: 			cmd_d =  (long)(ps->command - ps->prev_cmd);
$135C	$C170	FFE9			MOVFF	FARG_calc_pid+0, FSR0L
$1360	$C171	FFEA			MOVFF	FARG_calc_pid+1, FSR0H
$1364	$CFEE	F192			MOVFF	POSTINC0, calc_pid_cmd_d_L0
$1368	$CFEE	F193			MOVFF	POSTINC0, calc_pid_cmd_d_L0+1
$136C	$CFEE	F194			MOVFF	POSTINC0, calc_pid_cmd_d_L0+2
$1370	$CFEE	F195			MOVFF	POSTINC0, calc_pid_cmd_d_L0+3
$1374	$0E26	    			MOVLW	38
$1376	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1378	$6E04	    			MOVWF	STACK_4, 0
$137A	$0E00	    			MOVLW	0
$137C	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$137E	$6E05	    			MOVWF	STACK_4+1, 0
$1380	$C004	FFE9			MOVFF	STACK_4, FSR0L
$1384	$C005	FFEA			MOVFF	STACK_4+1, FSR0H
$1388	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$138C	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$1390	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$1394	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$1398	$5000	    			MOVF	STACK_0, 0, 0
$139A	$5F92	    			SUBWF	calc_pid_cmd_d_L0, 1, 1
$139C	$5001	    			MOVF	STACK_0+1, 0, 0
$139E	$5B93	    			SUBWFB	calc_pid_cmd_d_L0+1, 1, 1
$13A0	$5002	    			MOVF	STACK_0+2, 0, 0
$13A2	$5B94	    			SUBWFB	calc_pid_cmd_d_L0+2, 1, 1
$13A4	$5003	    			MOVF	STACK_0+3, 0, 0
$13A6	$5B95	    			SUBWFB	calc_pid_cmd_d_L0+3, 1, 1
;pid.c,183 :: 			ps->prev_cmd = ps->command;
$13A8	$C170	FFE9			MOVFF	FARG_calc_pid+0, FSR0L
$13AC	$C171	FFEA			MOVFF	FARG_calc_pid+1, FSR0H
$13B0	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$13B4	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$13B8	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$13BC	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$13C0	$C004	FFE1			MOVFF	STACK_4, FSR1L
$13C4	$C005	FFE2			MOVFF	STACK_4+1, FSR1H
$13C8	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$13CC	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$13D0	$C002	FFE6			MOVFF	STACK_0+2, POSTINC1
$13D4	$C003	FFE6			MOVFF	STACK_0+3, POSTINC1
;pid.c,186 :: 			if (maxcmd_d != 0u) {
$13D8	$0E00	    			MOVLW	0
$13DA	$6E00	    			MOVWF	STACK_0, 0
$13DC	$1991	    			XORWF	calc_pid_maxcmd_d_L0+3, 0, 1
$13DE	$E108	    			BNZ	L_calc_pid_40
$13E0	$5000	    			MOVF	STACK_0, 0, 0
$13E2	$1990	    			XORWF	calc_pid_maxcmd_d_L0+2, 0, 1
$13E4	$E105	    			BNZ	L_calc_pid_40
$13E6	$5000	    			MOVF	STACK_0, 0, 0
$13E8	$198F	    			XORWF	calc_pid_maxcmd_d_L0+1, 0, 1
$13EA	$E102	    			BNZ	L_calc_pid_40
$13EC	$518E	    			MOVF	calc_pid_maxcmd_d_L0, 0, 1
$13EE	$0A00	    			XORLW	0
$13F0	$	L_calc_pid_40:
$13F0	$E042	    			BZ	L_calc_pid_19
;pid.c,187 :: 			if (cmd_d > maxcmd_d){
$13F2	$0E80	    			MOVLW	128
$13F4	$1991	    			XORWF	calc_pid_maxcmd_d_L0+3, 0, 1
$13F6	$6E00	    			MOVWF	STACK_0, 0
$13F8	$0E80	    			MOVLW	128
$13FA	$1995	    			XORWF	calc_pid_cmd_d_L0+3, 0, 1
$13FC	$5C00	    			SUBWF	STACK_0, 0, 0
$13FE	$E108	    			BNZ	L_calc_pid_41
$1400	$5194	    			MOVF	calc_pid_cmd_d_L0+2, 0, 1
$1402	$5D90	    			SUBWF	calc_pid_maxcmd_d_L0+2, 0, 1
$1404	$E105	    			BNZ	L_calc_pid_41
$1406	$5193	    			MOVF	calc_pid_cmd_d_L0+1, 0, 1
$1408	$5D8F	    			SUBWF	calc_pid_maxcmd_d_L0+1, 0, 1
$140A	$E102	    			BNZ	L_calc_pid_41
$140C	$5192	    			MOVF	calc_pid_cmd_d_L0, 0, 1
$140E	$5D8E	    			SUBWF	calc_pid_maxcmd_d_L0, 0, 1
$1410	$	L_calc_pid_41:
$1410	$E209	    			BC	L_calc_pid_20
;pid.c,188 :: 			cmd_d = maxcmd_d;
$1412	$C18E	F192			MOVFF	calc_pid_maxcmd_d_L0, calc_pid_cmd_d_L0
$1416	$C18F	F193			MOVFF	calc_pid_maxcmd_d_L0+1, calc_pid_cmd_d_L0+1
$141A	$C190	F194			MOVFF	calc_pid_maxcmd_d_L0+2, calc_pid_cmd_d_L0+2
$141E	$C191	F195			MOVFF	calc_pid_maxcmd_d_L0+3, calc_pid_cmd_d_L0+3
;pid.c,189 :: 			}
$1422	$D029	    			BRA	L_calc_pid_21
$1424	$	L_calc_pid_20:
;pid.c,190 :: 			else if (cmd_d < -maxcmd_d){
$1424	$0101	    			MOVLB	1
$1426	$6A04	    			CLRF	STACK_4, 0
$1428	$6A05	    			CLRF	STACK_4+1, 0
$142A	$6A06	    			CLRF	STACK_4+2, 0
$142C	$6A07	    			CLRF	STACK_4+3, 0
$142E	$518E	    			MOVF	calc_pid_maxcmd_d_L0, 0, 1
$1430	$5E04	    			SUBWF	STACK_4, 1, 0
$1432	$518F	    			MOVF	calc_pid_maxcmd_d_L0+1, 0, 1
$1434	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$1436	$5190	    			MOVF	calc_pid_maxcmd_d_L0+2, 0, 1
$1438	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$143A	$5191	    			MOVF	calc_pid_maxcmd_d_L0+3, 0, 1
$143C	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$143E	$0E80	    			MOVLW	128
$1440	$1995	    			XORWF	calc_pid_cmd_d_L0+3, 0, 1
$1442	$6E00	    			MOVWF	STACK_0, 0
$1444	$0E80	    			MOVLW	128
$1446	$1807	    			XORWF	STACK_4+3, 0, 0
$1448	$5C00	    			SUBWF	STACK_0, 0, 0
$144A	$E108	    			BNZ	L_calc_pid_42
$144C	$5006	    			MOVF	STACK_4+2, 0, 0
$144E	$5D94	    			SUBWF	calc_pid_cmd_d_L0+2, 0, 1
$1450	$E105	    			BNZ	L_calc_pid_42
$1452	$5005	    			MOVF	STACK_4+1, 0, 0
$1454	$5D93	    			SUBWF	calc_pid_cmd_d_L0+1, 0, 1
$1456	$E102	    			BNZ	L_calc_pid_42
$1458	$5004	    			MOVF	STACK_4, 0, 0
$145A	$5D92	    			SUBWF	calc_pid_cmd_d_L0, 0, 1
$145C	$	L_calc_pid_42:
$145C	$E20C	    			BC	L_calc_pid_22
;pid.c,191 :: 			cmd_d = -maxcmd_d;
$145E	$6B92	    			CLRF	calc_pid_cmd_d_L0, 1
$1460	$6B93	    			CLRF	calc_pid_cmd_d_L0+1, 1
$1462	$6B94	    			CLRF	calc_pid_cmd_d_L0+2, 1
$1464	$6B95	    			CLRF	calc_pid_cmd_d_L0+3, 1
$1466	$518E	    			MOVF	calc_pid_maxcmd_d_L0, 0, 1
$1468	$5F92	    			SUBWF	calc_pid_cmd_d_L0, 1, 1
$146A	$518F	    			MOVF	calc_pid_maxcmd_d_L0+1, 0, 1
$146C	$5B93	    			SUBWFB	calc_pid_cmd_d_L0+1, 1, 1
$146E	$5190	    			MOVF	calc_pid_maxcmd_d_L0+2, 0, 1
$1470	$5B94	    			SUBWFB	calc_pid_cmd_d_L0+2, 1, 1
$1472	$5191	    			MOVF	calc_pid_maxcmd_d_L0+3, 0, 1
$1474	$5B95	    			SUBWFB	calc_pid_cmd_d_L0+3, 1, 1
;pid.c,192 :: 			}
$1476	$	L_calc_pid_22:
$1476	$	L_calc_pid_21:
;pid.c,193 :: 			}
$1476	$	L_calc_pid_19:
;pid.c,194 :: 			ps->cmd_d = cmd_d;
$1476	$0101	    			MOVLB	1
$1478	$0101	    			MOVLB	1
$147A	$0101	    			MOVLB	1
$147C	$0E2A	    			MOVLW	42
$147E	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1480	$6EE1	    			MOVWF	FSR1L, 0
$1482	$0E00	    			MOVLW	0
$1484	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1486	$6EE2	    			MOVWF	FSR1L+1, 0
$1488	$C192	FFE6			MOVFF	calc_pid_cmd_d_L0, POSTINC1
$148C	$C193	FFE6			MOVFF	calc_pid_cmd_d_L0+1, POSTINC1
$1490	$C194	FFE6			MOVFF	calc_pid_cmd_d_L0+2, POSTINC1
$1494	$C195	FFE6			MOVFF	calc_pid_cmd_d_L0+3, POSTINC1
;pid.c,197 :: 			output=0;
$1498	$6B9B	    			CLRF	calc_pid_output_L0, 1
$149A	$6B9C	    			CLRF	calc_pid_output_L0+1, 1
;pid.c,198 :: 			if (enable != 0u) {
$149C	$5196	    			MOVF	calc_pid_enable_L0, 0, 1
$149E	$0A00	    			XORLW	0
$14A0	$B4D8	    			BTFSC	STATUS, Z, 0
$14A2	$D190	    			BRA	L_calc_pid_23
;pid.c,205 :: 			(float)ps->bias + ( (float)ps->pgain * tmp1 ) +
$14A4	$0E2E	    			MOVLW	46
$14A6	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$14A8	$6EE9	    			MOVWF	FSR0L, 0
$14AA	$0E00	    			MOVLW	0
$14AC	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$14AE	$6EEA	    			MOVWF	FSR0L+1, 0
$14B0	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$14B4	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$14B8	$ECE3	F002			CALL	_int2double
$14BC	$C000	F1A2			MOVFF	STACK_0, FLOC_calc_pid+48
$14C0	$C001	F1A3			MOVFF	STACK_0+1, FLOC_calc_pid+49
$14C4	$C002	F1A4			MOVFF	STACK_0+2, FLOC_calc_pid+50
$14C8	$C003	F1A5			MOVFF	STACK_0+3, FLOC_calc_pid+51
$14CC	$0E30	    			MOVLW	48
$14CE	$0101	    			MOVLB	1
$14D0	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$14D2	$6EE9	    			MOVWF	FSR0L, 0
$14D4	$0E00	    			MOVLW	0
$14D6	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$14D8	$6EEA	    			MOVWF	FSR0L+1, 0
$14DA	$CFEE	F19E			MOVFF	POSTINC0, FLOC_calc_pid+44
$14DE	$CFEE	F19F			MOVFF	POSTINC0, FLOC_calc_pid+45
$14E2	$CFEE	F1A0			MOVFF	POSTINC0, FLOC_calc_pid+46
$14E6	$CFEE	F1A1			MOVFF	POSTINC0, FLOC_calc_pid+47
$14EA	$C172	F000			MOVFF	calc_pid_tmp1_L0, STACK_0
$14EE	$C173	F001			MOVFF	calc_pid_tmp1_L0+1, STACK_0+1
$14F2	$C174	F002			MOVFF	calc_pid_tmp1_L0+2, STACK_0+2
$14F6	$C175	F003			MOVFF	calc_pid_tmp1_L0+3, STACK_0+3
$14FA	$EC05	F003			CALL	_longint2double
$14FE	$C19E	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$1502	$C19F	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$1506	$C1A0	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$150A	$C1A1	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$150E	$EC28	F003			CALL	_mul_32x32_fp
$1512	$C1A2	F004			MOVFF	FLOC_calc_pid+48, STACK_4
$1516	$C1A3	F005			MOVFF	FLOC_calc_pid+49, STACK_4+1
$151A	$C1A4	F006			MOVFF	FLOC_calc_pid+50, STACK_4+2
$151E	$C1A5	F007			MOVFF	FLOC_calc_pid+51, STACK_4+3
$1522	$ECBC	F003			CALL	_add_32x32_fp
$1526	$C000	F19E			MOVFF	STACK_0, FLOC_calc_pid+44
$152A	$C001	F19F			MOVFF	STACK_0+1, FLOC_calc_pid+45
$152E	$C002	F1A0			MOVFF	STACK_0+2, FLOC_calc_pid+46
$1532	$C003	F1A1			MOVFF	STACK_0+3, FLOC_calc_pid+47
;pid.c,206 :: 			((float)ps->error_i * (float)ps->igain) +
$1536	$0E1C	    			MOVLW	28
$1538	$0101	    			MOVLB	1
$153A	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$153C	$6EE9	    			MOVWF	FSR0L, 0
$153E	$0E00	    			MOVLW	0
$1540	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1542	$6EEA	    			MOVWF	FSR0L+1, 0
$1544	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1548	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$154C	$ECE3	F002			CALL	_int2double
$1550	$0E34	    			MOVLW	52
$1552	$0101	    			MOVLB	1
$1554	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1556	$6EE9	    			MOVWF	FSR0L, 0
$1558	$0E00	    			MOVLW	0
$155A	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$155C	$6EEA	    			MOVWF	FSR0L+1, 0
$155E	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$1562	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$1566	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$156A	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$156E	$EC28	F003			CALL	_mul_32x32_fp
$1572	$C19E	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$1576	$C19F	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$157A	$C1A0	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$157E	$C1A1	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$1582	$ECBC	F003			CALL	_add_32x32_fp
$1586	$C000	F1A2			MOVFF	STACK_0, FLOC_calc_pid+48
$158A	$C001	F1A3			MOVFF	STACK_0+1, FLOC_calc_pid+49
$158E	$C002	F1A4			MOVFF	STACK_0+2, FLOC_calc_pid+50
$1592	$C003	F1A5			MOVFF	STACK_0+3, FLOC_calc_pid+51
;pid.c,207 :: 			((float)ps->dgain * (float)ps->error_d);
$1596	$0E38	    			MOVLW	56
$1598	$0101	    			MOVLB	1
$159A	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$159C	$6EE9	    			MOVWF	FSR0L, 0
$159E	$0E00	    			MOVLW	0
$15A0	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$15A2	$6EEA	    			MOVWF	FSR0L+1, 0
$15A4	$CFEE	F19E			MOVFF	POSTINC0, FLOC_calc_pid+44
$15A8	$CFEE	F19F			MOVFF	POSTINC0, FLOC_calc_pid+45
$15AC	$CFEE	F1A0			MOVFF	POSTINC0, FLOC_calc_pid+46
$15B0	$CFEE	F1A1			MOVFF	POSTINC0, FLOC_calc_pid+47
$15B4	$0E22	    			MOVLW	34
$15B6	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$15B8	$6EE9	    			MOVWF	FSR0L, 0
$15BA	$0E00	    			MOVLW	0
$15BC	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$15BE	$6EEA	    			MOVWF	FSR0L+1, 0
$15C0	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$15C4	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$15C8	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$15CC	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$15D0	$EC05	F003			CALL	_longint2double
$15D4	$C19E	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$15D8	$C19F	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$15DC	$C1A0	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$15E0	$C1A1	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$15E4	$EC28	F003			CALL	_mul_32x32_fp
$15E8	$C1A2	F004			MOVFF	FLOC_calc_pid+48, STACK_4
$15EC	$C1A3	F005			MOVFF	FLOC_calc_pid+49, STACK_4+1
$15F0	$C1A4	F006			MOVFF	FLOC_calc_pid+50, STACK_4+2
$15F4	$C1A5	F007			MOVFF	FLOC_calc_pid+51, STACK_4+3
$15F8	$ECBC	F003			CALL	_add_32x32_fp
$15FC	$C000	F19E			MOVFF	STACK_0, FLOC_calc_pid+44
$1600	$C001	F19F			MOVFF	STACK_0+1, FLOC_calc_pid+45
$1604	$C002	F1A0			MOVFF	STACK_0+2, FLOC_calc_pid+46
$1608	$C003	F1A1			MOVFF	STACK_0+3, FLOC_calc_pid+47
$160C	$C19E	F176			MOVFF	FLOC_calc_pid+44, calc_pid_tmp2_L0
$1610	$C19F	F177			MOVFF	FLOC_calc_pid+45, calc_pid_tmp2_L0+1
$1614	$C1A0	F178			MOVFF	FLOC_calc_pid+46, calc_pid_tmp2_L0+2
$1618	$C1A1	F179			MOVFF	FLOC_calc_pid+47, calc_pid_tmp2_L0+3
;pid.c,210 :: 			tmp2 += ((float)ps->command * (float)ps->ff0gain );
$161C	$C170	FFE9			MOVFF	FARG_calc_pid+0, FSR0L
$1620	$C171	FFEA			MOVFF	FARG_calc_pid+1, FSR0H
$1624	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1628	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$162C	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$1630	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$1634	$EC05	F003			CALL	_longint2double
$1638	$0E3C	    			MOVLW	60
$163A	$0101	    			MOVLB	1
$163C	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$163E	$6EE9	    			MOVWF	FSR0L, 0
$1640	$0E00	    			MOVLW	0
$1642	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$1644	$6EEA	    			MOVWF	FSR0L+1, 0
$1646	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$164A	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$164E	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$1652	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$1656	$EC28	F003			CALL	_mul_32x32_fp
$165A	$C19E	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$165E	$C19F	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$1662	$C1A0	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$1666	$C1A1	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$166A	$ECBC	F003			CALL	_add_32x32_fp
$166E	$C000	F19E			MOVFF	STACK_0, FLOC_calc_pid+44
$1672	$C001	F19F			MOVFF	STACK_0+1, FLOC_calc_pid+45
$1676	$C002	F1A0			MOVFF	STACK_0+2, FLOC_calc_pid+46
$167A	$C003	F1A1			MOVFF	STACK_0+3, FLOC_calc_pid+47
$167E	$C19E	F176			MOVFF	FLOC_calc_pid+44, calc_pid_tmp2_L0
$1682	$C19F	F177			MOVFF	FLOC_calc_pid+45, calc_pid_tmp2_L0+1
$1686	$C1A0	F178			MOVFF	FLOC_calc_pid+46, calc_pid_tmp2_L0+2
$168A	$C1A1	F179			MOVFF	FLOC_calc_pid+47, calc_pid_tmp2_L0+3
;pid.c,212 :: 			tmp2 += ((float)ps->cmd_d * (float)ps->ff1gain);
$168E	$0E2A	    			MOVLW	42
$1690	$0101	    			MOVLB	1
$1692	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$1694	$6EE9	    			MOVWF	FSR0L, 0
$1696	$0E00	    			MOVLW	0
$1698	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$169A	$6EEA	    			MOVWF	FSR0L+1, 0
$169C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$16A0	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$16A4	$CFEE	F002			MOVFF	POSTINC0, STACK_0+2
$16A8	$CFEE	F003			MOVFF	POSTINC0, STACK_0+3
$16AC	$EC05	F003			CALL	_longint2double
$16B0	$0E40	    			MOVLW	64
$16B2	$0101	    			MOVLB	1
$16B4	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$16B6	$6EE9	    			MOVWF	FSR0L, 0
$16B8	$0E00	    			MOVLW	0
$16BA	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$16BC	$6EEA	    			MOVWF	FSR0L+1, 0
$16BE	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$16C2	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$16C6	$CFEE	F006			MOVFF	POSTINC0, STACK_4+2
$16CA	$CFEE	F007			MOVFF	POSTINC0, STACK_4+3
$16CE	$EC28	F003			CALL	_mul_32x32_fp
$16D2	$C19E	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$16D6	$C19F	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$16DA	$C1A0	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$16DE	$C1A1	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$16E2	$ECBC	F003			CALL	_add_32x32_fp
$16E6	$C000	F19E			MOVFF	STACK_0, FLOC_calc_pid+44
$16EA	$C001	F19F			MOVFF	STACK_0+1, FLOC_calc_pid+45
$16EE	$C002	F1A0			MOVFF	STACK_0+2, FLOC_calc_pid+46
$16F2	$C003	F1A1			MOVFF	STACK_0+3, FLOC_calc_pid+47
$16F6	$C19E	F176			MOVFF	FLOC_calc_pid+44, calc_pid_tmp2_L0
$16FA	$C19F	F177			MOVFF	FLOC_calc_pid+45, calc_pid_tmp2_L0+1
$16FE	$C1A0	F178			MOVFF	FLOC_calc_pid+46, calc_pid_tmp2_L0+2
$1702	$C1A1	F179			MOVFF	FLOC_calc_pid+47, calc_pid_tmp2_L0+3
;pid.c,218 :: 			limitstate=0u;
$1706	$0101	    			MOVLB	1
$1708	$6B9D	    			CLRF	calc_pid_limitstate_L0, 1
;pid.c,220 :: 			if ( tmp2 > maxoutput){
$170A	$C199	F000			MOVFF	calc_pid_maxoutput_L0, STACK_0
$170E	$C19A	F001			MOVFF	calc_pid_maxoutput_L0+1, STACK_0+1
$1712	$ECE3	F002			CALL	_int2double
$1716	$C19E	F004			MOVFF	FLOC_calc_pid+44, STACK_4
$171A	$C19F	F005			MOVFF	FLOC_calc_pid+45, STACK_4+1
$171E	$C1A0	F006			MOVFF	FLOC_calc_pid+46, STACK_4+2
$1722	$C1A1	F007			MOVFF	FLOC_calc_pid+47, STACK_4+3
$1726	$ECD0	F005			CALL	_compare_double
$172A	$0E01	    			MOVLW	1
$172C	$B0D8	    			BTFSC	STATUS, C, 0
$172E	$0E00	    			MOVLW	0
$1730	$6E00	    			MOVWF	STACK_0, 0
$1732	$5200	    			MOVF	STACK_0, 1, 0
$1734	$E008	    			BZ	L_calc_pid_24
;pid.c,221 :: 			output = maxoutput;
$1736	$C199	F19B			MOVFF	calc_pid_maxoutput_L0, calc_pid_output_L0
$173A	$C19A	F19C			MOVFF	calc_pid_maxoutput_L0+1, calc_pid_output_L0+1
;pid.c,222 :: 			limitstate=1u;
$173E	$0E01	    			MOVLW	1
$1740	$0101	    			MOVLB	1
$1742	$6F9D	    			MOVWF	calc_pid_limitstate_L0, 1
;pid.c,223 :: 			}
$1744	$D03C	    			BRA	L_calc_pid_25
$1746	$	L_calc_pid_24:
;pid.c,224 :: 			else if ( tmp2 < -maxoutput ){
$1746	$0101	    			MOVLB	1
$1748	$5199	    			MOVF	calc_pid_maxoutput_L0, 0, 1
$174A	$0800	    			SUBLW	0
$174C	$6E00	    			MOVWF	STACK_0, 0
$174E	$C19A	F001			MOVFF	calc_pid_maxoutput_L0+1, STACK_0+1
$1752	$6AE8	    			CLRF	WREG, 0
$1754	$5601	    			SUBFWB	STACK_0+1, 1, 0
$1756	$ECE3	F002			CALL	_int2double
$175A	$C000	F004			MOVFF	STACK_0, STACK_4
$175E	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$1762	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$1766	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$176A	$C176	F000			MOVFF	calc_pid_tmp2_L0, STACK_0
$176E	$C177	F001			MOVFF	calc_pid_tmp2_L0+1, STACK_0+1
$1772	$C178	F002			MOVFF	calc_pid_tmp2_L0+2, STACK_0+2
$1776	$C179	F003			MOVFF	calc_pid_tmp2_L0+3, STACK_0+3
$177A	$ECD0	F005			CALL	_compare_double
$177E	$0E01	    			MOVLW	1
$1780	$B0D8	    			BTFSC	STATUS, C, 0
$1782	$0E00	    			MOVLW	0
$1784	$6E00	    			MOVWF	STACK_0, 0
$1786	$5200	    			MOVF	STACK_0, 1, 0
$1788	$E00B	    			BZ	L_calc_pid_26
;pid.c,225 :: 			output = -maxoutput;
$178A	$0101	    			MOVLB	1
$178C	$5199	    			MOVF	calc_pid_maxoutput_L0, 0, 1
$178E	$0800	    			SUBLW	0
$1790	$6F9B	    			MOVWF	calc_pid_output_L0, 1
$1792	$C19A	F19C			MOVFF	calc_pid_maxoutput_L0+1, calc_pid_output_L0+1
$1796	$6AE8	    			CLRF	WREG, 0
$1798	$579C	    			SUBFWB	calc_pid_output_L0+1, 1, 1
;pid.c,226 :: 			limitstate=1u;
$179A	$0E01	    			MOVLW	1
$179C	$6F9D	    			MOVWF	calc_pid_limitstate_L0, 1
;pid.c,227 :: 			}
$179E	$D00F	    			BRA	L_calc_pid_27
$17A0	$	L_calc_pid_26:
;pid.c,229 :: 			output = (int)tmp2;
$17A0	$0101	    			MOVLB	1
$17A2	$C176	F000			MOVFF	calc_pid_tmp2_L0, STACK_0
$17A6	$C177	F001			MOVFF	calc_pid_tmp2_L0+1, STACK_0+1
$17AA	$C178	F002			MOVFF	calc_pid_tmp2_L0+2, STACK_0+2
$17AE	$C179	F003			MOVFF	calc_pid_tmp2_L0+3, STACK_0+3
$17B2	$EC38	F006			CALL	_double2int
$17B6	$C000	F19B			MOVFF	STACK_0, calc_pid_output_L0
$17BA	$C001	F19C			MOVFF	STACK_0+1, calc_pid_output_L0+1
;pid.c,230 :: 			}
$17BE	$	L_calc_pid_27:
$17BE	$	L_calc_pid_25:
;pid.c,232 :: 			}
$17BE	$0100	    			MOVLB	0
$17C0	$0100	    			MOVLB	0
$17C2	$D004	    			BRA	L_calc_pid_28
$17C4	$	L_calc_pid_23:
;pid.c,235 :: 			output = 0;
$17C4	$0101	    			MOVLB	1
$17C6	$6B9B	    			CLRF	calc_pid_output_L0, 1
$17C8	$6B9C	    			CLRF	calc_pid_output_L0+1, 1
;pid.c,236 :: 			limitstate = 0;
$17CA	$6B9D	    			CLRF	calc_pid_limitstate_L0, 1
;pid.c,237 :: 			}
$17CC	$	L_calc_pid_28:
;pid.c,239 :: 			ps->output = output;
$17CC	$0E46	    			MOVLW	70
$17CE	$0101	    			MOVLB	1
$17D0	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$17D2	$6EE1	    			MOVWF	FSR1L, 0
$17D4	$0E00	    			MOVLW	0
$17D6	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$17D8	$6EE2	    			MOVWF	FSR1L+1, 0
$17DA	$C19B	FFE6			MOVFF	calc_pid_output_L0, POSTINC1
$17DE	$C19C	FFE6			MOVFF	calc_pid_output_L0+1, POSTINC1
;pid.c,240 :: 			ps->limit_state = limitstate;
$17E2	$0E49	    			MOVLW	73
$17E4	$2570	    			ADDWF	FARG_calc_pid+0, 0, 1
$17E6	$6EE1	    			MOVWF	FSR1L, 0
$17E8	$0E00	    			MOVLW	0
$17EA	$2171	    			ADDWFC	FARG_calc_pid+1, 0, 1
$17EC	$6EE2	    			MOVWF	FSR1L+1, 0
$17EE	$C19D	FFE6			MOVFF	calc_pid_limitstate_L0, POSTINC1
;pid.c,242 :: 			}
$17F2	$0012	    			RETURN
$17F4	$	_setDuty:
;duty.c,32 :: 			void setDuty( unsigned short setpnt ){
;duty.c,41 :: 			setpoint = 255 - setpnt;
$17F4	$505F	    			MOVF	FARG_setDuty+0, 0, 0
$17F6	$08FF	    			SUBLW	255
$17F8	$6E01	    			MOVWF	STACK_1, 0
$17FA	$C001	F01F			MOVFF	STACK_1, _setpoint
;duty.c,42 :: 			setpoint = setpoint >> 1;
$17FE	$C001	F01F			MOVFF	STACK_1, _setpoint
$1802	$321F	    			RRCF	_setpoint, 1, 0
$1804	$9E1F	    			BCF	_setpoint, 7, 0
;duty.c,43 :: 			}
$1806	$0012	    			RETURN
$1808	$	_calcMotorVelocity:
;extruder.c,481 :: 			void calcMotorVelocity(){
;extruder.c,490 :: 			if ( meltFlowComp == 1){
$1808	$5022	    			MOVF	_meltFlowComp, 0, 0
$180A	$0A01	    			XORLW	1
$180C	$E100	    			BNZ	L_calcMotorVelocity_31
;extruder.c,503 :: 			}
$180E	$	L_calcMotorVelocity_31:
;extruder.c,507 :: 			pid_motor.command = motorPulses;
$180E	$C015	F0AB			MOVFF	_motorPulses, _pid_motor+0
$1812	$C016	F0AC			MOVFF	_motorPulses+1, _pid_motor+1
$1816	$C017	F0AD			MOVFF	_motorPulses+2, _pid_motor+2
$181A	$C018	F0AE			MOVFF	_motorPulses+3, _pid_motor+3
;extruder.c,509 :: 			pid_motor.feedback = (long)(motorTurns * CNT_PER_TURN ) +
$181E	$C01A	F000			MOVFF	_motorTurns, STACK_0
$1822	$C01B	F001			MOVFF	_motorTurns+1, STACK_0+1
$1826	$C01C	F002			MOVFF	_motorTurns+2, STACK_0+2
$182A	$C01D	F003			MOVFF	_motorTurns+3, STACK_0+3
$182E	$0ED0	    			MOVLW	208
$1830	$6E04	    			MOVWF	STACK_4, 0
$1832	$0E07	    			MOVLW	7
$1834	$6E05	    			MOVWF	STACK_4+1, 0
$1836	$0E00	    			MOVLW	0
$1838	$6E06	    			MOVWF	STACK_4+2, 0
$183A	$6E07	    			MOVWF	STACK_4+3, 0
$183C	$ECA3	F006			CALL	_mul_32x32_s
;extruder.c,510 :: 			(long)(POSCNTH << 8 ) + (long)POSCNTL;
$1840	$0E08	    			MOVLW	8
$1842	$6E08	    			MOVWF	STACK_8, 0
$1844	$CF67	F004			MOVFF	POSCNTH, STACK_4
$1848	$0E00	    			MOVLW	0
$184A	$6E05	    			MOVWF	STACK_4+1, 0
$184C	$5008	    			MOVF	STACK_8, 0, 0
$184E	$	L_calcMotorVelocity_119:
$184E	$0100	    			MOVLB	0
$1850	$E005	    			BZ	L_calcMotorVelocity_120
$1852	$3604	    			RLCF	STACK_4, 1, 0
$1854	$9004	    			BCF	STACK_4, 0, 0
$1856	$3605	    			RLCF	STACK_4+1, 1, 0
$1858	$0FFF	    			ADDLW	255
$185A	$D7F9	    			BRA	L_calcMotorVelocity_119
$185C	$	L_calcMotorVelocity_120:
$185C	$0E00	    			MOVLW	0
$185E	$6E06	    			MOVWF	STACK_4+2, 0
$1860	$6E07	    			MOVWF	STACK_4+3, 0
$1862	$5004	    			MOVF	STACK_4, 0, 0
$1864	$2400	    			ADDWF	STACK_0, 0, 0
$1866	$0100	    			MOVLB	0
$1868	$6FAF	    			MOVWF	_pid_motor+4, 1
$186A	$5005	    			MOVF	STACK_4+1, 0, 0
$186C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$186E	$6FB0	    			MOVWF	_pid_motor+5, 1
$1870	$5006	    			MOVF	STACK_4+2, 0, 0
$1872	$2002	    			ADDWFC	STACK_0+2, 0, 0
$1874	$6FB1	    			MOVWF	_pid_motor+6, 1
$1876	$5007	    			MOVF	STACK_4+3, 0, 0
$1878	$2003	    			ADDWFC	STACK_0+3, 0, 0
$187A	$6FB2	    			MOVWF	_pid_motor+7, 1
$187C	$CF66	F000			MOVFF	POSCNTL, STACK_0
$1880	$0E00	    			MOVLW	0
$1882	$6E01	    			MOVWF	STACK_0+1, 0
$1884	$6E02	    			MOVWF	STACK_0+2, 0
$1886	$6E03	    			MOVWF	STACK_0+3, 0
$1888	$5000	    			MOVF	STACK_0, 0, 0
$188A	$27AF	    			ADDWF	_pid_motor+4, 1, 1
$188C	$5001	    			MOVF	STACK_0+1, 0, 0
$188E	$23B0	    			ADDWFC	_pid_motor+5, 1, 1
$1890	$5002	    			MOVF	STACK_0+2, 0, 0
$1892	$23B1	    			ADDWFC	_pid_motor+6, 1, 1
$1894	$5003	    			MOVF	STACK_0+3, 0, 0
$1896	$23B2	    			ADDWFC	_pid_motor+7, 1, 1
;extruder.c,512 :: 			motorPulses = 0;
$1898	$6A15	    			CLRF	_motorPulses, 0
$189A	$6A16	    			CLRF	_motorPulses+1, 0
$189C	$6A17	    			CLRF	_motorPulses+2, 0
$189E	$6A18	    			CLRF	_motorPulses+3, 0
;extruder.c,513 :: 			motorTurns = 0;
$18A0	$6A1A	    			CLRF	_motorTurns, 0
$18A2	$6A1B	    			CLRF	_motorTurns+1, 0
$18A4	$6A1C	    			CLRF	_motorTurns+2, 0
$18A6	$6A1D	    			CLRF	_motorTurns+3, 0
;extruder.c,515 :: 			}
$18A8	$0012	    			RETURN
$18AA	$	_calcMotorPosition:
;extruder.c,420 :: 			void calcMotorPosition(){
;extruder.c,421 :: 			long axis_adjust = 0;
$18AA	$0101	    			MOVLB	1
$18AC	$6B70	    			CLRF	calcMotorPosition_axis_adjust_L0, 1
$18AE	$6B71	    			CLRF	calcMotorPosition_axis_adjust_L0+1, 1
$18B0	$6B72	    			CLRF	calcMotorPosition_axis_adjust_L0+2, 1
$18B2	$6B73	    			CLRF	calcMotorPosition_axis_adjust_L0+3, 1
;extruder.c,422 :: 			long turn_adjust = 0;
$18B4	$6B74	    			CLRF	calcMotorPosition_turn_adjust_L0, 1
$18B6	$6B75	    			CLRF	calcMotorPosition_turn_adjust_L0+1, 1
$18B8	$6B76	    			CLRF	calcMotorPosition_turn_adjust_L0+2, 1
$18BA	$6B77	    			CLRF	calcMotorPosition_turn_adjust_L0+3, 1
;extruder.c,424 :: 			if  ( pid_motor.command > AXIS_MAX || pid_motor.feedback > AXIS_MAX ){
$18BC	$0E80	    			MOVLW	128
$18BE	$0A77	    			XORLW	119
$18C0	$6E00	    			MOVWF	STACK_0, 0
$18C2	$0E80	    			MOVLW	128
$18C4	$0100	    			MOVLB	0
$18C6	$19AE	    			XORWF	_pid_motor+3, 0, 1
$18C8	$5C00	    			SUBWF	STACK_0, 0, 0
$18CA	$E108	    			BNZ	L_calcMotorPosition_112
$18CC	$51AD	    			MOVF	_pid_motor+2, 0, 1
$18CE	$0835	    			SUBLW	53
$18D0	$E105	    			BNZ	L_calcMotorPosition_112
$18D2	$51AC	    			MOVF	_pid_motor+1, 0, 1
$18D4	$0894	    			SUBLW	148
$18D6	$E102	    			BNZ	L_calcMotorPosition_112
$18D8	$51AB	    			MOVF	_pid_motor+0, 0, 1
$18DA	$0800	    			SUBLW	0
$18DC	$	L_calcMotorPosition_112:
$18DC	$E311	    			BNC	L179_ex_L_calcMotorPosition_26
$18DE	$0E80	    			MOVLW	128
$18E0	$0A77	    			XORLW	119
$18E2	$6E00	    			MOVWF	STACK_0, 0
$18E4	$0E80	    			MOVLW	128
$18E6	$0100	    			MOVLB	0
$18E8	$19B2	    			XORWF	_pid_motor+7, 0, 1
$18EA	$5C00	    			SUBWF	STACK_0, 0, 0
$18EC	$E108	    			BNZ	L_calcMotorPosition_113
$18EE	$51B1	    			MOVF	_pid_motor+6, 0, 1
$18F0	$0835	    			SUBLW	53
$18F2	$E105	    			BNZ	L_calcMotorPosition_113
$18F4	$51B0	    			MOVF	_pid_motor+5, 0, 1
$18F6	$0894	    			SUBLW	148
$18F8	$E102	    			BNZ	L_calcMotorPosition_113
$18FA	$51AF	    			MOVF	_pid_motor+4, 0, 1
$18FC	$0800	    			SUBLW	0
$18FE	$	L_calcMotorPosition_113:
$18FE	$E211	    			BC	L_calcMotorPosition_26
$1900	$	L179_ex_L_calcMotorPosition_26:
;extruder.c,426 :: 			axis_adjust = -AXIS_ADJUST;
$1900	$0E00	    			MOVLW	0
$1902	$0101	    			MOVLB	1
$1904	$6F70	    			MOVWF	calcMotorPosition_axis_adjust_L0, 1
$1906	$0E7C	    			MOVLW	124
$1908	$6F71	    			MOVWF	calcMotorPosition_axis_adjust_L0+1, 1
$190A	$0E28	    			MOVLW	40
$190C	$6F72	    			MOVWF	calcMotorPosition_axis_adjust_L0+2, 1
$190E	$0EE8	    			MOVLW	232
$1910	$6F73	    			MOVWF	calcMotorPosition_axis_adjust_L0+3, 1
;extruder.c,427 :: 			turn_adjust = -TURN_ADJUST;
$1912	$0EC0	    			MOVLW	192
$1914	$6F74	    			MOVWF	calcMotorPosition_turn_adjust_L0, 1
$1916	$0EF2	    			MOVLW	242
$1918	$6F75	    			MOVWF	calcMotorPosition_turn_adjust_L0+1, 1
$191A	$0EFC	    			MOVLW	252
$191C	$6F76	    			MOVWF	calcMotorPosition_turn_adjust_L0+2, 1
$191E	$0EFF	    			MOVLW	255
$1920	$6F77	    			MOVWF	calcMotorPosition_turn_adjust_L0+3, 1
;extruder.c,428 :: 			}
$1922	$	L_calcMotorPosition_26:
;extruder.c,429 :: 			if ( pid_motor.command < AXIS_MIN || pid_motor.feedback < AXIS_MIN ){
$1922	$0E80	    			MOVLW	128
$1924	$0100	    			MOVLB	0
$1926	$19AE	    			XORWF	_pid_motor+3, 0, 1
$1928	$6E00	    			MOVWF	STACK_0, 0
$192A	$0E80	    			MOVLW	128
$192C	$0A88	    			XORLW	136
$192E	$5C00	    			SUBWF	STACK_0, 0, 0
$1930	$E108	    			BNZ	L_calcMotorPosition_114
$1932	$0ECA	    			MOVLW	202
$1934	$5DAD	    			SUBWF	_pid_motor+2, 0, 1
$1936	$E105	    			BNZ	L_calcMotorPosition_114
$1938	$0E6C	    			MOVLW	108
$193A	$5DAC	    			SUBWF	_pid_motor+1, 0, 1
$193C	$E102	    			BNZ	L_calcMotorPosition_114
$193E	$0E00	    			MOVLW	0
$1940	$5DAB	    			SUBWF	_pid_motor+0, 0, 1
$1942	$	L_calcMotorPosition_114:
$1942	$E311	    			BNC	L193_ex_L_calcMotorPosition_29
$1944	$0E80	    			MOVLW	128
$1946	$0100	    			MOVLB	0
$1948	$19B2	    			XORWF	_pid_motor+7, 0, 1
$194A	$6E00	    			MOVWF	STACK_0, 0
$194C	$0E80	    			MOVLW	128
$194E	$0A88	    			XORLW	136
$1950	$5C00	    			SUBWF	STACK_0, 0, 0
$1952	$E108	    			BNZ	L_calcMotorPosition_115
$1954	$0ECA	    			MOVLW	202
$1956	$5DB1	    			SUBWF	_pid_motor+6, 0, 1
$1958	$E105	    			BNZ	L_calcMotorPosition_115
$195A	$0E6C	    			MOVLW	108
$195C	$5DB0	    			SUBWF	_pid_motor+5, 0, 1
$195E	$E102	    			BNZ	L_calcMotorPosition_115
$1960	$0E00	    			MOVLW	0
$1962	$5DAF	    			SUBWF	_pid_motor+4, 0, 1
$1964	$	L_calcMotorPosition_115:
$1964	$E211	    			BC	L_calcMotorPosition_29
$1966	$	L193_ex_L_calcMotorPosition_29:
;extruder.c,431 :: 			axis_adjust = AXIS_ADJUST;
$1966	$0E00	    			MOVLW	0
$1968	$0101	    			MOVLB	1
$196A	$6F70	    			MOVWF	calcMotorPosition_axis_adjust_L0, 1
$196C	$0E84	    			MOVLW	132
$196E	$6F71	    			MOVWF	calcMotorPosition_axis_adjust_L0+1, 1
$1970	$0ED7	    			MOVLW	215
$1972	$6F72	    			MOVWF	calcMotorPosition_axis_adjust_L0+2, 1
$1974	$0E17	    			MOVLW	23
$1976	$6F73	    			MOVWF	calcMotorPosition_axis_adjust_L0+3, 1
;extruder.c,432 :: 			turn_adjust = TURN_ADJUST;
$1978	$0E40	    			MOVLW	64
$197A	$6F74	    			MOVWF	calcMotorPosition_turn_adjust_L0, 1
$197C	$0E0D	    			MOVLW	13
$197E	$6F75	    			MOVWF	calcMotorPosition_turn_adjust_L0+1, 1
$1980	$0E03	    			MOVLW	3
$1982	$6F76	    			MOVWF	calcMotorPosition_turn_adjust_L0+2, 1
$1984	$0E00	    			MOVLW	0
$1986	$6F77	    			MOVWF	calcMotorPosition_turn_adjust_L0+3, 1
;extruder.c,434 :: 			}
$1988	$	L_calcMotorPosition_29:
;extruder.c,435 :: 			if ( axis_adjust != 0 ){
$1988	$0E00	    			MOVLW	0
$198A	$6E00	    			MOVWF	STACK_0, 0
$198C	$0101	    			MOVLB	1
$198E	$1973	    			XORWF	calcMotorPosition_axis_adjust_L0+3, 0, 1
$1990	$E108	    			BNZ	L_calcMotorPosition_116
$1992	$5000	    			MOVF	STACK_0, 0, 0
$1994	$1972	    			XORWF	calcMotorPosition_axis_adjust_L0+2, 0, 1
$1996	$E105	    			BNZ	L_calcMotorPosition_116
$1998	$5000	    			MOVF	STACK_0, 0, 0
$199A	$1971	    			XORWF	calcMotorPosition_axis_adjust_L0+1, 0, 1
$199C	$E102	    			BNZ	L_calcMotorPosition_116
$199E	$5170	    			MOVF	calcMotorPosition_axis_adjust_L0, 0, 1
$19A0	$0A00	    			XORLW	0
$19A2	$	L_calcMotorPosition_116:
$19A2	$E029	    			BZ	L_calcMotorPosition_30
;extruder.c,436 :: 			pid_motor.command += axis_adjust;
$19A4	$0101	    			MOVLB	1
$19A6	$5170	    			MOVF	calcMotorPosition_axis_adjust_L0, 0, 1
$19A8	$0100	    			MOVLB	0
$19AA	$27AB	    			ADDWF	_pid_motor+0, 1, 1
$19AC	$0101	    			MOVLB	1
$19AE	$5171	    			MOVF	calcMotorPosition_axis_adjust_L0+1, 0, 1
$19B0	$0100	    			MOVLB	0
$19B2	$23AC	    			ADDWFC	_pid_motor+1, 1, 1
$19B4	$0101	    			MOVLB	1
$19B6	$5172	    			MOVF	calcMotorPosition_axis_adjust_L0+2, 0, 1
$19B8	$0100	    			MOVLB	0
$19BA	$23AD	    			ADDWFC	_pid_motor+2, 1, 1
$19BC	$0101	    			MOVLB	1
$19BE	$5173	    			MOVF	calcMotorPosition_axis_adjust_L0+3, 0, 1
$19C0	$0100	    			MOVLB	0
$19C2	$23AE	    			ADDWFC	_pid_motor+3, 1, 1
;extruder.c,437 :: 			pid_motor.feedback += axis_adjust;
$19C4	$0101	    			MOVLB	1
$19C6	$5170	    			MOVF	calcMotorPosition_axis_adjust_L0, 0, 1
$19C8	$0100	    			MOVLB	0
$19CA	$27AF	    			ADDWF	_pid_motor+4, 1, 1
$19CC	$0101	    			MOVLB	1
$19CE	$5171	    			MOVF	calcMotorPosition_axis_adjust_L0+1, 0, 1
$19D0	$0100	    			MOVLB	0
$19D2	$23B0	    			ADDWFC	_pid_motor+5, 1, 1
$19D4	$0101	    			MOVLB	1
$19D6	$5172	    			MOVF	calcMotorPosition_axis_adjust_L0+2, 0, 1
$19D8	$0100	    			MOVLB	0
$19DA	$23B1	    			ADDWFC	_pid_motor+6, 1, 1
$19DC	$0101	    			MOVLB	1
$19DE	$5173	    			MOVF	calcMotorPosition_axis_adjust_L0+3, 0, 1
$19E0	$0100	    			MOVLB	0
$19E2	$23B2	    			ADDWFC	_pid_motor+7, 1, 1
;extruder.c,438 :: 			motorTurns += turn_adjust;
$19E4	$0101	    			MOVLB	1
$19E6	$5174	    			MOVF	calcMotorPosition_turn_adjust_L0, 0, 1
$19E8	$261A	    			ADDWF	_motorTurns, 1, 0
$19EA	$5175	    			MOVF	calcMotorPosition_turn_adjust_L0+1, 0, 1
$19EC	$221B	    			ADDWFC	_motorTurns+1, 1, 0
$19EE	$5176	    			MOVF	calcMotorPosition_turn_adjust_L0+2, 0, 1
$19F0	$221C	    			ADDWFC	_motorTurns+2, 1, 0
$19F2	$5177	    			MOVF	calcMotorPosition_turn_adjust_L0+3, 0, 1
$19F4	$221D	    			ADDWFC	_motorTurns+3, 1, 0
;extruder.c,439 :: 			}
$19F6	$	L_calcMotorPosition_30:
;extruder.c,443 :: 			pid_motor.command += motorPulses;
$19F6	$5015	    			MOVF	_motorPulses, 0, 0
$19F8	$0100	    			MOVLB	0
$19FA	$27AB	    			ADDWF	_pid_motor+0, 1, 1
$19FC	$5016	    			MOVF	_motorPulses+1, 0, 0
$19FE	$23AC	    			ADDWFC	_pid_motor+1, 1, 1
$1A00	$5017	    			MOVF	_motorPulses+2, 0, 0
$1A02	$23AD	    			ADDWFC	_pid_motor+2, 1, 1
$1A04	$5018	    			MOVF	_motorPulses+3, 0, 0
$1A06	$23AE	    			ADDWFC	_pid_motor+3, 1, 1
;extruder.c,444 :: 			motorPulses = 0;
$1A08	$6A15	    			CLRF	_motorPulses, 0
$1A0A	$6A16	    			CLRF	_motorPulses+1, 0
$1A0C	$6A17	    			CLRF	_motorPulses+2, 0
$1A0E	$6A18	    			CLRF	_motorPulses+3, 0
;extruder.c,446 :: 			pid_motor.feedback = (long)(motorTurns * CNT_PER_TURN ) +
$1A10	$C01A	F000			MOVFF	_motorTurns, STACK_0
$1A14	$C01B	F001			MOVFF	_motorTurns+1, STACK_0+1
$1A18	$C01C	F002			MOVFF	_motorTurns+2, STACK_0+2
$1A1C	$C01D	F003			MOVFF	_motorTurns+3, STACK_0+3
$1A20	$0ED0	    			MOVLW	208
$1A22	$6E04	    			MOVWF	STACK_4, 0
$1A24	$0E07	    			MOVLW	7
$1A26	$6E05	    			MOVWF	STACK_4+1, 0
$1A28	$0E00	    			MOVLW	0
$1A2A	$6E06	    			MOVWF	STACK_4+2, 0
$1A2C	$6E07	    			MOVWF	STACK_4+3, 0
$1A2E	$ECA3	F006			CALL	_mul_32x32_s
;extruder.c,447 :: 			(long)(POSCNTH << 8 ) + (long)POSCNTL;
$1A32	$0E08	    			MOVLW	8
$1A34	$6E08	    			MOVWF	STACK_8, 0
$1A36	$CF67	F004			MOVFF	POSCNTH, STACK_4
$1A3A	$0E00	    			MOVLW	0
$1A3C	$6E05	    			MOVWF	STACK_4+1, 0
$1A3E	$5008	    			MOVF	STACK_8, 0, 0
$1A40	$	L_calcMotorPosition_117:
$1A40	$0100	    			MOVLB	0
$1A42	$E005	    			BZ	L_calcMotorPosition_118
$1A44	$3604	    			RLCF	STACK_4, 1, 0
$1A46	$9004	    			BCF	STACK_4, 0, 0
$1A48	$3605	    			RLCF	STACK_4+1, 1, 0
$1A4A	$0FFF	    			ADDLW	255
$1A4C	$D7F9	    			BRA	L_calcMotorPosition_117
$1A4E	$	L_calcMotorPosition_118:
$1A4E	$0100	    			MOVLB	0
$1A50	$0E00	    			MOVLW	0
$1A52	$6E06	    			MOVWF	STACK_4+2, 0
$1A54	$6E07	    			MOVWF	STACK_4+3, 0
$1A56	$5004	    			MOVF	STACK_4, 0, 0
$1A58	$2400	    			ADDWF	STACK_0, 0, 0
$1A5A	$6FAF	    			MOVWF	_pid_motor+4, 1
$1A5C	$5005	    			MOVF	STACK_4+1, 0, 0
$1A5E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$1A60	$6FB0	    			MOVWF	_pid_motor+5, 1
$1A62	$5006	    			MOVF	STACK_4+2, 0, 0
$1A64	$2002	    			ADDWFC	STACK_0+2, 0, 0
$1A66	$6FB1	    			MOVWF	_pid_motor+6, 1
$1A68	$5007	    			MOVF	STACK_4+3, 0, 0
$1A6A	$2003	    			ADDWFC	STACK_0+3, 0, 0
$1A6C	$6FB2	    			MOVWF	_pid_motor+7, 1
$1A6E	$CF66	F000			MOVFF	POSCNTL, STACK_0
$1A72	$0E00	    			MOVLW	0
$1A74	$6E01	    			MOVWF	STACK_0+1, 0
$1A76	$6E02	    			MOVWF	STACK_0+2, 0
$1A78	$6E03	    			MOVWF	STACK_0+3, 0
$1A7A	$5000	    			MOVF	STACK_0, 0, 0
$1A7C	$27AF	    			ADDWF	_pid_motor+4, 1, 1
$1A7E	$5001	    			MOVF	STACK_0+1, 0, 0
$1A80	$23B0	    			ADDWFC	_pid_motor+5, 1, 1
$1A82	$5002	    			MOVF	STACK_0+2, 0, 0
$1A84	$23B1	    			ADDWFC	_pid_motor+6, 1, 1
$1A86	$5003	    			MOVF	STACK_0+3, 0, 0
$1A88	$23B2	    			ADDWFC	_pid_motor+7, 1, 1
;extruder.c,449 :: 			}
$1A8A	$0012	    			RETURN
$1A8C	$	_setMotorDuty:
;extruder.c,386 :: 			void setMotorDuty ( int newDuty){
;extruder.c,389 :: 			unsigned int tmp2 = 0;
$1A8C	$0101	    			MOVLB	1
$1A8E	$6B72	    			CLRF	setMotorDuty_tmp2_L0, 1
$1A90	$6B73	    			CLRF	setMotorDuty_tmp2_L0+1, 1
;extruder.c,390 :: 			if ( newDuty < 0u ){
$1A92	$0E80	    			MOVLW	128
$1A94	$1971	    			XORWF	FARG_setMotorDuty+1, 0, 1
$1A96	$6E00	    			MOVWF	STACK_0, 0
$1A98	$0E80	    			MOVLW	128
$1A9A	$5C00	    			SUBWF	STACK_0, 0, 0
$1A9C	$E102	    			BNZ	L_setMotorDuty_111
$1A9E	$0E00	    			MOVLW	0
$1AA0	$5D70	    			SUBWF	FARG_setMotorDuty+0, 0, 1
$1AA2	$	L_setMotorDuty_111:
$1AA2	$E211	    			BC	L_setMotorDuty_20
;extruder.c,391 :: 			if ( MOTOR_DIR == 1 ){
$1AA4	$6A01	    			CLRF	STACK_1, 0
$1AA6	$B481	    			BTFSC	PORTB, 2, 0
$1AA8	$2A01	    			INCF	STACK_1, 1, 0
$1AAA	$5001	    			MOVF	STACK_1, 0, 0
$1AAC	$0A01	    			XORLW	1
$1AAE	$B4D8	    			BTFSC	STATUS, Z, 0
;extruder.c,392 :: 			motorDirSwitches++;
$1AB0	$2A23	    			INCF	_motorDirSwitches, 1, 0
;extruder.c,393 :: 			}
$1AB2	$	L_setMotorDuty_21:
;extruder.c,394 :: 			MOTOR_DIR = 0;
$1AB2	$0101	    			MOVLB	1
$1AB4	$9481	    			BCF	PORTB, 2, 0
;extruder.c,395 :: 			tmp2 = -newDuty;
$1AB6	$5170	    			MOVF	FARG_setMotorDuty+0, 0, 1
$1AB8	$0800	    			SUBLW	0
$1ABA	$6F72	    			MOVWF	setMotorDuty_tmp2_L0, 1
$1ABC	$C171	F173			MOVFF	FARG_setMotorDuty+1, setMotorDuty_tmp2_L0+1
$1AC0	$6AE8	    			CLRF	WREG, 0
$1AC2	$5773	    			SUBFWB	setMotorDuty_tmp2_L0+1, 1, 1
;extruder.c,396 :: 			}
$1AC4	$D00E	    			BRA	L_setMotorDuty_22
$1AC6	$	L_setMotorDuty_20:
;extruder.c,398 :: 			if ( MOTOR_DIR == 0 ){
$1AC6	$0101	    			MOVLB	1
$1AC8	$6A01	    			CLRF	STACK_1, 0
$1ACA	$B481	    			BTFSC	PORTB, 2, 0
$1ACC	$2A01	    			INCF	STACK_1, 1, 0
$1ACE	$5001	    			MOVF	STACK_1, 0, 0
$1AD0	$0A00	    			XORLW	0
$1AD2	$B4D8	    			BTFSC	STATUS, Z, 0
;extruder.c,399 :: 			motorDirSwitches++;
$1AD4	$2A23	    			INCF	_motorDirSwitches, 1, 0
;extruder.c,400 :: 			}
$1AD6	$	L_setMotorDuty_23:
;extruder.c,401 :: 			MOTOR_DIR = 1;
$1AD6	$0101	    			MOVLB	1
$1AD8	$8481	    			BSF	PORTB, 2, 0
;extruder.c,402 :: 			tmp2 = newDuty;
$1ADA	$C170	F172			MOVFF	FARG_setMotorDuty+0, setMotorDuty_tmp2_L0
$1ADE	$C171	F173			MOVFF	FARG_setMotorDuty+1, setMotorDuty_tmp2_L0+1
;extruder.c,403 :: 			}
$1AE2	$	L_setMotorDuty_22:
;extruder.c,409 :: 			PDC0H = Hi(tmp2);
$1AE2	$C173	FF78			MOVFF	setMotorDuty_tmp2_L0+1, PDC0H
;extruder.c,410 :: 			PDC0L = Lo(tmp2);
$1AE6	$C172	FF79			MOVFF	setMotorDuty_tmp2_L0, PDC0L
;extruder.c,412 :: 			}
$1AEA	$0012	    			RETURN
$0018	$	_interrupt_low:
$0018	$C00E	F291			MOVFF	STACK_14, LOW_STSAVED_14
$001C	$C00D	F290			MOVFF	STACK_13, LOW_STSAVED_13
$0020	$C00C	F28F			MOVFF	STACK_12, LOW_STSAVED_12
$0024	$C00B	F28E			MOVFF	STACK_11, LOW_STSAVED_11
$0028	$C00A	F28D			MOVFF	STACK_10, LOW_STSAVED_10
$002C	$C009	F28C			MOVFF	STACK_9, LOW_STSAVED_9
$0030	$C008	F28B			MOVFF	STACK_8, LOW_STSAVED_8
$0034	$C007	F28A			MOVFF	STACK_7, LOW_STSAVED_7
$0038	$C006	F289			MOVFF	STACK_6, LOW_STSAVED_6
$003C	$C005	F288			MOVFF	STACK_5, LOW_STSAVED_5
$0040	$C004	F287			MOVFF	STACK_4, LOW_STSAVED_4
$0044	$C003	F286			MOVFF	STACK_3, LOW_STSAVED_3
$0048	$C002	F285			MOVFF	STACK_2, LOW_STSAVED_2
$004C	$C001	F284			MOVFF	STACK_1, LOW_STSAVED_1
$0050	$C000	F283			MOVFF	STACK_0, LOW_STSAVED_0
$0054	$CFE8	F169			MOVFF	WREG, ?Low_saveWERG
$0058	$CFD8	F16A			MOVFF	STATUS, ?Low_saveSTATUS
$005C	$CFE0	F16B			MOVFF	BSR, ?Low_saveBSR
$0060	$CFE9	F165			MOVFF	FSR0L, ?saveFSR0
$0064	$CFEA	F166			MOVFF	FSR0H, ?saveFSR0+1
$0068	$CFE1	F167			MOVFF	FSR1L, ?saveFSR1
$006C	$CFE2	F168			MOVFF	FSR1H, ?saveFSR1+1
;extruder.c,572 :: 			void interrupt_low(void){
;extruder.c,578 :: 			if ( INTCON.TMR0IF ){  //timer0, 60 hz
$0070	$A4F2	    			BTFSS	INTCON, 2, 0
$0072	$D036	    			BRA	L_interrupt_low_38
;extruder.c,581 :: 			dutyInterruptProc();
$0074	$ECD7	F006			CALL	_dutyInterruptProc
;extruder.c,588 :: 			if ( tempCount++ == 60u ){
$0078	$C024	F001			MOVFF	_tempCount, STACK_1
$007C	$2A24	    			INCF	_tempCount, 1, 0
$007E	$5001	    			MOVF	STACK_1, 0, 0
$0080	$0A3C	    			XORLW	60
$0082	$E11F	    			BNZ	L_interrupt_low_39
;extruder.c,590 :: 			readTemp();
$0084	$ECE5	F006			CALL	_readTemp
;extruder.c,592 :: 			tempCount = 0;
$0088	$6A24	    			CLRF	_tempCount, 0
;extruder.c,594 :: 			calc_pid(&pid_heater);
$008A	$0E61	    			MOVLW	_pid_heater
$008C	$0101	    			MOVLB	1
$008E	$6F70	    			MOVWF	FARG_calc_pid+0, 1
$0090	$0E00	    			MOVLW	@_pid_heater
$0092	$6F71	    			MOVWF	FARG_calc_pid+1, 1
$0094	$EC3E	F007			CALL	_calc_pid
;extruder.c,597 :: 			if ( pid_heater.output > 0 && heaterGlobalEnable == 1){
$0098	$0E80	    			MOVLW	128
$009A	$6E00	    			MOVWF	STACK_0, 0
$009C	$0E80	    			MOVLW	128
$009E	$0100	    			MOVLB	0
$00A0	$19A8	    			XORWF	_pid_heater+71, 0, 1
$00A2	$5C00	    			SUBWF	STACK_0, 0, 0
$00A4	$E102	    			BNZ	L_interrupt_low_121
$00A6	$51A7	    			MOVF	_pid_heater+70, 0, 1
$00A8	$0800	    			SUBLW	0
$00AA	$	L_interrupt_low_121:
$00AA	$E208	    			BC	L_interrupt_low_42
$00AC	$5021	    			MOVF	_heaterGlobalEnable, 0, 0
$00AE	$0A01	    			XORLW	1
$00B0	$E105	    			BNZ	L_interrupt_low_42
$00B2	$	L271_ex_L_interrupt_low_42:
;extruder.c,598 :: 			setDuty(pid_heater.output);
$00B2	$C0A7	F05F			MOVFF	_pid_heater+70, FARG_setDuty+0
$00B6	$ECFA	F00B			CALL	_setDuty
;extruder.c,599 :: 			}
$00BA	$D003	    			BRA	L_interrupt_low_43
$00BC	$	L_interrupt_low_42:
;extruder.c,601 :: 			setDuty(0);
$00BC	$6A5F	    			CLRF	FARG_setDuty+0, 0
$00BE	$ECFA	F00B			CALL	_setDuty
;extruder.c,602 :: 			}
$00C2	$	L_interrupt_low_43:
;extruder.c,603 :: 			}
$00C2	$	L_interrupt_low_39:
;extruder.c,607 :: 			if ( debugHeaterDuty != 0u ){
$00C2	$0E00	    			MOVLW	0
$00C4	$1826	    			XORWF	_debugHeaterDuty+1, 0, 0
$00C6	$E102	    			BNZ	L_interrupt_low_122
$00C8	$0E00	    			MOVLW	0
$00CA	$1825	    			XORWF	_debugHeaterDuty, 0, 0
$00CC	$	L_interrupt_low_122:
$00CC	$E004	    			BZ	L_interrupt_low_44
;extruder.c,608 :: 			setDuty((unsigned short)debugHeaterDuty);
$00CE	$C025	F05F			MOVFF	_debugHeaterDuty, FARG_setDuty+0
$00D2	$ECFA	F00B			CALL	_setDuty
;extruder.c,609 :: 			}
$00D6	$	L_interrupt_low_44:
;extruder.c,614 :: 			TMR0H = 0x5D;
$00D6	$0E5D	    			MOVLW	93
$00D8	$6ED7	    			MOVWF	TMR0H, 0
;extruder.c,615 :: 			TMR0L = 0x3D;
$00DA	$0E3D	    			MOVLW	61
$00DC	$6ED6	    			MOVWF	TMR0L, 0
;extruder.c,617 :: 			INTCON.TMR0IF = 0;
$00DE	$94F2	    			BCF	INTCON, 2, 0
;extruder.c,618 :: 			}
$00E0	$	L_interrupt_low_38:
;extruder.c,619 :: 			if (PIR1.TMR1IF ){  //timer 1, 1khz
$00E0	$A09E	    			BTFSS	PIR1, 0, 0
$00E2	$D062	    			BRA	L_interrupt_low_45
;extruder.c,627 :: 			if ( velocityControlMode == 1u){
$00E4	$5027	    			MOVF	_velocityControlMode, 0, 0
$00E6	$0A01	    			XORLW	1
$00E8	$E103	    			BNZ	L_interrupt_low_46
;extruder.c,628 :: 			calcMotorVelocity();
$00EA	$EC04	F00C			CALL	_calcMotorVelocity
;extruder.c,629 :: 			}
$00EE	$D003	    			BRA	L_interrupt_low_47
$00F0	$	L_interrupt_low_46:
;extruder.c,631 :: 			calcMotorPosition();
$00F0	$0100	    			MOVLB	0
$00F2	$EC55	F00C			CALL	_calcMotorPosition
;extruder.c,632 :: 			}
$00F6	$	L_interrupt_low_47:
;extruder.c,636 :: 			if ( debugMotorSpeed != 0u && pid_motor.enable.F0 == 1 && motorGlobalEnable == 1 ) {
$00F6	$0100	    			MOVLB	0
$00F8	$0E00	    			MOVLW	0
$00FA	$1829	    			XORWF	_debugMotorSpeed+1, 0, 0
$00FC	$E102	    			BNZ	L_interrupt_low_123
$00FE	$0E00	    			MOVLW	0
$0100	$1828	    			XORWF	_debugMotorSpeed, 0, 0
$0102	$	L_interrupt_low_123:
$0102	$0100	    			MOVLB	0
$0104	$E012	    			BZ	L_interrupt_low_50
$0106	$0E01	    			MOVLW	1
$0108	$15F3	    			ANDWF	_pid_motor+72, 0, 1
$010A	$6E01	    			MOVWF	STACK_1, 0
$010C	$5001	    			MOVF	STACK_1, 0, 0
$010E	$0A01	    			XORLW	1
$0110	$E10C	    			BNZ	L_interrupt_low_50
$0112	$502A	    			MOVF	_motorGlobalEnable, 0, 0
$0114	$0A01	    			XORLW	1
$0116	$E109	    			BNZ	L_interrupt_low_50
$0118	$	L311_ex_L_interrupt_low_50:
;extruder.c,637 :: 			pid_motor.command += debugMotorSpeed;
$0118	$5028	    			MOVF	_debugMotorSpeed, 0, 0
$011A	$27AB	    			ADDWF	_pid_motor+0, 1, 1
$011C	$5029	    			MOVF	_debugMotorSpeed+1, 0, 0
$011E	$23AC	    			ADDWFC	_pid_motor+1, 1, 1
$0120	$0E00	    			MOVLW	0
$0122	$BE29	    			BTFSC	_debugMotorSpeed+1, 7, 0
$0124	$0EFF	    			MOVLW	255
$0126	$23AD	    			ADDWFC	_pid_motor+2, 1, 1
$0128	$23AE	    			ADDWFC	_pid_motor+3, 1, 1
;extruder.c,638 :: 			}
$012A	$	L_interrupt_low_50:
;extruder.c,643 :: 			if ( motorGlobalEnable == 1 ){
$012A	$0100	    			MOVLB	0
$012C	$502A	    			MOVF	_motorGlobalEnable, 0, 0
$012E	$0A01	    			XORLW	1
$0130	$E115	    			BNZ	L_interrupt_low_51
;extruder.c,644 :: 			if ( pid_heater.feedback > MOTOR_SAFE_TEMP ){
$0132	$0E80	    			MOVLW	128
$0134	$6E00	    			MOVWF	STACK_0, 0
$0136	$0E80	    			MOVLW	128
$0138	$1968	    			XORWF	_pid_heater+7, 0, 1
$013A	$5C00	    			SUBWF	STACK_0, 0, 0
$013C	$E108	    			BNZ	L_interrupt_low_124
$013E	$5167	    			MOVF	_pid_heater+6, 0, 1
$0140	$0800	    			SUBLW	0
$0142	$E105	    			BNZ	L_interrupt_low_124
$0144	$5166	    			MOVF	_pid_heater+5, 0, 1
$0146	$0800	    			SUBLW	0
$0148	$E102	    			BNZ	L_interrupt_low_124
$014A	$5165	    			MOVF	_pid_heater+4, 0, 1
$014C	$0801	    			SUBLW	1
$014E	$	L_interrupt_low_124:
$014E	$E203	    			BC	L_interrupt_low_52
;extruder.c,645 :: 			pid_motor.enable.F0 = 1;
$0150	$81F3	    			BSF	_pid_motor+72, 0, 1
;extruder.c,646 :: 			FAULT_OUT = 0;
$0152	$9A82	    			BCF	PORTC, 5, 0
;extruder.c,647 :: 			}
$0154	$D002	    			BRA	L_interrupt_low_53
$0156	$	L_interrupt_low_52:
;extruder.c,649 :: 			FAULT_OUT = 1;
$0156	$0100	    			MOVLB	0
$0158	$8A82	    			BSF	PORTC, 5, 0
;extruder.c,650 :: 			}
$015A	$	L_interrupt_low_53:
;extruder.c,651 :: 			}
$015A	$D003	    			BRA	L_interrupt_low_54
$015C	$	L_interrupt_low_51:
;extruder.c,653 :: 			pid_motor.enable.F0 = 0;
$015C	$0100	    			MOVLB	0
$015E	$91F3	    			BCF	_pid_motor+72, 0, 1
;extruder.c,654 :: 			FAULT_OUT = 1;
$0160	$8A82	    			BSF	PORTC, 5, 0
;extruder.c,655 :: 			}
$0162	$	L_interrupt_low_54:
;extruder.c,656 :: 			calc_pid(&pid_motor);
$0162	$0EAB	    			MOVLW	_pid_motor
$0164	$0101	    			MOVLB	1
$0166	$6F70	    			MOVWF	FARG_calc_pid+0, 1
$0168	$0E00	    			MOVLW	@_pid_motor
$016A	$6F71	    			MOVWF	FARG_calc_pid+1, 1
$016C	$EC3E	F007			CALL	_calc_pid
;extruder.c,657 :: 			setMotorDuty(pid_motor.output );
$0170	$C0F1	F170			MOVFF	_pid_motor+70, FARG_setMotorDuty+0
$0174	$C0F2	F171			MOVFF	_pid_motor+71, FARG_setMotorDuty+1
$0178	$EC46	F00D			CALL	_setMotorDuty
;extruder.c,669 :: 			if ( velocityControlMode == 1 ){
$017C	$5027	    			MOVF	_velocityControlMode, 0, 0
$017E	$0A01	    			XORLW	1
$0180	$E10D	    			BNZ	L_interrupt_low_55
;extruder.c,670 :: 			motorTurns = 0;
$0182	$6A1A	    			CLRF	_motorTurns, 0
$0184	$6A1B	    			CLRF	_motorTurns+1, 0
$0186	$6A1C	    			CLRF	_motorTurns+2, 0
$0188	$6A1D	    			CLRF	_motorTurns+3, 0
;extruder.c,671 :: 			pid_motor.feedback = 0;
$018A	$0100	    			MOVLB	0
$018C	$6BAF	    			CLRF	_pid_motor+4, 1
$018E	$6BB0	    			CLRF	_pid_motor+5, 1
$0190	$6BB1	    			CLRF	_pid_motor+6, 1
$0192	$6BB2	    			CLRF	_pid_motor+7, 1
;extruder.c,672 :: 			pid_motor.command = 0;
$0194	$6BAB	    			CLRF	_pid_motor+0, 1
$0196	$6BAC	    			CLRF	_pid_motor+1, 1
$0198	$6BAD	    			CLRF	_pid_motor+2, 1
$019A	$6BAE	    			CLRF	_pid_motor+3, 1
;extruder.c,673 :: 			}
$019C	$	L_interrupt_low_55:
;extruder.c,685 :: 			TMR1H = 0xE0;
$019C	$0100	    			MOVLB	0
$019E	$0EE0	    			MOVLW	224
$01A0	$6ECF	    			MOVWF	TMR1H, 0
;extruder.c,686 :: 			TMR1L = 0x9F; //1khz       dmm reports 750 hz, 33% bandwidth
$01A2	$0E9F	    			MOVLW	159
$01A4	$6ECE	    			MOVWF	TMR1L, 0
;extruder.c,687 :: 			PIR1.TMR1IF = 0;
$01A6	$909E	    			BCF	PIR1, 0, 0
;extruder.c,689 :: 			}
$01A8	$	L_interrupt_low_45:
;extruder.c,691 :: 			}
$01A8	$	L_Low_Interrupt_end:
$01A8	$0100	    			MOVLB	0
$01AA	$C169	FFE8			MOVFF	?Low_saveWERG, WREG
$01AE	$C16A	FFD8			MOVFF	?Low_saveSTATUS, STATUS
$01B2	$C16B	FFE0			MOVFF	?Low_saveBSR, BSR
$01B6	$C165	FFE9			MOVFF	?saveFSR0, FSR0L
$01BA	$C166	FFEA			MOVFF	?saveFSR0+1, FSR0H
$01BE	$C167	FFE1			MOVFF	?saveFSR1, FSR1L
$01C2	$C168	FFE2			MOVFF	?saveFSR1+1, FSR1H
$01C6	$C291	F00E			MOVFF	LOW_STSAVED_14, STACK_14
$01CA	$C290	F00D			MOVFF	LOW_STSAVED_13, STACK_13
$01CE	$C28F	F00C			MOVFF	LOW_STSAVED_12, STACK_12
$01D2	$C28E	F00B			MOVFF	LOW_STSAVED_11, STACK_11
$01D6	$C28D	F00A			MOVFF	LOW_STSAVED_10, STACK_10
$01DA	$C28C	F009			MOVFF	LOW_STSAVED_9, STACK_9
$01DE	$C28B	F008			MOVFF	LOW_STSAVED_8, STACK_8
$01E2	$C28A	F007			MOVFF	LOW_STSAVED_7, STACK_7
$01E6	$C289	F006			MOVFF	LOW_STSAVED_6, STACK_6
$01EA	$C288	F005			MOVFF	LOW_STSAVED_5, STACK_5
$01EE	$C287	F004			MOVFF	LOW_STSAVED_4, STACK_4
$01F2	$C286	F003			MOVFF	LOW_STSAVED_3, STACK_3
$01F6	$C285	F002			MOVFF	LOW_STSAVED_2, STACK_2
$01FA	$C284	F001			MOVFF	LOW_STSAVED_1, STACK_1
$01FE	$C283	F000			MOVFF	LOW_STSAVED_0, STACK_0
$0202	$0010	    			RETFIE	0
$1AEC	$	_Usart_Write:
$1AEC	$	L_Usart_Write_3:
$1AEC	$6A01	    			CLRF	STACK_1, 0
$1AEE	$B2AC	    			BTFSC	TXSTA, 1, 0
$1AF0	$2A01	    			INCF	STACK_1, 1, 0
$1AF2	$5001	    			MOVF	STACK_1, 0, 0
$1AF4	$0A00	    			XORLW	0
$1AF6	$E102	    			BNZ	L_Usart_Write_4
$1AF8	$0000	    			NOP
$1AFA	$D7F8	    			BRA	L_Usart_Write_3
$1AFC	$	L_Usart_Write_4:
$1AFC	$C279	FFAD			MOVFF	FARG_Usart_Write+0, TXREG
$1B00	$0012	    			RETURN
$1B02	$	_strcpy:
$1B02	$C279	F27D			MOVFF	FARG_strcpy+0, strcpy_cp_L0
$1B06	$C27A	F27E			MOVFF	FARG_strcpy+1, strcpy_cp_L0+1
$1B0A	$	L_strcpy_31:
$1B0A	$C27D	F002			MOVFF	strcpy_cp_L0, STACK_2
$1B0E	$C27E	F003			MOVFF	strcpy_cp_L0+1, STACK_2+1
$1B12	$0102	    			MOVLB	2
$1B14	$4B7D	    			INFSNZ	strcpy_cp_L0, 1, 1
$1B16	$2B7E	    			INCF	strcpy_cp_L0+1, 1, 1
$1B18	$C27B	FFE9			MOVFF	FARG_strcpy+2, FSR0L
$1B1C	$C27C	FFEA			MOVFF	FARG_strcpy+3, FSR0L+1
$1B20	$4B7B	    			INFSNZ	FARG_strcpy+2, 1, 1
$1B22	$2B7C	    			INCF	FARG_strcpy+3, 1, 1
$1B24	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1B28	$C002	FFE1			MOVFF	STACK_2, FSR1L
$1B2C	$C003	FFE2			MOVFF	STACK_2+1, FSR1H
$1B30	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$1B34	$C002	FFE9			MOVFF	STACK_2, FSR0L
$1B38	$C003	FFEA			MOVFF	STACK_2+1, FSR0H
$1B3C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$1B40	$5200	    			MOVF	STACK_0, 1, 0
$1B42	$E1E3	    			BNZ	L_strcpy_31
$1B44	$	L_strcpy_32:
$1B44	$C279	F000			MOVFF	FARG_strcpy+0, STACK_0
$1B48	$C27A	F001			MOVFF	FARG_strcpy+1, STACK_0+1
$1B4C	$0012	    			RETURN
$1B4E	$	_Div_8x8_U:
$1B4E	$0100	    			MOVLB	0
$1B50	$6B08	    			CLRF	STACK_8, F
$1B52	$0E08	    			MOVLW	8
$1B54	$6E0C	    			MOVWF	STACK_12, 0
$1B56	$3400	    			RLCF	STACK_0, W, 0
$1B58	$3608	    			RLCF	STACK_8, F, 0
$1B5A	$5004	    			MOVF	STACK_4, W, 0
$1B5C	$5E08	    			SUBWF	STACK_8, F, 0
$1B5E	$B0D8	    			BTFSC	STATUS, C, 0
$1B60	$EFB4	F00D			GOTO	$+3
$1B64	$2608	    			ADDWF	STACK_8, F, 0
$1B66	$90D8	    			BCF	STATUS, C, 0
$1B68	$3600	    			RLCF	STACK_0, F, 0
$1B6A	$2E0C	    			DECFSZ	STACK_12, F, 0
$1B6C	$EFAB	F00D			GOTO	$-10
$1B70	$0012	    			RETURN
$1B72	$	_isspace:
$1B72	$0102	    			MOVLB	2
$1B74	$5179	    			MOVF	FARG_isspace+0, 0, 1
$1B76	$0A20	    			XORLW	32
$1B78	$E008	    			BZ	L_isspace_15
$1B7A	$5179	    			MOVF	FARG_isspace+0, 0, 1
$1B7C	$080D	    			SUBLW	13
$1B7E	$E303	    			BNC	L95_ex_L_isspace_15
$1B80	$0E09	    			MOVLW	9
$1B82	$5D79	    			SUBWF	FARG_isspace+0, 0, 1
$1B84	$E202	    			BC	L_isspace_15
$1B86	$	L95_ex_L_isspace_15:
$1B86	$6A00	    			CLRF	STACK_0, 0
$1B88	$D002	    			BRA	L_isspace_14
$1B8A	$	L_isspace_15:
$1B8A	$0E01	    			MOVLW	1
$1B8C	$6E00	    			MOVWF	STACK_0, 0
$1B8E	$	L_isspace_14:
$1B8E	$0012	    			RETURN
$1B90	$	_isdigit:
$1B90	$0102	    			MOVLB	2
$1B92	$5179	    			MOVF	FARG_isdigit+0, 0, 1
$1B94	$0839	    			SUBLW	57
$1B96	$E307	    			BNC	L_isdigit_9
$1B98	$0E30	    			MOVLW	48
$1B9A	$5D79	    			SUBWF	FARG_isdigit+0, 0, 1
$1B9C	$E304	    			BNC	L_isdigit_9
$1B9E	$0E01	    			MOVLW	1
$1BA0	$6E00	    			MOVWF	STACK_0, 0
$1BA2	$EFD4	F00D			GOTO	L_isdigit_8
$1BA6	$	L_isdigit_9:
$1BA6	$6A00	    			CLRF	STACK_0, 0
$1BA8	$	L_isdigit_8:
$1BA8	$0012	    			RETURN
$1BAA	$	_Equals_Double:
$1BAA	$0100	    			MOVLB	0
$1BAC	$5003	    			MOVF	STACK_3, W, 0
$1BAE	$1807	    			XORWF	STACK_7, W, 0
$1BB0	$A4D8	    			BTFSS	STATUS, Z, 0
$1BB2	$EFEA	F00D			GOTO	EQU_FALSE
$1BB6	$5002	    			MOVF	STACK_2, W, 0
$1BB8	$1806	    			XORWF	STACK_6, W, 0
$1BBA	$A4D8	    			BTFSS	STATUS, Z, 0
$1BBC	$EFEA	F00D			GOTO	EQU_FALSE
$1BC0	$5001	    			MOVF	STACK_1, W, 0
$1BC2	$1805	    			XORWF	STACK_5, W, 0
$1BC4	$A4D8	    			BTFSS	STATUS, Z, 0
$1BC6	$EFEA	F00D			GOTO	EQU_FALSE
$1BCA	$5000	    			MOVF	STACK_0, W, 0
$1BCC	$1804	    			XORWF	STACK_4, W, 0
$1BCE	$B4D8	    			BTFSC	STATUS, Z, 0
$1BD0	$84D8	    			BSF	STATUS, Z, 0
$1BD2	$0012	    			RETURN
$1BD4	$	EQU_FALSE:
$1BD4	$94D8	    			BCF	STATUS, Z, 0
$1BD6	$0012	    			RETURN
$1BD8	$0012	    			RETURN
$1BDA	$	_Eeprom_Read:
$1BDA	$9CA6	    			BCF	EECON1, 6, 0
$1BDC	$C261	FFA9			MOVFF	FARG_Eeprom_Read+0, EEADR
$1BE0	$9EA6	    			BCF	EECON1, 7, 0
$1BE2	$80A6	    			BSF	EECON1, 0, 0
$1BE4	$CFA8	F000			MOVFF	EEDATA, STACK_0
$1BE8	$0012	    			RETURN
$1BEA	$	_USART_Send_String:
;extruder.c,255 :: 			void USART_Send_String( char *data){
;extruder.c,257 :: 			while( *data != 0u ){
$1BEA	$	L_USART_Send_String_2:
$1BEA	$C261	FFE9			MOVFF	FARG_USART_Send_String+0, FSR0L
$1BEE	$C262	FFEA			MOVFF	FARG_USART_Send_String+1, FSR0H
$1BF2	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$1BF6	$5001	    			MOVF	STACK_1, 0, 0
$1BF8	$0A00	    			XORLW	0
$1BFA	$E00C	    			BZ	L_USART_Send_String_3
;extruder.c,258 :: 			c = *data;
$1BFC	$C261	FFE9			MOVFF	FARG_USART_Send_String+0, FSR0L
$1C00	$C262	FFEA			MOVFF	FARG_USART_Send_String+1, FSR0H
$1C04	$CFEE	F279			MOVFF	POSTINC0, FARG_Usart_Write+0
;extruder.c,259 :: 			USART_Write(c);
$1C08	$EC76	F00D			CALL	_Usart_Write
;extruder.c,260 :: 			data++;
$1C0C	$0102	    			MOVLB	2
$1C0E	$4B61	    			INFSNZ	FARG_USART_Send_String+0, 1, 1
$1C10	$2B62	    			INCF	FARG_USART_Send_String+1, 1, 1
;extruder.c,261 :: 			}
$1C12	$D7EB	    			BRA	L_USART_Send_String_2
$1C14	$	L_USART_Send_String_3:
;extruder.c,263 :: 			}
$1C14	$0012	    			RETURN
$1C16	$	_FloatToStr:
$1C16	$0E4E	    			MOVLW	78
$1C18	$0102	    			MOVLB	2
$1C1A	$6F67	    			MOVWF	lstr1_conv+0, 1
$1C1C	$0E61	    			MOVLW	97
$1C1E	$6F68	    			MOVWF	lstr1_conv+1, 1
$1C20	$0E4E	    			MOVLW	78
$1C22	$6F69	    			MOVWF	lstr1_conv+2, 1
$1C24	$6B6A	    			CLRF	lstr1_conv+3, 1
$1C26	$0E30	    			MOVLW	48
$1C28	$6F6B	    			MOVWF	lstr2_conv+0, 1
$1C2A	$6B6C	    			CLRF	lstr2_conv+1, 1
$1C2C	$0E49	    			MOVLW	73
$1C2E	$6F6D	    			MOVWF	lstr3_conv+0, 1
$1C30	$0E4E	    			MOVLW	78
$1C32	$6F6E	    			MOVWF	lstr3_conv+1, 1
$1C34	$0E46	    			MOVLW	70
$1C36	$6F6F	    			MOVWF	lstr3_conv+2, 1
$1C38	$6B70	    			CLRF	lstr3_conv+3, 1
$1C3A	$6B71	    			CLRF	FloatToStr_bpoint_L0, 1
$1C3C	$6B74	    			CLRF	FloatToStr_dexpon_L0, 1
$1C3E	$C261	F275			MOVFF	FARG_FloatToStr+0, FloatToStr_un_L0
$1C42	$C262	F276			MOVFF	FARG_FloatToStr+1, FloatToStr_un_L0+1
$1C46	$C263	F277			MOVFF	FARG_FloatToStr+2, FloatToStr_un_L0+2
$1C4A	$C264	F278			MOVFF	FARG_FloatToStr+3, FloatToStr_un_L0+3
$1C4E	$5178	    			MOVF	FloatToStr_un_L0+3, 0, 1
$1C50	$0AFF	    			XORLW	255
$1C52	$E108	    			BNZ	L_FloatToStr_59
$1C54	$5177	    			MOVF	FloatToStr_un_L0+2, 0, 1
$1C56	$0AFF	    			XORLW	255
$1C58	$E105	    			BNZ	L_FloatToStr_59
$1C5A	$5176	    			MOVF	FloatToStr_un_L0+1, 0, 1
$1C5C	$0AFF	    			XORLW	255
$1C5E	$E102	    			BNZ	L_FloatToStr_59
$1C60	$5175	    			MOVF	FloatToStr_un_L0, 0, 1
$1C62	$0AFF	    			XORLW	255
$1C64	$	L_FloatToStr_59:
$1C64	$E10E	    			BNZ	L_FloatToStr_29
$1C66	$C265	F279			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$1C6A	$C266	F27A			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$1C6E	$0E67	    			MOVLW	lstr1_conv
$1C70	$0102	    			MOVLB	2
$1C72	$6F7B	    			MOVWF	FARG_strcpy+2, 1
$1C74	$0E02	    			MOVLW	@lstr1_conv
$1C76	$6F7C	    			MOVWF	FARG_strcpy+3, 1
$1C78	$EC81	F00D			CALL	_strcpy
$1C7C	$0E03	    			MOVLW	3
$1C7E	$6E00	    			MOVWF	STACK_0, 0
$1C80	$0012	    			RETURN
$1C82	$	L_FloatToStr_29:
$1C82	$0E01	    			MOVLW	1
$1C84	$0102	    			MOVLB	2
$1C86	$6F72	    			MOVWF	FloatToStr_i_L0, 1
$1C88	$AF77	    			BTFSS	FloatToStr_un_L0+2, 7, 1
$1C8A	$D00A	    			BRA	L_FloatToStr_30
$1C8C	$7F77	    			BTG	FloatToStr_un_L0+2, 7, 1
$1C8E	$2B72	    			INCF	FloatToStr_i_L0, 1, 1
$1C90	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1C94	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1C98	$0E2D	    			MOVLW	45
$1C9A	$6EE6	    			MOVWF	POSTINC1, 0
$1C9C	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1C9E	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1CA0	$	L_FloatToStr_30:
$1CA0	$0E00	    			MOVLW	0
$1CA2	$6E00	    			MOVWF	STACK_0, 0
$1CA4	$0102	    			MOVLB	2
$1CA6	$1978	    			XORWF	FloatToStr_un_L0+3, 0, 1
$1CA8	$E108	    			BNZ	L_FloatToStr_60
$1CAA	$5000	    			MOVF	STACK_0, 0, 0
$1CAC	$1977	    			XORWF	FloatToStr_un_L0+2, 0, 1
$1CAE	$E105	    			BNZ	L_FloatToStr_60
$1CB0	$5000	    			MOVF	STACK_0, 0, 0
$1CB2	$1976	    			XORWF	FloatToStr_un_L0+1, 0, 1
$1CB4	$E102	    			BNZ	L_FloatToStr_60
$1CB6	$5175	    			MOVF	FloatToStr_un_L0, 0, 1
$1CB8	$0A00	    			XORLW	0
$1CBA	$	L_FloatToStr_60:
$1CBA	$E10D	    			BNZ	L_FloatToStr_31
$1CBC	$C265	F279			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$1CC0	$C266	F27A			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$1CC4	$0E6B	    			MOVLW	lstr2_conv
$1CC6	$0102	    			MOVLB	2
$1CC8	$6F7B	    			MOVWF	FARG_strcpy+2, 1
$1CCA	$0E02	    			MOVLW	@lstr2_conv
$1CCC	$6F7C	    			MOVWF	FARG_strcpy+3, 1
$1CCE	$EC81	F00D			CALL	_strcpy
$1CD2	$6A00	    			CLRF	STACK_0, 0
$1CD4	$0012	    			RETURN
$1CD6	$	L_FloatToStr_31:
$1CD6	$0102	    			MOVLB	2
$1CD8	$5178	    			MOVF	FloatToStr_un_L0+3, 0, 1
$1CDA	$0A7F	    			XORLW	127
$1CDC	$E108	    			BNZ	L_FloatToStr_61
$1CDE	$5177	    			MOVF	FloatToStr_un_L0+2, 0, 1
$1CE0	$0A80	    			XORLW	128
$1CE2	$E105	    			BNZ	L_FloatToStr_61
$1CE4	$5176	    			MOVF	FloatToStr_un_L0+1, 0, 1
$1CE6	$0A00	    			XORLW	0
$1CE8	$E102	    			BNZ	L_FloatToStr_61
$1CEA	$5175	    			MOVF	FloatToStr_un_L0, 0, 1
$1CEC	$0A00	    			XORLW	0
$1CEE	$	L_FloatToStr_61:
$1CEE	$E10E	    			BNZ	L_FloatToStr_32
$1CF0	$C265	F279			MOVFF	FARG_FloatToStr+4, FARG_strcpy+0
$1CF4	$C266	F27A			MOVFF	FARG_FloatToStr+5, FARG_strcpy+1
$1CF8	$0E6D	    			MOVLW	lstr3_conv
$1CFA	$0102	    			MOVLB	2
$1CFC	$6F7B	    			MOVWF	FARG_strcpy+2, 1
$1CFE	$0E02	    			MOVLW	@lstr3_conv
$1D00	$6F7C	    			MOVWF	FARG_strcpy+3, 1
$1D02	$EC81	F00D			CALL	_strcpy
$1D06	$C272	F000			MOVFF	FloatToStr_i_L0, STACK_0
$1D0A	$0012	    			RETURN
$1D0C	$	L_FloatToStr_32:
$1D0C	$	L_FloatToStr_33:
$1D0C	$0E00	    			MOVLW	0
$1D0E	$6E04	    			MOVWF	STACK_4, 0
$1D10	$0E00	    			MOVLW	0
$1D12	$6E05	    			MOVWF	STACK_4+1, 0
$1D14	$0E00	    			MOVLW	0
$1D16	$6E06	    			MOVWF	STACK_4+2, 0
$1D18	$0E7F	    			MOVLW	127
$1D1A	$6E07	    			MOVWF	STACK_4+3, 0
$1D1C	$C275	F000			MOVFF	FloatToStr_un_L0, STACK_0
$1D20	$C276	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$1D24	$C277	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$1D28	$C278	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$1D2C	$ECD0	F005			CALL	_compare_double
$1D30	$0E01	    			MOVLW	1
$1D32	$B0D8	    			BTFSC	STATUS, C, 0
$1D34	$0E00	    			MOVLW	0
$1D36	$6E00	    			MOVWF	STACK_0, 0
$1D38	$5200	    			MOVF	STACK_0, 1, 0
$1D3A	$E01D	    			BZ	L_FloatToStr_34
$1D3C	$C275	F000			MOVFF	FloatToStr_un_L0, STACK_0
$1D40	$C276	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$1D44	$C277	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$1D48	$C278	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$1D4C	$0E00	    			MOVLW	0
$1D4E	$6E04	    			MOVWF	STACK_4, 0
$1D50	$0E00	    			MOVLW	0
$1D52	$6E05	    			MOVWF	STACK_4+1, 0
$1D54	$0E20	    			MOVLW	32
$1D56	$6E06	    			MOVWF	STACK_4+2, 0
$1D58	$0E82	    			MOVLW	130
$1D5A	$6E07	    			MOVWF	STACK_4+3, 0
$1D5C	$EC28	F003			CALL	_mul_32x32_fp
$1D60	$C000	F275			MOVFF	STACK_0, FloatToStr_un_L0
$1D64	$C001	F276			MOVFF	STACK_0+1, FloatToStr_un_L0+1
$1D68	$C002	F277			MOVFF	STACK_0+2, FloatToStr_un_L0+2
$1D6C	$C003	F278			MOVFF	STACK_0+3, FloatToStr_un_L0+3
$1D70	$0102	    			MOVLB	2
$1D72	$0774	    			DECF	FloatToStr_dexpon_L0, 1, 1
$1D74	$D7CB	    			BRA	L_FloatToStr_33
$1D76	$	L_FloatToStr_34:
$1D76	$	L_FloatToStr_35:
$1D76	$0102	    			MOVLB	2
$1D78	$0E00	    			MOVLW	0
$1D7A	$6E04	    			MOVWF	STACK_4, 0
$1D7C	$0E00	    			MOVLW	0
$1D7E	$6E05	    			MOVWF	STACK_4+1, 0
$1D80	$0E20	    			MOVLW	32
$1D82	$6E06	    			MOVWF	STACK_4+2, 0
$1D84	$0E82	    			MOVLW	130
$1D86	$6E07	    			MOVWF	STACK_4+3, 0
$1D88	$C275	F000			MOVFF	FloatToStr_un_L0, STACK_0
$1D8C	$C276	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$1D90	$C277	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$1D94	$C278	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$1D98	$ECD0	F005			CALL	_compare_double
$1D9C	$0E00	    			MOVLW	0
$1D9E	$B0D8	    			BTFSC	STATUS, C, 0
$1DA0	$0E01	    			MOVLW	1
$1DA2	$6E00	    			MOVWF	STACK_0, 0
$1DA4	$5200	    			MOVF	STACK_0, 1, 0
$1DA6	$E01D	    			BZ	L_FloatToStr_36
$1DA8	$C275	F000			MOVFF	FloatToStr_un_L0, STACK_0
$1DAC	$C276	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$1DB0	$C277	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$1DB4	$C278	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$1DB8	$0ECD	    			MOVLW	205
$1DBA	$6E04	    			MOVWF	STACK_4, 0
$1DBC	$0ECC	    			MOVLW	204
$1DBE	$6E05	    			MOVWF	STACK_4+1, 0
$1DC0	$0E4C	    			MOVLW	76
$1DC2	$6E06	    			MOVWF	STACK_4+2, 0
$1DC4	$0E7B	    			MOVLW	123
$1DC6	$6E07	    			MOVWF	STACK_4+3, 0
$1DC8	$EC28	F003			CALL	_mul_32x32_fp
$1DCC	$C000	F275			MOVFF	STACK_0, FloatToStr_un_L0
$1DD0	$C001	F276			MOVFF	STACK_0+1, FloatToStr_un_L0+1
$1DD4	$C002	F277			MOVFF	STACK_0+2, FloatToStr_un_L0+2
$1DD8	$C003	F278			MOVFF	STACK_0+3, FloatToStr_un_L0+3
$1DDC	$0102	    			MOVLB	2
$1DDE	$2B74	    			INCF	FloatToStr_dexpon_L0, 1, 1
$1DE0	$D7CA	    			BRA	L_FloatToStr_35
$1DE2	$	L_FloatToStr_36:
$1DE2	$0102	    			MOVLB	2
$1DE4	$0EFF	    			MOVLW	255
$1DE6	$1575	    			ANDWF	FloatToStr_un_L0, 0, 1
$1DE8	$6E05	    			MOVWF	STACK_5, 0
$1DEA	$0EFF	    			MOVLW	255
$1DEC	$1576	    			ANDWF	FloatToStr_un_L0+1, 0, 1
$1DEE	$6E06	    			MOVWF	STACK_5+1, 0
$1DF0	$0E7F	    			MOVLW	127
$1DF2	$1577	    			ANDWF	FloatToStr_un_L0+2, 0, 1
$1DF4	$6E07	    			MOVWF	STACK_5+2, 0
$1DF6	$0E00	    			MOVLW	0
$1DF8	$1578	    			ANDWF	FloatToStr_un_L0+3, 0, 1
$1DFA	$6E08	    			MOVWF	STACK_5+3, 0
$1DFC	$C005	F000			MOVFF	STACK_5, STACK_0
$1E00	$C006	F001			MOVFF	STACK_5+1, STACK_0+1
$1E04	$C007	F002			MOVFF	STACK_5+2, STACK_0+2
$1E08	$C008	F003			MOVFF	STACK_5+3, STACK_0+3
$1E0C	$3600	    			RLCF	STACK_0, 1, 0
$1E0E	$9000	    			BCF	STACK_0, 0, 0
$1E10	$3601	    			RLCF	STACK_0+1, 1, 0
$1E12	$3602	    			RLCF	STACK_0+2, 1, 0
$1E14	$3603	    			RLCF	STACK_0+3, 1, 0
$1E16	$0E00	    			MOVLW	0
$1E18	$1775	    			ANDWF	FloatToStr_un_L0, 1, 1
$1E1A	$0E00	    			MOVLW	0
$1E1C	$1776	    			ANDWF	FloatToStr_un_L0+1, 1, 1
$1E1E	$0E00	    			MOVLW	0
$1E20	$1777	    			ANDWF	FloatToStr_un_L0+2, 1, 1
$1E22	$0EFF	    			MOVLW	255
$1E24	$1778	    			ANDWF	FloatToStr_un_L0+3, 1, 1
$1E26	$5000	    			MOVF	STACK_0, 0, 0
$1E28	$1375	    			IORWF	FloatToStr_un_L0, 1, 1
$1E2A	$5001	    			MOVF	STACK_0+1, 0, 0
$1E2C	$1376	    			IORWF	FloatToStr_un_L0+1, 1, 1
$1E2E	$5002	    			MOVF	STACK_0+2, 0, 0
$1E30	$1377	    			IORWF	FloatToStr_un_L0+2, 1, 1
$1E32	$5003	    			MOVF	STACK_0+3, 0, 0
$1E34	$1378	    			IORWF	FloatToStr_un_L0+3, 1, 1
$1E36	$0E7F	    			MOVLW	127
$1E38	$5D78	    			SUBWF	FloatToStr_un_L0+3, 0, 1
$1E3A	$6E00	    			MOVWF	STACK_0, 0
$1E3C	$C000	F273			MOVFF	STACK_0, FloatToStr_d_L0
$1E40	$0E01	    			MOVLW	1
$1E42	$6F78	    			MOVWF	FloatToStr_un_L0+3, 1
$1E44	$5000	    			MOVF	STACK_0, 0, 0
$1E46	$	L_FloatToStr_62:
$1E46	$E007	    			BZ	L_FloatToStr_63
$1E48	$3775	    			RLCF	FloatToStr_un_L0, 1, 1
$1E4A	$9175	    			BCF	FloatToStr_un_L0, 0, 1
$1E4C	$3776	    			RLCF	FloatToStr_un_L0+1, 1, 1
$1E4E	$3777	    			RLCF	FloatToStr_un_L0+2, 1, 1
$1E50	$3778	    			RLCF	FloatToStr_un_L0+3, 1, 1
$1E52	$0FFF	    			ADDLW	255
$1E54	$D7F8	    			BRA	L_FloatToStr_62
$1E56	$	L_FloatToStr_63:
$1E56	$0102	    			MOVLB	2
$1E58	$5178	    			MOVF	FloatToStr_un_L0+3, 0, 1
$1E5A	$0F30	    			ADDLW	48
$1E5C	$6E00	    			MOVWF	STACK_0, 0
$1E5E	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1E62	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1E66	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$1E6A	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1E6C	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1E6E	$0E80	    			MOVLW	128
$1E70	$1974	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$1E72	$6E00	    			MOVWF	STACK_0, 0
$1E74	$0E80	    			MOVLW	128
$1E76	$0A01	    			XORLW	1
$1E78	$5C00	    			SUBWF	STACK_0, 0, 0
$1E7A	$E307	    			BNC	L358_ex_L_FloatToStr_39
$1E7C	$0E80	    			MOVLW	128
$1E7E	$0A06	    			XORLW	6
$1E80	$6E00	    			MOVWF	STACK_0, 0
$1E82	$0E80	    			MOVLW	128
$1E84	$1974	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$1E86	$5C00	    			SUBWF	STACK_0, 0, 0
$1E88	$E20A	    			BC	L_FloatToStr_39
$1E8A	$	L358_ex_L_FloatToStr_39:
$1E8A	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1E8E	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1E92	$0E2E	    			MOVLW	46
$1E94	$6EE6	    			MOVWF	POSTINC1, 0
$1E96	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1E98	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1E9A	$0E01	    			MOVLW	1
$1E9C	$6F71	    			MOVWF	FloatToStr_bpoint_L0, 1
$1E9E	$	L_FloatToStr_39:
$1E9E	$0E06	    			MOVLW	6
$1EA0	$6F73	    			MOVWF	FloatToStr_d_L0, 1
$1EA2	$	L_FloatToStr_40:
$1EA2	$5173	    			MOVF	FloatToStr_d_L0, 0, 1
$1EA4	$0A00	    			XORLW	0
$1EA6	$E03E	    			BZ	L_FloatToStr_41
$1EA8	$6B78	    			CLRF	FloatToStr_un_L0+3, 1
$1EAA	$C275	F000			MOVFF	FloatToStr_un_L0, STACK_0
$1EAE	$C276	F001			MOVFF	FloatToStr_un_L0+1, STACK_0+1
$1EB2	$C277	F002			MOVFF	FloatToStr_un_L0+2, STACK_0+2
$1EB6	$C278	F003			MOVFF	FloatToStr_un_L0+3, STACK_0+3
$1EBA	$3600	    			RLCF	STACK_0, 1, 0
$1EBC	$9000	    			BCF	STACK_0, 0, 0
$1EBE	$3601	    			RLCF	STACK_0+1, 1, 0
$1EC0	$3602	    			RLCF	STACK_0+2, 1, 0
$1EC2	$3603	    			RLCF	STACK_0+3, 1, 0
$1EC4	$3600	    			RLCF	STACK_0, 1, 0
$1EC6	$9000	    			BCF	STACK_0, 0, 0
$1EC8	$3601	    			RLCF	STACK_0+1, 1, 0
$1ECA	$3602	    			RLCF	STACK_0+2, 1, 0
$1ECC	$3603	    			RLCF	STACK_0+3, 1, 0
$1ECE	$5000	    			MOVF	STACK_0, 0, 0
$1ED0	$2775	    			ADDWF	FloatToStr_un_L0, 1, 1
$1ED2	$5001	    			MOVF	STACK_0+1, 0, 0
$1ED4	$2376	    			ADDWFC	FloatToStr_un_L0+1, 1, 1
$1ED6	$5002	    			MOVF	STACK_0+2, 0, 0
$1ED8	$2377	    			ADDWFC	FloatToStr_un_L0+2, 1, 1
$1EDA	$5003	    			MOVF	STACK_0+3, 0, 0
$1EDC	$2378	    			ADDWFC	FloatToStr_un_L0+3, 1, 1
$1EDE	$3775	    			RLCF	FloatToStr_un_L0, 1, 1
$1EE0	$9175	    			BCF	FloatToStr_un_L0, 0, 1
$1EE2	$3776	    			RLCF	FloatToStr_un_L0+1, 1, 1
$1EE4	$3777	    			RLCF	FloatToStr_un_L0+2, 1, 1
$1EE6	$3778	    			RLCF	FloatToStr_un_L0+3, 1, 1
$1EE8	$5178	    			MOVF	FloatToStr_un_L0+3, 0, 1
$1EEA	$0F30	    			ADDLW	48
$1EEC	$6E00	    			MOVWF	STACK_0, 0
$1EEE	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1EF2	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1EF6	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$1EFA	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1EFC	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1EFE	$5171	    			MOVF	FloatToStr_bpoint_L0, 0, 1
$1F00	$0A00	    			XORLW	0
$1F02	$E10E	    			BNZ	L_FloatToStr_43
$1F04	$0774	    			DECF	FloatToStr_dexpon_L0, 1, 1
$1F06	$5174	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$1F08	$0A00	    			XORLW	0
$1F0A	$E10A	    			BNZ	L_FloatToStr_44
$1F0C	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1F10	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1F14	$0E2E	    			MOVLW	46
$1F16	$6EE6	    			MOVWF	POSTINC1, 0
$1F18	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1F1A	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1F1C	$0E01	    			MOVLW	1
$1F1E	$6F71	    			MOVWF	FloatToStr_bpoint_L0, 1
$1F20	$	L_FloatToStr_44:
$1F20	$	L_FloatToStr_43:
$1F20	$	L_FloatToStr_42:
$1F20	$0773	    			DECF	FloatToStr_d_L0, 1, 1
$1F22	$D7BF	    			BRA	L_FloatToStr_40
$1F24	$	L_FloatToStr_41:
$1F24	$	L_FloatToStr_45:
$1F24	$0EFF	    			MOVLW	255
$1F26	$2565	    			ADDWF	FARG_FloatToStr+4, 0, 1
$1F28	$6EE9	    			MOVWF	FSR0L, 0
$1F2A	$0EFF	    			MOVLW	255
$1F2C	$2166	    			ADDWFC	FARG_FloatToStr+5, 0, 1
$1F2E	$6EEA	    			MOVWF	FSR0L+1, 0
$1F30	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$1F34	$5004	    			MOVF	STACK_4, 0, 0
$1F36	$0A30	    			XORLW	48
$1F38	$E105	    			BNZ	L_FloatToStr_46
$1F3A	$0E01	    			MOVLW	1
$1F3C	$5F65	    			SUBWF	FARG_FloatToStr+4, 1, 1
$1F3E	$0E00	    			MOVLW	0
$1F40	$5B66	    			SUBWFB	FARG_FloatToStr+5, 1, 1
$1F42	$D7F0	    			BRA	L_FloatToStr_45
$1F44	$	L_FloatToStr_46:
$1F44	$0EFF	    			MOVLW	255
$1F46	$2565	    			ADDWF	FARG_FloatToStr+4, 0, 1
$1F48	$6EE9	    			MOVWF	FSR0L, 0
$1F4A	$0EFF	    			MOVLW	255
$1F4C	$2166	    			ADDWFC	FARG_FloatToStr+5, 0, 1
$1F4E	$6EEA	    			MOVWF	FSR0L+1, 0
$1F50	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$1F54	$5004	    			MOVF	STACK_4, 0, 0
$1F56	$0A2E	    			XORLW	46
$1F58	$E104	    			BNZ	L_FloatToStr_47
$1F5A	$0E01	    			MOVLW	1
$1F5C	$5F65	    			SUBWF	FARG_FloatToStr+4, 1, 1
$1F5E	$0E00	    			MOVLW	0
$1F60	$5B66	    			SUBWFB	FARG_FloatToStr+5, 1, 1
$1F62	$	L_FloatToStr_47:
$1F62	$5174	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$1F64	$0A00	    			XORLW	0
$1F66	$E043	    			BZ	L_FloatToStr_48
$1F68	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1F6C	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1F70	$0E65	    			MOVLW	101
$1F72	$6EE6	    			MOVWF	POSTINC1, 0
$1F74	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1F76	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1F78	$0E80	    			MOVLW	128
$1F7A	$1974	    			XORWF	FloatToStr_dexpon_L0, 0, 1
$1F7C	$6E00	    			MOVWF	STACK_0, 0
$1F7E	$0E80	    			MOVLW	128
$1F80	$0A00	    			XORLW	0
$1F82	$5C00	    			SUBWF	STACK_0, 0, 0
$1F84	$E20B	    			BC	L_FloatToStr_49
$1F86	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1F8A	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1F8E	$0E2D	    			MOVLW	45
$1F90	$6EE6	    			MOVWF	POSTINC1, 0
$1F92	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1F94	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1F96	$5174	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$1F98	$0800	    			SUBLW	0
$1F9A	$6F74	    			MOVWF	FloatToStr_dexpon_L0, 1
$1F9C	$	L_FloatToStr_49:
$1F9C	$C274	F273			MOVFF	FloatToStr_dexpon_L0, FloatToStr_d_L0
$1FA0	$5174	    			MOVF	FloatToStr_dexpon_L0, 0, 1
$1FA2	$0809	    			SUBLW	9
$1FA4	$E211	    			BC	L_FloatToStr_50
$1FA6	$0E0A	    			MOVLW	10
$1FA8	$6E04	    			MOVWF	STACK_4, 0
$1FAA	$C273	F000			MOVFF	FloatToStr_d_L0, STACK_0
$1FAE	$ECA7	F00D			CALL	_div_8x8_u
$1FB2	$0E30	    			MOVLW	48
$1FB4	$2600	    			ADDWF	STACK_0, 1, 0
$1FB6	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1FBA	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1FBE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$1FC2	$0102	    			MOVLB	2
$1FC4	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1FC6	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1FC8	$	L_FloatToStr_50:
$1FC8	$0E0A	    			MOVLW	10
$1FCA	$6E04	    			MOVWF	STACK_4, 0
$1FCC	$C273	F000			MOVFF	FloatToStr_d_L0, STACK_0
$1FD0	$ECA7	F00D			CALL	_div_8x8_u
$1FD4	$C008	F000			MOVFF	STACK_8, STACK_0
$1FD8	$0E30	    			MOVLW	48
$1FDA	$2600	    			ADDWF	STACK_0, 1, 0
$1FDC	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1FE0	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1FE4	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$1FE8	$0102	    			MOVLB	2
$1FEA	$4B65	    			INFSNZ	FARG_FloatToStr+4, 1, 1
$1FEC	$2B66	    			INCF	FARG_FloatToStr+5, 1, 1
$1FEE	$	L_FloatToStr_48:
$1FEE	$C265	FFE1			MOVFF	FARG_FloatToStr+4, FSR1L
$1FF2	$C266	FFE2			MOVFF	FARG_FloatToStr+5, FSR1H
$1FF6	$6AE6	    			CLRF	POSTINC1, 0
$1FF8	$6A00	    			CLRF	STACK_0, 0
$1FFA	$0012	    			RETURN
$1FFC	$	_Eeprom_Write:
$1FFC	$	L_Eeprom_Write_0:
$1FFC	$A2A6	    			BTFSS	EECON1, 1, 0
$1FFE	$D002	    			BRA	L_Eeprom_Write_1
$2000	$0000	    			NOP
$2002	$D7FC	    			BRA	L_Eeprom_Write_0
$2004	$	L_Eeprom_Write_1:
$2004	$9CA6	    			BCF	EECON1, 6, 0
$2006	$C261	FFA9			MOVFF	FARG_Eeprom_Write+0, EEADR
$200A	$C262	FFA8			MOVFF	FARG_Eeprom_Write+1, EEDATA
$200E	$9EA6	    			BCF	EECON1, 7, 0
$2010	$84A6	    			BSF	EECON1, 2, 0
$2012	$9EF2	    			BCF	INTCON, 7, 0
$2014	$0E55	    			MOVLW	85
$2016	$6EA7	    			MOVWF	EECON2, 0
$2018	$0EAA	    			MOVLW	170
$201A	$6EA7	    			MOVWF	EECON2, 0
$201C	$82A6	    			BSF	EECON1, 1, 0
$201E	$8EF2	    			BSF	INTCON, 7, 0
$2020	$94A6	    			BCF	EECON1, 2, 0
$2022	$0012	    			RETURN
$2024	$	_Mul_16x16_S:
$2024	$0100	    			MOVLB	0
$2026	$5000	    			MOVF	STACK_0, W, 0
$2028	$0204	    			MULWF	STACK_4, 0
$202A	$CFF4	F009			MOVFF	PRODH, STACK_9
$202E	$CFF3	F008			MOVFF	PRODL, STACK_8
$2032	$5001	    			MOVF	STACK_1, W, 0
$2034	$0205	    			MULWF	STACK_5, 0
$2036	$CFF4	F00B			MOVFF	PRODH, STACK_11
$203A	$CFF3	F00A			MOVFF	PRODL, STACK_10
$203E	$5000	    			MOVF	STACK_0, W, 0
$2040	$0205	    			MULWF	STACK_5, 0
$2042	$50F3	    			MOVF	PRODL, W, 0
$2044	$2609	    			ADDWF	STACK_9, F, 0
$2046	$50F4	    			MOVF	PRODH, W, 0
$2048	$220A	    			ADDWFC	STACK_10, F, 0
$204A	$6AE8	    			CLRF	WREG, 0
$204C	$220B	    			ADDWFC	STACK_11, F, 0
$204E	$5001	    			MOVF	STACK_1, W, 0
$2050	$0204	    			MULWF	STACK_4, 0
$2052	$50F3	    			MOVF	PRODL, W, 0
$2054	$2609	    			ADDWF	STACK_9, F, 0
$2056	$50F4	    			MOVF	PRODH, W, 0
$2058	$220A	    			ADDWFC	STACK_10, F, 0
$205A	$6AE8	    			CLRF	WREG, 0
$205C	$220B	    			ADDWFC	STACK_11, F, 0
$205E	$AE05	    			BTFSS	STACK_5, 7, 0
$2060	$EF36	F010			GOTO	$+5
$2064	$5000	    			MOVF	STACK_0, W, 0
$2066	$5C0A	    			SUBWF	STACK_10, W, 0
$2068	$5001	    			MOVF	STACK_1, W, 0
$206A	$580B	    			SUBWFB	STACK_11, W, 0
$206C	$AE01	    			BTFSS	STACK_1, 7, 0
$206E	$EF3D	F010			GOTO	$+5
$2072	$5004	    			MOVF	STACK_4, W, 0
$2074	$5C0A	    			SUBWF	STACK_10, W, 0
$2076	$5005	    			MOVF	STACK_5, W, 0
$2078	$580B	    			SUBWFB	STACK_11, W, 0
$207A	$C008	F000			MOVFF	STACK_8, STACK_0
$207E	$C009	F001			MOVFF	STACK_9, STACK_1
$2082	$C00A	F002			MOVFF	STACK_10, STACK_2
$2086	$C00B	F003			MOVFF	STACK_11, STACK_3
$208A	$0012	    			RETURN
$208C	$	c_stdlib_strtod:
$208C	$0102	    			MOVLB	2
$208E	$5163	    			MOVF	FARG_c_stdlib_strtod+2, 0, 1
$2090	$1164	    			IORWF	FARG_c_stdlib_strtod+3, 0, 1
$2092	$E008	    			BZ	L_c_stdlib_strtod_1
$2094	$C263	FFE1			MOVFF	FARG_c_stdlib_strtod+2, FSR1L
$2098	$C264	FFE2			MOVFF	FARG_c_stdlib_strtod+3, FSR1H
$209C	$C261	FFE6			MOVFF	FARG_c_stdlib_strtod+0, POSTINC1
$20A0	$C262	FFE6			MOVFF	FARG_c_stdlib_strtod+1, POSTINC1
$20A4	$	L_c_stdlib_strtod_1:
$20A4	$	L_c_stdlib_strtod_2:
$20A4	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$20A8	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$20AC	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$20B0	$C000	F267			MOVFF	STACK_0, c_stdlib_strtod_eexp_L0
$20B4	$C000	F279			MOVFF	STACK_0, FARG_isspace+0
$20B8	$ECB9	F00D			CALL	_isspace
$20BC	$5200	    			MOVF	STACK_0, 1, 0
$20BE	$E004	    			BZ	L_c_stdlib_strtod_3
$20C0	$0102	    			MOVLB	2
$20C2	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$20C4	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$20C6	$D7EE	    			BRA	L_c_stdlib_strtod_2
$20C8	$	L_c_stdlib_strtod_3:
$20C8	$0102	    			MOVLB	2
$20CA	$6B65	    			CLRF	c_stdlib_strtod_flags_L0, 1
$20CC	$5167	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$20CE	$0A2D	    			XORLW	45
$20D0	$E105	    			BNZ	L_c_stdlib_strtod_4
$20D2	$0E01	    			MOVLW	1
$20D4	$6F65	    			MOVWF	c_stdlib_strtod_flags_L0, 1
$20D6	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$20D8	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$20DA	$D006	    			BRA	L_c_stdlib_strtod_5
$20DC	$	L_c_stdlib_strtod_4:
$20DC	$0102	    			MOVLB	2
$20DE	$5167	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$20E0	$0A2B	    			XORLW	43
$20E2	$E102	    			BNZ	L_c_stdlib_strtod_6
$20E4	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$20E6	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$20E8	$	L_c_stdlib_strtod_6:
$20E8	$	L_c_stdlib_strtod_5:
$20E8	$0102	    			MOVLB	2
$20EA	$6B67	    			CLRF	c_stdlib_strtod_eexp_L0, 1
$20EC	$6B68	    			CLRF	c_stdlib_strtod__u_L0, 1
$20EE	$6B69	    			CLRF	c_stdlib_strtod__u_L0+1, 1
$20F0	$6B6A	    			CLRF	c_stdlib_strtod__u_L0+2, 1
$20F2	$6B6B	    			CLRF	c_stdlib_strtod__u_L0+3, 1
$20F4	$6B66	    			CLRF	c_stdlib_strtod_expon_L0, 1
$20F6	$	L_c_stdlib_strtod_7:
$20F6	$0102	    			MOVLB	2
$20F8	$B965	    			BTFSC	c_stdlib_strtod_flags_L0, 4, 1
$20FA	$D00E	    			BRA	L_c_stdlib_strtod_12
$20FC	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2100	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2104	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2108	$5004	    			MOVF	STACK_4, 0, 0
$210A	$0A2E	    			XORLW	46
$210C	$E105	    			BNZ	L_c_stdlib_strtod_12
$210E	$	L52_ex_L_c_stdlib_strtod_12:
$210E	$0102	    			MOVLB	2
$2110	$8965	    			BSF	c_stdlib_strtod_flags_L0, 4, 1
$2112	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$2114	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$2116	$D04B	    			BRA	L_c_stdlib_strtod_9
$2118	$	L_c_stdlib_strtod_12:
$2118	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$211C	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2120	$CFEE	F279			MOVFF	POSTINC0, FARG_isdigit+0
$2124	$ECC8	F00D			CALL	_isdigit
$2128	$5200	    			MOVF	STACK_0, 1, 0
$212A	$E042	    			BZ	L_c_stdlib_strtod_8
$212C	$	L_c_stdlib_strtod_13:
$212C	$0102	    			MOVLB	2
$212E	$8365	    			BSF	c_stdlib_strtod_flags_L0, 1, 1
$2130	$5167	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$2132	$0A08	    			XORLW	8
$2134	$E036	    			BZ	L_c_stdlib_strtod_14
$2136	$B965	    			BTFSC	c_stdlib_strtod_flags_L0, 4, 1
$2138	$0766	    			DECF	c_stdlib_strtod_expon_L0, 1, 1
$213A	$	L_c_stdlib_strtod_15:
$213A	$0102	    			MOVLB	2
$213C	$2B67	    			INCF	c_stdlib_strtod_eexp_L0, 1, 1
$213E	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$2142	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$2146	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$214A	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$214E	$0E0A	    			MOVLW	10
$2150	$6E04	    			MOVWF	STACK_4, 0
$2152	$0E00	    			MOVLW	0
$2154	$6E05	    			MOVWF	STACK_4+1, 0
$2156	$6E06	    			MOVWF	STACK_4+2, 0
$2158	$6E07	    			MOVWF	STACK_4+3, 0
$215A	$ECA3	F006			CALL	_mul_32x32_s
$215E	$C000	F268			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$2162	$C001	F269			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$2166	$C002	F26A			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$216A	$C003	F26B			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$216E	$0000	    			NOP
$2170	$0000	    			NOP
$2172	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2176	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$217A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$217E	$0E30	    			MOVLW	48
$2180	$5E00	    			SUBWF	STACK_0, 1, 0
$2182	$6A01	    			CLRF	STACK_0+1, 0
$2184	$0E00	    			MOVLW	0
$2186	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$2188	$5000	    			MOVF	STACK_0, 0, 0
$218A	$0102	    			MOVLB	2
$218C	$2768	    			ADDWF	c_stdlib_strtod__u_L0, 1, 1
$218E	$5001	    			MOVF	STACK_0+1, 0, 0
$2190	$2369	    			ADDWFC	c_stdlib_strtod__u_L0+1, 1, 1
$2192	$0E00	    			MOVLW	0
$2194	$BE01	    			BTFSC	STACK_0+1, 7, 0
$2196	$0EFF	    			MOVLW	255
$2198	$236A	    			ADDWFC	c_stdlib_strtod__u_L0+2, 1, 1
$219A	$236B	    			ADDWFC	c_stdlib_strtod__u_L0+3, 1, 1
$219C	$0000	    			NOP
$219E	$0000	    			NOP
$21A0	$D003	    			BRA	L_c_stdlib_strtod_16
$21A2	$	L_c_stdlib_strtod_14:
$21A2	$0102	    			MOVLB	2
$21A4	$A965	    			BTFSS	c_stdlib_strtod_flags_L0, 4, 1
$21A6	$2B66	    			INCF	c_stdlib_strtod_expon_L0, 1, 1
$21A8	$	L_c_stdlib_strtod_17:
$21A8	$	L_c_stdlib_strtod_16:
$21A8	$0102	    			MOVLB	2
$21AA	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$21AC	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$21AE	$	L_c_stdlib_strtod_9:
$21AE	$D7A3	    			BRA	L_c_stdlib_strtod_7
$21B0	$	L_c_stdlib_strtod_8:
$21B0	$0102	    			MOVLB	2
$21B2	$6B67	    			CLRF	c_stdlib_strtod_eexp_L0, 1
$21B4	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$21B8	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$21BC	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$21C0	$5004	    			MOVF	STACK_4, 0, 0
$21C2	$0A65	    			XORLW	101
$21C4	$E00A	    			BZ	L114_ex_L_c_stdlib_strtod_20
$21C6	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$21CA	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$21CE	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$21D2	$5004	    			MOVF	STACK_4, 0, 0
$21D4	$0A45	    			XORLW	69
$21D6	$A4D8	    			BTFSS	STATUS, Z, 0
$21D8	$D07D	    			BRA	L_c_stdlib_strtod_20
$21DA	$	L114_ex_L_c_stdlib_strtod_20:
$21DA	$0102	    			MOVLB	2
$21DC	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$21DE	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$21E0	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$21E4	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$21E8	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$21EC	$5004	    			MOVF	STACK_4, 0, 0
$21EE	$0A2D	    			XORLW	45
$21F0	$E104	    			BNZ	L_c_stdlib_strtod_21
$21F2	$8765	    			BSF	c_stdlib_strtod_flags_L0, 3, 1
$21F4	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$21F6	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$21F8	$D00C	    			BRA	L_c_stdlib_strtod_22
$21FA	$	L_c_stdlib_strtod_21:
$21FA	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$21FE	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2202	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2206	$5004	    			MOVF	STACK_4, 0, 0
$2208	$0A2B	    			XORLW	43
$220A	$E103	    			BNZ	L_c_stdlib_strtod_23
$220C	$0102	    			MOVLB	2
$220E	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$2210	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$2212	$	L_c_stdlib_strtod_23:
$2212	$	L_c_stdlib_strtod_22:
$2212	$	L_c_stdlib_strtod_24:
$2212	$0102	    			MOVLB	2
$2214	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2218	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$221C	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2220	$5004	    			MOVF	STACK_4, 0, 0
$2222	$0A30	    			XORLW	48
$2224	$E104	    			BNZ	L_c_stdlib_strtod_25
$2226	$0102	    			MOVLB	2
$2228	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$222A	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$222C	$D7F2	    			BRA	L_c_stdlib_strtod_24
$222E	$	L_c_stdlib_strtod_25:
$222E	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2232	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2236	$CFEE	F279			MOVFF	POSTINC0, FARG_isdigit+0
$223A	$ECC8	F00D			CALL	_isdigit
$223E	$5200	    			MOVF	STACK_0, 1, 0
$2240	$E041	    			BZ	L_c_stdlib_strtod_26
$2242	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2246	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$224A	$CFEE	F267			MOVFF	POSTINC0, c_stdlib_strtod_eexp_L0
$224E	$0E30	    			MOVLW	48
$2250	$0102	    			MOVLB	2
$2252	$5F67	    			SUBWF	c_stdlib_strtod_eexp_L0, 1, 1
$2254	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$2256	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$2258	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$225C	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2260	$CFEE	F279			MOVFF	POSTINC0, FARG_isdigit+0
$2264	$ECC8	F00D			CALL	_isdigit
$2268	$5200	    			MOVF	STACK_0, 1, 0
$226A	$E02C	    			BZ	L_c_stdlib_strtod_27
$226C	$0E0A	    			MOVLW	10
$226E	$0102	    			MOVLB	2
$2270	$0367	    			MULWF	c_stdlib_strtod_eexp_L0, 1
$2272	$CFF3	F000			MOVFF	PRODL, STACK_0
$2276	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$227A	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$227E	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2282	$0E30	    			MOVLW	48
$2284	$5E04	    			SUBWF	STACK_4, 1, 0
$2286	$5004	    			MOVF	STACK_4, 0, 0
$2288	$2400	    			ADDWF	STACK_0, 0, 0
$228A	$6F67	    			MOVWF	c_stdlib_strtod_eexp_L0, 1
$228C	$4B61	    			INFSNZ	FARG_c_stdlib_strtod+0, 1, 1
$228E	$2B62	    			INCF	FARG_c_stdlib_strtod+1, 1, 1
$2290	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$2294	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$2298	$CFEE	F279			MOVFF	POSTINC0, FARG_isdigit+0
$229C	$ECC8	F00D			CALL	_isdigit
$22A0	$5200	    			MOVF	STACK_0, 1, 0
$22A2	$E010	    			BZ	L_c_stdlib_strtod_28
$22A4	$0E0A	    			MOVLW	10
$22A6	$0102	    			MOVLB	2
$22A8	$0367	    			MULWF	c_stdlib_strtod_eexp_L0, 1
$22AA	$CFF3	F000			MOVFF	PRODL, STACK_0
$22AE	$C261	FFE9			MOVFF	FARG_c_stdlib_strtod+0, FSR0L
$22B2	$C262	FFEA			MOVFF	FARG_c_stdlib_strtod+1, FSR0H
$22B6	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$22BA	$0E30	    			MOVLW	48
$22BC	$5E04	    			SUBWF	STACK_4, 1, 0
$22BE	$5004	    			MOVF	STACK_4, 0, 0
$22C0	$2400	    			ADDWF	STACK_0, 0, 0
$22C2	$6F67	    			MOVWF	c_stdlib_strtod_eexp_L0, 1
$22C4	$	L_c_stdlib_strtod_28:
$22C4	$	L_c_stdlib_strtod_27:
$22C4	$	L_c_stdlib_strtod_26:
$22C4	$0102	    			MOVLB	2
$22C6	$0102	    			MOVLB	2
$22C8	$0102	    			MOVLB	2
$22CA	$A765	    			BTFSS	c_stdlib_strtod_flags_L0, 3, 1
$22CC	$D003	    			BRA	L_c_stdlib_strtod_29
$22CE	$5167	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$22D0	$0800	    			SUBLW	0
$22D2	$6F67	    			MOVWF	c_stdlib_strtod_eexp_L0, 1
$22D4	$	L_c_stdlib_strtod_29:
$22D4	$	L_c_stdlib_strtod_20:
$22D4	$0102	    			MOVLB	2
$22D6	$5167	    			MOVF	c_stdlib_strtod_eexp_L0, 0, 1
$22D8	$2766	    			ADDWF	c_stdlib_strtod_expon_L0, 1, 1
$22DA	$0E00	    			MOVLW	0
$22DC	$1964	    			XORWF	FARG_c_stdlib_strtod+3, 0, 1
$22DE	$E102	    			BNZ	L_strtod_88
$22E0	$0E00	    			MOVLW	0
$22E2	$1963	    			XORWF	FARG_c_stdlib_strtod+2, 0, 1
$22E4	$	L_strtod_88:
$22E4	$E00B	    			BZ	L_c_stdlib_strtod_32
$22E6	$0102	    			MOVLB	2
$22E8	$A365	    			BTFSS	c_stdlib_strtod_flags_L0, 1, 1
$22EA	$D008	    			BRA	L_c_stdlib_strtod_32
$22EC	$	L191_ex_L_c_stdlib_strtod_32:
$22EC	$C263	FFE1			MOVFF	FARG_c_stdlib_strtod+2, FSR1L
$22F0	$C264	FFE2			MOVFF	FARG_c_stdlib_strtod+3, FSR1H
$22F4	$C261	FFE6			MOVFF	FARG_c_stdlib_strtod+0, POSTINC1
$22F8	$C262	FFE6			MOVFF	FARG_c_stdlib_strtod+1, POSTINC1
$22FC	$	L_c_stdlib_strtod_32:
$22FC	$0102	    			MOVLB	2
$22FE	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$2302	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$2306	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$230A	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$230E	$EC05	F003			CALL	_longint2double
$2312	$C000	F268			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$2316	$C001	F269			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$231A	$C002	F26A			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$231E	$C003	F26B			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$2322	$6A04	    			CLRF	STACK_4, 0
$2324	$6A05	    			CLRF	STACK_4+1, 0
$2326	$6A06	    			CLRF	STACK_4+2, 0
$2328	$6A07	    			CLRF	STACK_4+3, 0
$232A	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$232E	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$2332	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$2336	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$233A	$ECD5	F00D			CALL	_equals_double
$233E	$0E01	    			MOVLW	1
$2340	$A4D8	    			BTFSS	STATUS, Z, 0
$2342	$0E00	    			MOVLW	0
$2344	$6E00	    			MOVWF	STACK_0, 0
$2346	$5200	    			MOVF	STACK_0, 1, 0
$2348	$E005	    			BZ	L_c_stdlib_strtod_33
$234A	$6A00	    			CLRF	STACK_0, 0
$234C	$6A01	    			CLRF	STACK_0+1, 0
$234E	$6A02	    			CLRF	STACK_0+2, 0
$2350	$6A03	    			CLRF	STACK_0+3, 0
$2352	$0012	    			RETURN
$2354	$	L_c_stdlib_strtod_33:
$2354	$0E80	    			MOVLW	128
$2356	$0102	    			MOVLB	2
$2358	$1966	    			XORWF	c_stdlib_strtod_expon_L0, 0, 1
$235A	$6E00	    			MOVWF	STACK_0, 0
$235C	$0E80	    			MOVLW	128
$235E	$0A00	    			XORLW	0
$2360	$5C00	    			SUBWF	STACK_0, 0, 0
$2362	$B0D8	    			BTFSC	STATUS, C, 0
$2364	$D07B	    			BRA	L_c_stdlib_strtod_34
$2366	$5166	    			MOVF	c_stdlib_strtod_expon_L0, 0, 1
$2368	$0800	    			SUBLW	0
$236A	$6F66	    			MOVWF	c_stdlib_strtod_expon_L0, 1
$236C	$	L_c_stdlib_strtod_35:
$236C	$0E80	    			MOVLW	128
$236E	$0102	    			MOVLB	2
$2370	$1966	    			XORWF	c_stdlib_strtod_expon_L0, 0, 1
$2372	$6E00	    			MOVWF	STACK_0, 0
$2374	$0E80	    			MOVLW	128
$2376	$0A0A	    			XORLW	10
$2378	$5C00	    			SUBWF	STACK_0, 0, 0
$237A	$E31E	    			BNC	L_c_stdlib_strtod_36
$237C	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$2380	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$2384	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$2388	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$238C	$0EFF	    			MOVLW	255
$238E	$6E04	    			MOVWF	STACK_4, 0
$2390	$0EE6	    			MOVLW	230
$2392	$6E05	    			MOVWF	STACK_4+1, 0
$2394	$0E5B	    			MOVLW	91
$2396	$6E06	    			MOVWF	STACK_4+2, 0
$2398	$0E5D	    			MOVLW	93
$239A	$6E07	    			MOVWF	STACK_4+3, 0
$239C	$EC28	F003			CALL	_mul_32x32_fp
$23A0	$C000	F268			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$23A4	$C001	F269			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$23A8	$C002	F26A			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$23AC	$C003	F26B			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$23B0	$0E0A	    			MOVLW	10
$23B2	$0102	    			MOVLB	2
$23B4	$5F66	    			SUBWF	c_stdlib_strtod_expon_L0, 1, 1
$23B6	$D7DA	    			BRA	L_c_stdlib_strtod_35
$23B8	$	L_c_stdlib_strtod_36:
$23B8	$	L_c_stdlib_strtod_37:
$23B8	$0102	    			MOVLB	2
$23BA	$5166	    			MOVF	c_stdlib_strtod_expon_L0, 0, 1
$23BC	$0A00	    			XORLW	0
$23BE	$E01D	    			BZ	L_c_stdlib_strtod_38
$23C0	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$23C4	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$23C8	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$23CC	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$23D0	$0ECD	    			MOVLW	205
$23D2	$6E04	    			MOVWF	STACK_4, 0
$23D4	$0ECC	    			MOVLW	204
$23D6	$6E05	    			MOVWF	STACK_4+1, 0
$23D8	$0E4C	    			MOVLW	76
$23DA	$6E06	    			MOVWF	STACK_4+2, 0
$23DC	$0E7B	    			MOVLW	123
$23DE	$6E07	    			MOVWF	STACK_4+3, 0
$23E0	$EC28	F003			CALL	_mul_32x32_fp
$23E4	$C000	F268			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$23E8	$C001	F269			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$23EC	$C002	F26A			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$23F0	$C003	F26B			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$23F4	$0102	    			MOVLB	2
$23F6	$0766	    			DECF	c_stdlib_strtod_expon_L0, 1, 1
$23F8	$D7DF	    			BRA	L_c_stdlib_strtod_37
$23FA	$	L_c_stdlib_strtod_38:
$23FA	$0E01	    			MOVLW	1
$23FC	$6E04	    			MOVWF	STACK_4, 0
$23FE	$0E00	    			MOVLW	0
$2400	$6E05	    			MOVWF	STACK_4+1, 0
$2402	$0E00	    			MOVLW	0
$2404	$6E06	    			MOVWF	STACK_4+2, 0
$2406	$0E01	    			MOVLW	1
$2408	$6E07	    			MOVWF	STACK_4+3, 0
$240A	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$240E	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$2412	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$2416	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$241A	$ECD0	F005			CALL	_compare_double
$241E	$0E01	    			MOVLW	1
$2420	$B0D8	    			BTFSC	STATUS, C, 0
$2422	$0E00	    			MOVLW	0
$2424	$6E00	    			MOVWF	STACK_0, 0
$2426	$5200	    			MOVF	STACK_0, 1, 0
$2428	$E017	    			BZ	L_c_stdlib_strtod_39
$242A	$0E01	    			MOVLW	1
$242C	$0102	    			MOVLB	2
$242E	$1565	    			ANDWF	c_stdlib_strtod_flags_L0, 0, 1
$2430	$6E00	    			MOVWF	STACK_0, 0
$2432	$E009	    			BZ	L_c_stdlib_strtod_40
$2434	$0E01	    			MOVLW	1
$2436	$6E00	    			MOVWF	STACK_0, 0
$2438	$0E00	    			MOVLW	0
$243A	$6E01	    			MOVWF	STACK_0+1, 0
$243C	$0E80	    			MOVLW	128
$243E	$6E02	    			MOVWF	STACK_0+2, 0
$2440	$0E03	    			MOVLW	3
$2442	$6E03	    			MOVWF	STACK_0+3, 0
$2444	$0012	    			RETURN
$2446	$	L_c_stdlib_strtod_40:
$2446	$0E01	    			MOVLW	1
$2448	$6E00	    			MOVWF	STACK_0, 0
$244A	$0E00	    			MOVLW	0
$244C	$6E01	    			MOVWF	STACK_0+1, 0
$244E	$0E00	    			MOVLW	0
$2450	$6E02	    			MOVWF	STACK_0+2, 0
$2452	$0E01	    			MOVLW	1
$2454	$6E03	    			MOVWF	STACK_0+3, 0
$2456	$0012	    			RETURN
$2458	$	L_c_stdlib_strtod_39:
$2458	$0102	    			MOVLB	2
$245A	$D07A	    			BRA	L_c_stdlib_strtod_42
$245C	$	L_c_stdlib_strtod_34:
$245C	$0E80	    			MOVLW	128
$245E	$0A00	    			XORLW	0
$2460	$6E00	    			MOVWF	STACK_0, 0
$2462	$0E80	    			MOVLW	128
$2464	$0102	    			MOVLB	2
$2466	$1966	    			XORWF	c_stdlib_strtod_expon_L0, 0, 1
$2468	$5C00	    			SUBWF	STACK_0, 0, 0
$246A	$E272	    			BC	L_c_stdlib_strtod_43
$246C	$	L_c_stdlib_strtod_44:
$246C	$0E0A	    			MOVLW	10
$246E	$0102	    			MOVLB	2
$2470	$5D66	    			SUBWF	c_stdlib_strtod_expon_L0, 0, 1
$2472	$E31E	    			BNC	L_c_stdlib_strtod_45
$2474	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$2478	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$247C	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$2480	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$2484	$0EF9	    			MOVLW	249
$2486	$6E04	    			MOVWF	STACK_4, 0
$2488	$0E02	    			MOVLW	2
$248A	$6E05	    			MOVWF	STACK_4+1, 0
$248C	$0E15	    			MOVLW	21
$248E	$6E06	    			MOVWF	STACK_4+2, 0
$2490	$0EA0	    			MOVLW	160
$2492	$6E07	    			MOVWF	STACK_4+3, 0
$2494	$EC28	F003			CALL	_mul_32x32_fp
$2498	$C000	F268			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$249C	$C001	F269			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$24A0	$C002	F26A			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$24A4	$C003	F26B			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$24A8	$0E0A	    			MOVLW	10
$24AA	$0102	    			MOVLB	2
$24AC	$5F66	    			SUBWF	c_stdlib_strtod_expon_L0, 1, 1
$24AE	$D7DE	    			BRA	L_c_stdlib_strtod_44
$24B0	$	L_c_stdlib_strtod_45:
$24B0	$	L_c_stdlib_strtod_46:
$24B0	$0102	    			MOVLB	2
$24B2	$5166	    			MOVF	c_stdlib_strtod_expon_L0, 0, 1
$24B4	$0A00	    			XORLW	0
$24B6	$E01D	    			BZ	L_c_stdlib_strtod_47
$24B8	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$24BC	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$24C0	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$24C4	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$24C8	$0E00	    			MOVLW	0
$24CA	$6E04	    			MOVWF	STACK_4, 0
$24CC	$0E00	    			MOVLW	0
$24CE	$6E05	    			MOVWF	STACK_4+1, 0
$24D0	$0E20	    			MOVLW	32
$24D2	$6E06	    			MOVWF	STACK_4+2, 0
$24D4	$0E82	    			MOVLW	130
$24D6	$6E07	    			MOVWF	STACK_4+3, 0
$24D8	$EC28	F003			CALL	_mul_32x32_fp
$24DC	$C000	F268			MOVFF	STACK_0, c_stdlib_strtod__u_L0
$24E0	$C001	F269			MOVFF	STACK_0+1, c_stdlib_strtod__u_L0+1
$24E4	$C002	F26A			MOVFF	STACK_0+2, c_stdlib_strtod__u_L0+2
$24E8	$C003	F26B			MOVFF	STACK_0+3, c_stdlib_strtod__u_L0+3
$24EC	$0102	    			MOVLB	2
$24EE	$0766	    			DECF	c_stdlib_strtod_expon_L0, 1, 1
$24F0	$D7DF	    			BRA	L_c_stdlib_strtod_46
$24F2	$	L_c_stdlib_strtod_47:
$24F2	$C268	F004			MOVFF	c_stdlib_strtod__u_L0, STACK_4
$24F6	$C269	F005			MOVFF	c_stdlib_strtod__u_L0+1, STACK_4+1
$24FA	$C26A	F006			MOVFF	c_stdlib_strtod__u_L0+2, STACK_4+2
$24FE	$C26B	F007			MOVFF	c_stdlib_strtod__u_L0+3, STACK_4+3
$2502	$0EFF	    			MOVLW	255
$2504	$6E00	    			MOVWF	STACK_0, 0
$2506	$0EFF	    			MOVLW	255
$2508	$6E01	    			MOVWF	STACK_0+1, 0
$250A	$0E7F	    			MOVLW	127
$250C	$6E02	    			MOVWF	STACK_0+2, 0
$250E	$0EFF	    			MOVLW	255
$2510	$6E03	    			MOVWF	STACK_0+3, 0
$2512	$ECD0	F005			CALL	_compare_double
$2516	$0E01	    			MOVLW	1
$2518	$B0D8	    			BTFSC	STATUS, C, 0
$251A	$0E00	    			MOVLW	0
$251C	$6E00	    			MOVWF	STACK_0, 0
$251E	$5200	    			MOVF	STACK_0, 1, 0
$2520	$E017	    			BZ	L_c_stdlib_strtod_48
$2522	$0E01	    			MOVLW	1
$2524	$0102	    			MOVLB	2
$2526	$1565	    			ANDWF	c_stdlib_strtod_flags_L0, 0, 1
$2528	$6E00	    			MOVWF	STACK_0, 0
$252A	$E009	    			BZ	L_c_stdlib_strtod_49
$252C	$0EFF	    			MOVLW	255
$252E	$6E00	    			MOVWF	STACK_0, 0
$2530	$0EFF	    			MOVLW	255
$2532	$6E01	    			MOVWF	STACK_0+1, 0
$2534	$0EFF	    			MOVLW	255
$2536	$6E02	    			MOVWF	STACK_0+2, 0
$2538	$0EFF	    			MOVLW	255
$253A	$6E03	    			MOVWF	STACK_0+3, 0
$253C	$0012	    			RETURN
$253E	$	L_c_stdlib_strtod_49:
$253E	$0EFF	    			MOVLW	255
$2540	$6E00	    			MOVWF	STACK_0, 0
$2542	$0EFF	    			MOVLW	255
$2544	$6E01	    			MOVWF	STACK_0+1, 0
$2546	$0E7F	    			MOVLW	127
$2548	$6E02	    			MOVWF	STACK_0+2, 0
$254A	$0EFF	    			MOVLW	255
$254C	$6E03	    			MOVWF	STACK_0+3, 0
$254E	$0012	    			RETURN
$2550	$	L_c_stdlib_strtod_48:
$2550	$	L_c_stdlib_strtod_43:
$2550	$	L_c_stdlib_strtod_42:
$2550	$0102	    			MOVLB	2
$2552	$0E01	    			MOVLW	1
$2554	$0102	    			MOVLB	2
$2556	$1565	    			ANDWF	c_stdlib_strtod_flags_L0, 0, 1
$2558	$6E00	    			MOVWF	STACK_0, 0
$255A	$E00D	    			BZ	L_c_stdlib_strtod_51
$255C	$0E00	    			MOVLW	0
$255E	$1968	    			XORWF	c_stdlib_strtod__u_L0, 0, 1
$2560	$6E00	    			MOVWF	STACK_0, 0
$2562	$0E00	    			MOVLW	0
$2564	$1969	    			XORWF	c_stdlib_strtod__u_L0+1, 0, 1
$2566	$6E01	    			MOVWF	STACK_0+1, 0
$2568	$0E80	    			MOVLW	128
$256A	$196A	    			XORWF	c_stdlib_strtod__u_L0+2, 0, 1
$256C	$6E02	    			MOVWF	STACK_0+2, 0
$256E	$0E00	    			MOVLW	0
$2570	$196B	    			XORWF	c_stdlib_strtod__u_L0+3, 0, 1
$2572	$6E03	    			MOVWF	STACK_0+3, 0
$2574	$0012	    			RETURN
$2576	$	L_c_stdlib_strtod_51:
$2576	$C268	F000			MOVFF	c_stdlib_strtod__u_L0, STACK_0
$257A	$C269	F001			MOVFF	c_stdlib_strtod__u_L0+1, STACK_0+1
$257E	$C26A	F002			MOVFF	c_stdlib_strtod__u_L0+2, STACK_0+2
$2582	$C26B	F003			MOVFF	c_stdlib_strtod__u_L0+3, STACK_0+3
$2586	$0012	    			RETURN
$2588	$	_strConstCpy:
;extruder.c,248 :: 			void strConstCpy(char *dest, const char *source) {
;extruder.c,249 :: 			while(*source){
$2588	$	L_strConstCpy_0:
$2588	$C250	FFF6			MOVFF	FARG_strConstCpy+2, TBLPTRL
$258C	$C251	FFF7			MOVFF	FARG_strConstCpy+3, TBLPTRH
$2590	$C252	FFF8			MOVFF	FARG_strConstCpy+4, TBLPTRU
$2594	$0009	    			TBLRD*+
$2596	$CFF5	F000			MOVFF	TABLAT, STACK_0
$259A	$5200	    			MOVF	STACK_0, 1, 0
$259C	$E01D	    			BZ	L_strConstCpy_1
;extruder.c,250 :: 			*dest++ = *source++ ;
$259E	$C250	FFF6			MOVFF	FARG_strConstCpy+2, TBLPTRL
$25A2	$C251	FFF7			MOVFF	FARG_strConstCpy+3, TBLPTRH
$25A6	$C252	FFF8			MOVFF	FARG_strConstCpy+4, TBLPTRU
$25AA	$0009	    			TBLRD*+
$25AC	$CFF5	F000			MOVFF	TABLAT, STACK_0
$25B0	$C24E	FFE1			MOVFF	FARG_strConstCpy+0, FSR1L
$25B4	$C24F	FFE2			MOVFF	FARG_strConstCpy+1, FSR1H
$25B8	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$25BC	$0102	    			MOVLB	2
$25BE	$4B4E	    			INFSNZ	FARG_strConstCpy+0, 1, 1
$25C0	$2B4F	    			INCF	FARG_strConstCpy+1, 1, 1
$25C2	$0E01	    			MOVLW	1
$25C4	$2750	    			ADDWF	FARG_strConstCpy+2, 1, 1
$25C6	$0E00	    			MOVLW	0
$25C8	$2351	    			ADDWFC	FARG_strConstCpy+3, 1, 1
$25CA	$2352	    			ADDWFC	FARG_strConstCpy+4, 1, 1
;extruder.c,251 :: 			*dest = 0 ;
$25CC	$C24E	FFE1			MOVFF	FARG_strConstCpy+0, FSR1L
$25D0	$C24F	FFE2			MOVFF	FARG_strConstCpy+1, FSR1H
$25D4	$6AE6	    			CLRF	POSTINC1, 0
;extruder.c,252 :: 			}
$25D6	$D7D8	    			BRA	L_strConstCpy_0
$25D8	$	L_strConstCpy_1:
;extruder.c,253 :: 			}
$25D8	$0012	    			RETURN
$25DA	$	_Eeprom_Read_Obj:
;eeprom.c,10 :: 			void Eeprom_Read_Obj(word addr,void *obj,byte size)
;eeprom.c,12 :: 			byte i,*ptr=obj;
$25DA	$C250	F254			MOVFF	FARG_Eeprom_Read_Obj+2, Eeprom_Read_Obj_ptr_L0
$25DE	$C251	F255			MOVFF	FARG_Eeprom_Read_Obj+3, Eeprom_Read_Obj_ptr_L0+1
;eeprom.c,13 :: 			for (i=0;i<size;i++)
$25E2	$0102	    			MOVLB	2
$25E4	$6B53	    			CLRF	Eeprom_Read_Obj_i_L0, 1
$25E6	$	L_Eeprom_Read_Obj_3:
$25E6	$0102	    			MOVLB	2
$25E8	$5152	    			MOVF	FARG_Eeprom_Read_Obj+4, 0, 1
$25EA	$5D53	    			SUBWF	Eeprom_Read_Obj_i_L0, 0, 1
$25EC	$E212	    			BC	L_Eeprom_Read_Obj_4
;eeprom.c,14 :: 			*(ptr++)=Eeprom_Read(addr++);
$25EE	$C24E	F261			MOVFF	FARG_Eeprom_Read_Obj+0, FARG_Eeprom_Read+0
$25F2	$ECED	F00D			CALL	_Eeprom_Read
$25F6	$C254	FFE1			MOVFF	Eeprom_Read_Obj_ptr_L0, FSR1L
$25FA	$C255	FFE2			MOVFF	Eeprom_Read_Obj_ptr_L0+1, FSR1H
$25FE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$2602	$0102	    			MOVLB	2
$2604	$4B54	    			INFSNZ	Eeprom_Read_Obj_ptr_L0, 1, 1
$2606	$2B55	    			INCF	Eeprom_Read_Obj_ptr_L0+1, 1, 1
$2608	$4B4E	    			INFSNZ	FARG_Eeprom_Read_Obj+0, 1, 1
$260A	$2B4F	    			INCF	FARG_Eeprom_Read_Obj+1, 1, 1
$260C	$	L_Eeprom_Read_Obj_5:
;eeprom.c,13 :: 			for (i=0;i<size;i++)
$260C	$0102	    			MOVLB	2
$260E	$2B53	    			INCF	Eeprom_Read_Obj_i_L0, 1, 1
;eeprom.c,14 :: 			*(ptr++)=Eeprom_Read(addr++);
$2610	$D7EA	    			BRA	L_Eeprom_Read_Obj_3
$2612	$	L_Eeprom_Read_Obj_4:
;eeprom.c,15 :: 			}
$2612	$0012	    			RETURN
$2614	$	_printFloat:
;extruder.c,695 :: 			void printFloat( char* name, float f ){
;extruder.c,697 :: 			USART_Send_String(name);
$2614	$C24E	F261			MOVFF	FARG_printFloat+0, FARG_USART_Send_String+0
$2618	$C24F	F262			MOVFF	FARG_printFloat+1, FARG_USART_Send_String+1
$261C	$ECF5	F00D			CALL	_USART_Send_String
;extruder.c,698 :: 			FloatToStr(f,floatTxt);
$2620	$C250	F261			MOVFF	FARG_printFloat+2, FARG_FloatToStr+0
$2624	$C251	F262			MOVFF	FARG_printFloat+3, FARG_FloatToStr+1
$2628	$C252	F263			MOVFF	FARG_printFloat+4, FARG_FloatToStr+2
$262C	$C253	F264			MOVFF	FARG_printFloat+5, FARG_FloatToStr+3
$2630	$0E54	    			MOVLW	printFloat_floatTxt_L0
$2632	$0102	    			MOVLB	2
$2634	$6F65	    			MOVWF	FARG_FloatToStr+4, 1
$2636	$0E02	    			MOVLW	@printFloat_floatTxt_L0
$2638	$6F66	    			MOVWF	FARG_FloatToStr+5, 1
$263A	$EC0B	F00E			CALL	_FloatToStr
;extruder.c,699 :: 			USART_Send_String(floatTxt);
$263E	$0E54	    			MOVLW	printFloat_floatTxt_L0
$2640	$0102	    			MOVLB	2
$2642	$6F61	    			MOVWF	FARG_USART_Send_String+0, 1
$2644	$0E02	    			MOVLW	@printFloat_floatTxt_L0
$2646	$6F62	    			MOVWF	FARG_USART_Send_String+1, 1
$2648	$ECF5	F00D			CALL	_USART_Send_String
;extruder.c,700 :: 			}
$264C	$0012	    			RETURN
$264E	$	_Byte2Double:
$264E	$0100	    			MOVLB	0
$2650	$C000	F008			MOVFF	STACK_0, STACK_8
$2654	$	FLO08U32:
$2654	$6A0B	    			CLRF	STACK_11, 0
$2656	$6A0C	    			CLRF	STACK_12, 0
$2658	$0E9E	    			MOVLW	0x9E
$265A	$6E03	    			MOVWF	STACK_3, 0
$265C	$6A0A	    			CLRF	STACK_10, 0
$265E	$6A02	    			CLRF	STACK_2, 0
$2660	$6A01	    			CLRF	STACK_1, 0
$2662	$6A00	    			CLRF	STACK_0, 0
$2664	$0E02	    			MOVLW	0x02
$2666	$6E0C	    			MOVWF	STACK_12, 0
$2668	$ECB0	F001			CALL	_NRM4032
$266C	$0012	    			RETURN
$266E	$	_Eeprom_Write_Obj:
;eeprom.c,3 :: 			void Eeprom_Write_Obj(word addr,void *obj,byte size)
;eeprom.c,5 :: 			byte i,*ptr=(byte *)obj;
$266E	$C250	F254			MOVFF	FARG_Eeprom_Write_Obj+2, Eeprom_Write_Obj_ptr_L0
$2672	$C251	F255			MOVFF	FARG_Eeprom_Write_Obj+3, Eeprom_Write_Obj_ptr_L0+1
;eeprom.c,6 :: 			for (i=0;i<size;i++)
$2676	$0102	    			MOVLB	2
$2678	$6B53	    			CLRF	Eeprom_Write_Obj_i_L0, 1
$267A	$	L_Eeprom_Write_Obj_0:
$267A	$5152	    			MOVF	FARG_Eeprom_Write_Obj+4, 0, 1
$267C	$5D53	    			SUBWF	Eeprom_Write_Obj_i_L0, 0, 1
$267E	$E212	    			BC	L_Eeprom_Write_Obj_1
;eeprom.c,7 :: 			Eeprom_Write(addr++,*(ptr++));
$2680	$C24E	F261			MOVFF	FARG_Eeprom_Write_Obj+0, FARG_Eeprom_Write+0
$2684	$C254	FFE9			MOVFF	Eeprom_Write_Obj_ptr_L0, FSR0L
$2688	$C255	FFEA			MOVFF	Eeprom_Write_Obj_ptr_L0+1, FSR0H
$268C	$CFEE	F262			MOVFF	POSTINC0, FARG_Eeprom_Write+1
$2690	$ECFE	F00F			CALL	_Eeprom_Write
$2694	$0102	    			MOVLB	2
$2696	$4B4E	    			INFSNZ	FARG_Eeprom_Write_Obj+0, 1, 1
$2698	$2B4F	    			INCF	FARG_Eeprom_Write_Obj+1, 1, 1
$269A	$4B54	    			INFSNZ	Eeprom_Write_Obj_ptr_L0, 1, 1
$269C	$2B55	    			INCF	Eeprom_Write_Obj_ptr_L0+1, 1, 1
$269E	$	L_Eeprom_Write_Obj_2:
;eeprom.c,6 :: 			for (i=0;i<size;i++)
$269E	$0102	    			MOVLB	2
$26A0	$2B53	    			INCF	Eeprom_Write_Obj_i_L0, 1, 1
;eeprom.c,7 :: 			Eeprom_Write(addr++,*(ptr++));
$26A2	$D7EB	    			BRA	L_Eeprom_Write_Obj_0
$26A4	$	L_Eeprom_Write_Obj_1:
;eeprom.c,8 :: 			}
$26A4	$0012	    			RETURN
$26A6	$	_strchr:
$26A6	$	L_strchr_24:
$26A6	$C24E	FFE9			MOVFF	FARG_strchr+0, FSR0L
$26AA	$C24F	FFEA			MOVFF	FARG_strchr+1, FSR0H
$26AE	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$26B2	$5002	    			MOVF	STACK_2, 0, 0
$26B4	$0102	    			MOVLB	2
$26B6	$1950	    			XORWF	FARG_strchr+2, 0, 1
$26B8	$E105	    			BNZ	L_strchr_26
$26BA	$C24E	F000			MOVFF	FARG_strchr+0, STACK_0
$26BE	$C24F	F001			MOVFF	FARG_strchr+1, STACK_0+1
$26C2	$0012	    			RETURN
$26C4	$	L_strchr_26:
$26C4	$0102	    			MOVLB	2
$26C6	$4B4E	    			INFSNZ	FARG_strchr+0, 1, 1
$26C8	$2B4F	    			INCF	FARG_strchr+1, 1, 1
$26CA	$C24E	FFE9			MOVFF	FARG_strchr+0, FSR0L
$26CE	$C24F	FFEA			MOVFF	FARG_strchr+1, FSR0H
$26D2	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$26D6	$5200	    			MOVF	STACK_0, 1, 0
$26D8	$E1E6	    			BNZ	L_strchr_24
$26DA	$	L_strchr_25:
$26DA	$6A00	    			CLRF	STACK_0, 0
$26DC	$6A01	    			CLRF	STACK_0+1, 0
$26DE	$0012	    			RETURN
$26E0	$	_atoi:
$26E0	$	___atoi_skipws_atoi:
$26E0	$C24E	FFE9			MOVFF	FARG_atoi+0, FSR0L
$26E4	$C24F	FFEA			MOVFF	FARG_atoi+1, FSR0H
$26E8	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$26EC	$C002	F250			MOVFF	STACK_2, atoi_c_L0
$26F0	$5002	    			MOVF	STACK_2, 0, 0
$26F2	$0A20	    			XORLW	32
$26F4	$E004	    			BZ	L256_ex_L_atoi_55
$26F6	$0102	    			MOVLB	2
$26F8	$5150	    			MOVF	atoi_c_L0, 0, 1
$26FA	$0A09	    			XORLW	9
$26FC	$E104	    			BNZ	L_atoi_55
$26FE	$	L256_ex_L_atoi_55:
$26FE	$0102	    			MOVLB	2
$2700	$4B4E	    			INFSNZ	FARG_atoi+0, 1, 1
$2702	$2B4F	    			INCF	FARG_atoi+1, 1, 1
$2704	$D7ED	    			BRA	___atoi_skipws_atoi
$2706	$	L_atoi_55:
$2706	$0102	    			MOVLB	2
$2708	$6B51	    			CLRF	atoi_a_L0, 1
$270A	$6B52	    			CLRF	atoi_a_L0+1, 1
$270C	$6B53	    			CLRF	atoi_sign_L0, 1
$270E	$5150	    			MOVF	atoi_c_L0, 0, 1
$2710	$0A2D	    			XORLW	45
$2712	$E104	    			BNZ	L_atoi_56
$2714	$2B53	    			INCF	atoi_sign_L0, 1, 1
$2716	$4B4E	    			INFSNZ	FARG_atoi+0, 1, 1
$2718	$2B4F	    			INCF	FARG_atoi+1, 1, 1
$271A	$D006	    			BRA	L_atoi_57
$271C	$	L_atoi_56:
$271C	$0102	    			MOVLB	2
$271E	$5150	    			MOVF	atoi_c_L0, 0, 1
$2720	$0A2B	    			XORLW	43
$2722	$E102	    			BNZ	L_atoi_58
$2724	$4B4E	    			INFSNZ	FARG_atoi+0, 1, 1
$2726	$2B4F	    			INCF	FARG_atoi+1, 1, 1
$2728	$	L_atoi_58:
$2728	$	L_atoi_57:
$2728	$	___atoi_conv_atoi:
$2728	$C24E	FFE9			MOVFF	FARG_atoi+0, FSR0L
$272C	$C24F	FFEA			MOVFF	FARG_atoi+1, FSR0H
$2730	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2734	$C000	F250			MOVFF	STACK_0, atoi_c_L0
$2738	$C000	F279			MOVFF	STACK_0, FARG_isdigit+0
$273C	$ECC8	F00D			CALL	_isdigit
$2740	$5200	    			MOVF	STACK_0, 1, 0
$2742	$E01A	    			BZ	L_atoi_59
$2744	$C251	F000			MOVFF	atoi_a_L0, STACK_0
$2748	$C252	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$274C	$0E0A	    			MOVLW	10
$274E	$6E04	    			MOVWF	STACK_4, 0
$2750	$0E00	    			MOVLW	0
$2752	$6E05	    			MOVWF	STACK_4+1, 0
$2754	$EC12	F010			CALL	_mul_16x16_s
$2758	$0E30	    			MOVLW	48
$275A	$0102	    			MOVLB	2
$275C	$5D50	    			SUBWF	atoi_c_L0, 0, 1
$275E	$6E02	    			MOVWF	STACK_2, 0
$2760	$6A03	    			CLRF	STACK_2+1, 0
$2762	$0E00	    			MOVLW	0
$2764	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$2766	$5002	    			MOVF	STACK_2, 0, 0
$2768	$2400	    			ADDWF	STACK_0, 0, 0
$276A	$6F51	    			MOVWF	atoi_a_L0, 1
$276C	$5003	    			MOVF	STACK_2+1, 0, 0
$276E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2770	$6F52	    			MOVWF	atoi_a_L0+1, 1
$2772	$4B4E	    			INFSNZ	FARG_atoi+0, 1, 1
$2774	$2B4F	    			INCF	FARG_atoi+1, 1, 1
$2776	$D7D8	    			BRA	___atoi_conv_atoi
$2778	$	L_atoi_59:
$2778	$0102	    			MOVLB	2
$277A	$5353	    			MOVF	atoi_sign_L0, 1, 1
$277C	$E008	    			BZ	L_atoi_60
$277E	$5151	    			MOVF	atoi_a_L0, 0, 1
$2780	$0800	    			SUBLW	0
$2782	$6E00	    			MOVWF	STACK_0, 0
$2784	$C252	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$2788	$6AE8	    			CLRF	WREG, 0
$278A	$5601	    			SUBFWB	STACK_0+1, 1, 0
$278C	$0012	    			RETURN
$278E	$	L_atoi_60:
$278E	$C251	F000			MOVFF	atoi_a_L0, STACK_0
$2792	$C252	F001			MOVFF	atoi_a_L0+1, STACK_0+1
$2796	$0012	    			RETURN
$2798	$	_atof:
$2798	$C24E	F261			MOVFF	FARG_atof+0, FARG_c_stdlib_strtod+0
$279C	$C24F	F262			MOVFF	FARG_atof+1, FARG_c_stdlib_strtod+1
$27A0	$0102	    			MOVLB	2
$27A2	$6B63	    			CLRF	FARG_c_stdlib_strtod+2, 1
$27A4	$6B64	    			CLRF	FARG_c_stdlib_strtod+3, 1
$27A6	$EC46	F010			CALL	c_stdlib_strtod
$27AA	$0012	    			RETURN
$27AC	$	_atol:
$27AC	$	___atol_skipws_atol:
$27AC	$C24E	FFE9			MOVFF	FARG_atol+0, FSR0L
$27B0	$C24F	FFEA			MOVFF	FARG_atol+1, FSR0H
$27B4	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$27B8	$C004	F250			MOVFF	STACK_4, atol_c_L0
$27BC	$5004	    			MOVF	STACK_4, 0, 0
$27BE	$0A20	    			XORLW	32
$27C0	$E004	    			BZ	L303_ex_L_atol_63
$27C2	$0102	    			MOVLB	2
$27C4	$5150	    			MOVF	atol_c_L0, 0, 1
$27C6	$0A09	    			XORLW	9
$27C8	$E104	    			BNZ	L_atol_63
$27CA	$	L303_ex_L_atol_63:
$27CA	$0102	    			MOVLB	2
$27CC	$4B4E	    			INFSNZ	FARG_atol+0, 1, 1
$27CE	$2B4F	    			INCF	FARG_atol+1, 1, 1
$27D0	$D7ED	    			BRA	___atol_skipws_atol
$27D2	$	L_atol_63:
$27D2	$0102	    			MOVLB	2
$27D4	$6B51	    			CLRF	atol_a_L0, 1
$27D6	$6B52	    			CLRF	atol_a_L0+1, 1
$27D8	$6B53	    			CLRF	atol_a_L0+2, 1
$27DA	$6B54	    			CLRF	atol_a_L0+3, 1
$27DC	$6B55	    			CLRF	atol_sign_L0, 1
$27DE	$C24E	FFE9			MOVFF	FARG_atol+0, FSR0L
$27E2	$C24F	FFEA			MOVFF	FARG_atol+1, FSR0H
$27E6	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$27EA	$5004	    			MOVF	STACK_4, 0, 0
$27EC	$0A2D	    			XORLW	45
$27EE	$E104	    			BNZ	L_atol_64
$27F0	$2B55	    			INCF	atol_sign_L0, 1, 1
$27F2	$4B4E	    			INFSNZ	FARG_atol+0, 1, 1
$27F4	$2B4F	    			INCF	FARG_atol+1, 1, 1
$27F6	$D00C	    			BRA	L_atol_65
$27F8	$	L_atol_64:
$27F8	$C24E	FFE9			MOVFF	FARG_atol+0, FSR0L
$27FC	$C24F	FFEA			MOVFF	FARG_atol+1, FSR0H
$2800	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2804	$5004	    			MOVF	STACK_4, 0, 0
$2806	$0A2B	    			XORLW	43
$2808	$E103	    			BNZ	L_atol_66
$280A	$0102	    			MOVLB	2
$280C	$4B4E	    			INFSNZ	FARG_atol+0, 1, 1
$280E	$2B4F	    			INCF	FARG_atol+1, 1, 1
$2810	$	L_atol_66:
$2810	$	L_atol_65:
$2810	$	___atol_conv_atol:
$2810	$0102	    			MOVLB	2
$2812	$C24E	FFE9			MOVFF	FARG_atol+0, FSR0L
$2816	$C24F	FFEA			MOVFF	FARG_atol+1, FSR0H
$281A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$281E	$C000	F250			MOVFF	STACK_0, atol_c_L0
$2822	$C000	F279			MOVFF	STACK_0, FARG_isdigit+0
$2826	$ECC8	F00D			CALL	_isdigit
$282A	$5200	    			MOVF	STACK_0, 1, 0
$282C	$E02C	    			BZ	L_atol_67
$282E	$C251	F000			MOVFF	atol_a_L0, STACK_0
$2832	$C252	F001			MOVFF	atol_a_L0+1, STACK_0+1
$2836	$C253	F002			MOVFF	atol_a_L0+2, STACK_0+2
$283A	$C254	F003			MOVFF	atol_a_L0+3, STACK_0+3
$283E	$0E0A	    			MOVLW	10
$2840	$6E04	    			MOVWF	STACK_4, 0
$2842	$0E00	    			MOVLW	0
$2844	$6E05	    			MOVWF	STACK_4+1, 0
$2846	$0E00	    			MOVLW	0
$2848	$6E06	    			MOVWF	STACK_4+2, 0
$284A	$0E00	    			MOVLW	0
$284C	$6E07	    			MOVWF	STACK_4+3, 0
$284E	$ECA3	F006			CALL	_mul_32x32_s
$2852	$0E30	    			MOVLW	48
$2854	$0102	    			MOVLB	2
$2856	$5D50	    			SUBWF	atol_c_L0, 0, 1
$2858	$6E04	    			MOVWF	STACK_4, 0
$285A	$6A05	    			CLRF	STACK_4+1, 0
$285C	$0E00	    			MOVLW	0
$285E	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$2860	$5004	    			MOVF	STACK_4, 0, 0
$2862	$2400	    			ADDWF	STACK_0, 0, 0
$2864	$6F51	    			MOVWF	atol_a_L0, 1
$2866	$5005	    			MOVF	STACK_4+1, 0, 0
$2868	$2001	    			ADDWFC	STACK_0+1, 0, 0
$286A	$6F52	    			MOVWF	atol_a_L0+1, 1
$286C	$0E00	    			MOVLW	0
$286E	$BE05	    			BTFSC	STACK_4+1, 7, 0
$2870	$0EFF	    			MOVLW	255
$2872	$2002	    			ADDWFC	STACK_0+2, 0, 0
$2874	$6F53	    			MOVWF	atol_a_L0+2, 1
$2876	$0E00	    			MOVLW	0
$2878	$BE05	    			BTFSC	STACK_4+1, 7, 0
$287A	$0EFF	    			MOVLW	255
$287C	$2003	    			ADDWFC	STACK_0+3, 0, 0
$287E	$6F54	    			MOVWF	atol_a_L0+3, 1
$2880	$4B4E	    			INFSNZ	FARG_atol+0, 1, 1
$2882	$2B4F	    			INCF	FARG_atol+1, 1, 1
$2884	$D7C5	    			BRA	___atol_conv_atol
$2886	$	L_atol_67:
$2886	$0102	    			MOVLB	2
$2888	$5355	    			MOVF	atol_sign_L0, 1, 1
$288A	$E00D	    			BZ	L_atol_68
$288C	$6A00	    			CLRF	STACK_0, 0
$288E	$6A01	    			CLRF	STACK_0+1, 0
$2890	$6A02	    			CLRF	STACK_0+2, 0
$2892	$6A03	    			CLRF	STACK_0+3, 0
$2894	$5151	    			MOVF	atol_a_L0, 0, 1
$2896	$5E00	    			SUBWF	STACK_0, 1, 0
$2898	$5152	    			MOVF	atol_a_L0+1, 0, 1
$289A	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$289C	$5153	    			MOVF	atol_a_L0+2, 0, 1
$289E	$5A02	    			SUBWFB	STACK_0+2, 1, 0
$28A0	$5154	    			MOVF	atol_a_L0+3, 0, 1
$28A2	$5A03	    			SUBWFB	STACK_0+3, 1, 0
$28A4	$0012	    			RETURN
$28A6	$	L_atol_68:
$28A6	$C251	F000			MOVFF	atol_a_L0, STACK_0
$28AA	$C252	F001			MOVFF	atol_a_L0+1, STACK_0+1
$28AE	$C253	F002			MOVFF	atol_a_L0+2, STACK_0+2
$28B2	$C254	F003			MOVFF	atol_a_L0+3, STACK_0+3
$28B6	$0012	    			RETURN
$28B8	$	_initDuty:
;duty.c,26 :: 			void initDuty( unsigned short dtyperiod ){
;duty.c,27 :: 			setpoint = 0;
$28B8	$6A1F	    			CLRF	_setpoint, 0
;duty.c,28 :: 			duty_period = dtyperiod;
$28BA	$C060	F020			MOVFF	FARG_initDuty+0, _duty_period
;duty.c,29 :: 			duty_count = duty_period;
$28BE	$C060	F01E			MOVFF	FARG_initDuty+0, _duty_count
;duty.c,30 :: 			}
$28C2	$0012	    			RETURN
$28C4	$	_initRegisters:
;extruder.c,732 :: 			void initRegisters(){
;extruder.c,735 :: 			PORTB = 0;
$28C4	$6A81	    			CLRF	PORTB, 0
;extruder.c,741 :: 			TRISD = 0b00000100;
$28C6	$0E04	    			MOVLW	4
$28C8	$6E95	    			MOVWF	TRISD, 0
;extruder.c,742 :: 			TRISC = 0b10011011; //RC3 is ext trigger, used for step input. RC0 is dir pin
$28CA	$0E9B	    			MOVLW	155
$28CC	$6E94	    			MOVWF	TRISC, 0
;extruder.c,743 :: 			TRISB = 0b00000000;           // PORTB is output
$28CE	$6A93	    			CLRF	TRISB, 0
;extruder.c,744 :: 			TRISA = 0b11111111;
$28D0	$0EFF	    			MOVLW	255
$28D2	$6E92	    			MOVWF	TRISA, 0
;extruder.c,750 :: 			T0CON = 0b10000000; //256:1 prescaler, internal clock, enable
$28D4	$0E80	    			MOVLW	128
$28D6	$6ED5	    			MOVWF	T0CON, 0
;extruder.c,755 :: 			T1CON = 0b10000101;
$28D8	$0E85	    			MOVLW	133
$28DA	$6ECD	    			MOVWF	T1CON, 0
;extruder.c,758 :: 			ADCON1 = 0x00;
$28DC	$6AC1	    			CLRF	ADCON1, 0
;extruder.c,759 :: 			ANSEL0 = 0b00000011;
$28DE	$0E03	    			MOVLW	3
$28E0	$6EB8	    			MOVWF	ANSEL0, 0
;extruder.c,764 :: 			INTCON2.INTEDG0 = 0; //interrupt on rising edge
$28E2	$9CF1	    			BCF	INTCON2, 6, 0
;extruder.c,767 :: 			INTCON.INT0IE = 1; //enable int0 interrupts
$28E4	$88F2	    			BSF	INTCON, 4, 0
;extruder.c,778 :: 			INTCON.TMR0IE = 1; //enable timer0 interrupts
$28E6	$8AF2	    			BSF	INTCON, 5, 0
;extruder.c,779 :: 			INTCON2.TMR0IP = 0; //timer 0 low priority
$28E8	$94F1	    			BCF	INTCON2, 2, 0
;extruder.c,780 :: 			PIE1.TMR1IE = 1; //enable timer1 interrupts
$28EA	$809D	    			BSF	PIE1, 0, 0
;extruder.c,781 :: 			IPR1.TMR1IP = 0; //timer 1 low priority
$28EC	$909F	    			BCF	IPR1, 0, 0
;extruder.c,790 :: 			SSPSTAT = 0b01000000;
$28EE	$0E40	    			MOVLW	64
$28F0	$6EC7	    			MOVWF	SSPSTAT, 0
;extruder.c,794 :: 			SSPCON=0b00100001;
$28F2	$0E21	    			MOVLW	33
$28F4	$6EC6	    			MOVWF	SSPCON, 0
;extruder.c,796 :: 			SSPCON.SSPEN = 1; //0=input pins, 1=spi port
$28F6	$8AC6	    			BSF	SSPCON, 5, 0
;extruder.c,797 :: 			PIR1.SSPIF = 0;
$28F8	$969E	    			BCF	PIR1, 3, 0
;extruder.c,800 :: 			PIE1.SSPIE = 0;
$28FA	$969D	    			BCF	PIE1, 3, 0
;extruder.c,803 :: 			PIE3.PTIE = 0;
$28FC	$98A3	    			BCF	PIE3, 4, 0
;extruder.c,809 :: 			QEICON = 0b10011000;
$28FE	$0E98	    			MOVLW	152
$2900	$6EB6	    			MOVWF	QEICON, 0
;extruder.c,841 :: 			T5CON = 0b00011001;
$2902	$0E19	    			MOVLW	25
$2904	$6EB7	    			MOVWF	T5CON, 0
;extruder.c,844 :: 			DFLTCON = 0b00000000;
$2906	$6A60	    			CLRF	DFLTCON, 0
;extruder.c,846 :: 			POSCNTH = 0x00;
$2908	$6A67	    			CLRF	POSCNTH, 0
;extruder.c,847 :: 			POSCNTL = 0x00;
$290A	$6A66	    			CLRF	POSCNTL, 0
;extruder.c,848 :: 			VELRL = 0x00;
$290C	$6A68	    			CLRF	VELRL, 0
;extruder.c,849 :: 			VELRH = 0x00;
$290E	$6A69	    			CLRF	VELRH, 0
;extruder.c,852 :: 			MAXCNTH = 0x07;
$2910	$0E07	    			MOVLW	7
$2912	$6E65	    			MOVWF	MAXCNTH, 0
;extruder.c,853 :: 			MAXCNTL = 0xD0;
$2914	$0ED0	    			MOVLW	208
$2916	$6E64	    			MOVWF	MAXCNTL, 0
;extruder.c,859 :: 			PIE3.IC2QEIE = 1;
$2918	$84A3	    			BSF	PIE3, 2, 0
;extruder.c,879 :: 			PTCON0 = 0b00000000;
$291A	$6A7F	    			CLRF	PTCON0, 0
;extruder.c,882 :: 			PTCON1 = 0b1000000;
$291C	$0E40	    			MOVLW	64
$291E	$6E7E	    			MOVWF	PTCON1, 0
;extruder.c,885 :: 			PWMCON0 = 0b00011111;
$2920	$0E1F	    			MOVLW	31
$2922	$6E6F	    			MOVWF	PWMCON0, 0
;extruder.c,889 :: 			PWMCON1 = 0b00000000;
$2924	$6A6E	    			CLRF	PWMCON1, 0
;extruder.c,898 :: 			PTPERH = 0x00;
$2926	$6A7A	    			CLRF	PTPERH, 0
;extruder.c,899 :: 			PTPERL = 0xFF;
$2928	$0EFF	    			MOVLW	255
$292A	$6E7B	    			MOVWF	PTPERL, 0
;extruder.c,907 :: 			PDC0H=0x00;
$292C	$6A78	    			CLRF	PDC0H, 0
;extruder.c,908 :: 			PDC0L = 0x00;
$292E	$6A79	    			CLRF	PDC0L, 0
;extruder.c,909 :: 			PTCON1.F7=1;
$2930	$8E7E	    			BSF	PTCON1, 7, 0
;extruder.c,911 :: 			}
$2932	$0012	    			RETURN
$2934	$	_resetPosition:
;extruder.c,517 :: 			void resetPosition(){
;extruder.c,518 :: 			motorTurns = 0;
$2934	$6A1A	    			CLRF	_motorTurns, 0
$2936	$6A1B	    			CLRF	_motorTurns+1, 0
$2938	$6A1C	    			CLRF	_motorTurns+2, 0
$293A	$6A1D	    			CLRF	_motorTurns+3, 0
;extruder.c,519 :: 			POSCNTH = 0;
$293C	$6A67	    			CLRF	POSCNTH, 0
;extruder.c,520 :: 			POSCNTL = 0;
$293E	$6A66	    			CLRF	POSCNTL, 0
;extruder.c,521 :: 			pid_motor.feedback = 0;
$2940	$0100	    			MOVLB	0
$2942	$6BAF	    			CLRF	_pid_motor+4, 1
$2944	$6BB0	    			CLRF	_pid_motor+5, 1
$2946	$6BB1	    			CLRF	_pid_motor+6, 1
$2948	$6BB2	    			CLRF	_pid_motor+7, 1
;extruder.c,522 :: 			pid_motor.command = 0;
$294A	$6BAB	    			CLRF	_pid_motor+0, 1
$294C	$6BAC	    			CLRF	_pid_motor+1, 1
$294E	$6BAD	    			CLRF	_pid_motor+2, 1
$2950	$6BAE	    			CLRF	_pid_motor+3, 1
;extruder.c,523 :: 			}
$2952	$0012	    			RETURN
$2954	$	_printMessage:
;extruder.c,286 :: 			void printMessage(const char* msg ){
;extruder.c,287 :: 			USART_Write(13);
$2954	$0E0D	    			MOVLW	13
$2956	$0102	    			MOVLB	2
$2958	$6F79	    			MOVWF	FARG_Usart_Write+0, 1
$295A	$EC76	F00D			CALL	_Usart_Write
;extruder.c,288 :: 			strConstCpy(txtBuffer,msg);
$295E	$0E2B	    			MOVLW	_txtBuffer
$2960	$0102	    			MOVLB	2
$2962	$6F4E	    			MOVWF	FARG_strConstCpy+0, 1
$2964	$0E00	    			MOVLW	@_txtBuffer
$2966	$6F4F	    			MOVWF	FARG_strConstCpy+1, 1
$2968	$C1A6	F250			MOVFF	FARG_printMessage+0, FARG_strConstCpy+2
$296C	$C1A7	F251			MOVFF	FARG_printMessage+1, FARG_strConstCpy+3
$2970	$C1A8	F252			MOVFF	FARG_printMessage+2, FARG_strConstCpy+4
$2974	$ECC4	F012			CALL	_strConstCpy
;extruder.c,289 :: 			USART_Send_String(txtBuffer);
$2978	$0E2B	    			MOVLW	_txtBuffer
$297A	$0102	    			MOVLB	2
$297C	$6F61	    			MOVWF	FARG_USART_Send_String+0, 1
$297E	$0E00	    			MOVLW	@_txtBuffer
$2980	$6F62	    			MOVWF	FARG_USART_Send_String+1, 1
$2982	$ECF5	F00D			CALL	_USART_Send_String
;extruder.c,291 :: 			}
$2986	$0012	    			RETURN
$2988	$	_readMemory:
;extruder.c,295 :: 			unsigned short readMemory(){
;extruder.c,296 :: 			unsigned short pidSize = sizeof ( pid_heater );
$2988	$0E4A	    			MOVLW	74
$298A	$0101	    			MOVLB	1
$298C	$6FA6	    			MOVWF	readMemory_pidSize_L0, 1
;extruder.c,300 :: 			Eeprom_Read_Obj(0, &versionId,1 );
$298E	$0102	    			MOVLB	2
$2990	$6B4E	    			CLRF	FARG_Eeprom_Read_Obj+0, 1
$2992	$6B4F	    			CLRF	FARG_Eeprom_Read_Obj+1, 1
$2994	$0EA7	    			MOVLW	readMemory_versionId_L0
$2996	$6F50	    			MOVWF	FARG_Eeprom_Read_Obj+2, 1
$2998	$0E01	    			MOVLW	@readMemory_versionId_L0
$299A	$6F51	    			MOVWF	FARG_Eeprom_Read_Obj+3, 1
$299C	$0E01	    			MOVLW	1
$299E	$6F52	    			MOVWF	FARG_Eeprom_Read_Obj+4, 1
$29A0	$ECED	F012			CALL	_Eeprom_Read_Obj
;extruder.c,301 :: 			if ( versionId == EEPROM_VERSION_ID ){
$29A4	$0101	    			MOVLB	1
$29A6	$51A7	    			MOVF	readMemory_versionId_L0, 0, 1
$29A8	$1853	    			XORWF	_EEPROM_VERSION_ID, 0, 0
$29AA	$E120	    			BNZ	L_readMemory_10
;extruder.c,302 :: 			Eeprom_Read_Obj(1,&pid_heater,pidSize );
$29AC	$0E01	    			MOVLW	1
$29AE	$0102	    			MOVLB	2
$29B0	$6F4E	    			MOVWF	FARG_Eeprom_Read_Obj+0, 1
$29B2	$0E00	    			MOVLW	0
$29B4	$6F4F	    			MOVWF	FARG_Eeprom_Read_Obj+1, 1
$29B6	$0E61	    			MOVLW	_pid_heater
$29B8	$6F50	    			MOVWF	FARG_Eeprom_Read_Obj+2, 1
$29BA	$0E00	    			MOVLW	@_pid_heater
$29BC	$6F51	    			MOVWF	FARG_Eeprom_Read_Obj+3, 1
$29BE	$C1A6	F252			MOVFF	readMemory_pidSize_L0, FARG_Eeprom_Read_Obj+4
$29C2	$ECED	F012			CALL	_Eeprom_Read_Obj
;extruder.c,303 :: 			Eeprom_Read_Obj(pidSize+2,&pid_motor,pidSize);
$29C6	$0E02	    			MOVLW	2
$29C8	$0101	    			MOVLB	1
$29CA	$25A6	    			ADDWF	readMemory_pidSize_L0, 0, 1
$29CC	$0102	    			MOVLB	2
$29CE	$6F4E	    			MOVWF	FARG_Eeprom_Read_Obj+0, 1
$29D0	$6B4F	    			CLRF	FARG_Eeprom_Read_Obj+1, 1
$29D2	$0E00	    			MOVLW	0
$29D4	$234F	    			ADDWFC	FARG_Eeprom_Read_Obj+1, 1, 1
$29D6	$0EAB	    			MOVLW	_pid_motor
$29D8	$6F50	    			MOVWF	FARG_Eeprom_Read_Obj+2, 1
$29DA	$0E00	    			MOVLW	@_pid_motor
$29DC	$6F51	    			MOVWF	FARG_Eeprom_Read_Obj+3, 1
$29DE	$C1A6	F252			MOVFF	readMemory_pidSize_L0, FARG_Eeprom_Read_Obj+4
$29E2	$ECED	F012			CALL	_Eeprom_Read_Obj
;extruder.c,304 :: 			return 1;
$29E6	$0E01	    			MOVLW	1
$29E8	$6E00	    			MOVWF	STACK_0, 0
$29EA	$0012	    			RETURN
;extruder.c,305 :: 			}
$29EC	$	L_readMemory_10:
;extruder.c,307 :: 			return 0;
$29EC	$6A00	    			CLRF	STACK_0, 0
;extruder.c,309 :: 			}
$29EE	$0012	    			RETURN
$29F0	$	_Usart_Data_Ready:
$29F0	$6A01	    			CLRF	STACK_1, 0
$29F2	$BA9E	    			BTFSC	PIR1, 5, 0
$29F4	$2A01	    			INCF	STACK_1, 1, 0
$29F6	$C001	F000			MOVFF	STACK_1, STACK_0
$29FA	$0012	    			RETURN
$29FC	$	_Usart_Read:
$29FC	$CFAE	F060			MOVFF	RCREG, Usart_Read_tmp_L0
$2A00	$A2AB	    			BTFSS	RCSTA, 1, 0
$2A02	$D002	    			BRA	L_Usart_Read_2
$2A04	$98AB	    			BCF	RCSTA, 4, 0
$2A06	$88AB	    			BSF	RCSTA, 4, 0
$2A08	$	L_Usart_Read_2:
$2A08	$C060	F000			MOVFF	Usart_Read_tmp_L0, STACK_0
$2A0C	$0012	    			RETURN
$2A0E	$	_pushChar:
;extruder.c,265 :: 			int pushChar ( char ch ){
;extruder.c,266 :: 			if ( ch == 10u || ch == 13u){
$2A0E	$0100	    			MOVLB	0
$2A10	$5160	    			MOVF	FARG_pushChar+0, 0, 1
$2A12	$0A0A	    			XORLW	10
$2A14	$E003	    			BZ	L36_ex_L_pushChar_6
$2A16	$5160	    			MOVF	FARG_pushChar+0, 0, 1
$2A18	$0A0D	    			XORLW	13
$2A1A	$E116	    			BNZ	L_pushChar_6
$2A1C	$	L36_ex_L_pushChar_6:
;extruder.c,268 :: 			cmdBuffer[txtPos] = 0;
$2A1C	$0EF5	    			MOVLW	_cmdBuffer
$2A1E	$6EE1	    			MOVWF	FSR1L, 0
$2A20	$0E00	    			MOVLW	@_cmdBuffer
$2A22	$6EE2	    			MOVWF	FSR1L+1, 0
$2A24	$5054	    			MOVF	_txtPos, 0, 0
$2A26	$26E1	    			ADDWF	FSR1L, 1, 0
$2A28	$B0D8	    			BTFSC	STATUS, C, 0
$2A2A	$2AE2	    			INCF	FSR1L+1, 1, 0
$2A2C	$6AE6	    			CLRF	POSTINC1, 0
;extruder.c,269 :: 			if ( txtPos > 0u ){
$2A2E	$5054	    			MOVF	_txtPos, 0, 0
$2A30	$0800	    			SUBLW	0
$2A32	$E206	    			BC	L_pushChar_7
;extruder.c,270 :: 			txtPos = 0;
$2A34	$6A54	    			CLRF	_txtPos, 0
;extruder.c,271 :: 			return 1u;
$2A36	$0E01	    			MOVLW	1
$2A38	$6E00	    			MOVWF	STACK_0, 0
$2A3A	$0E00	    			MOVLW	0
$2A3C	$6E01	    			MOVWF	STACK_0+1, 0
$2A3E	$0012	    			RETURN
;extruder.c,272 :: 			}
$2A40	$	L_pushChar_7:
;extruder.c,274 :: 			return 0u;
$2A40	$0100	    			MOVLB	0
$2A42	$6A00	    			CLRF	STACK_0, 0
$2A44	$6A01	    			CLRF	STACK_0+1, 0
$2A46	$0012	    			RETURN
;extruder.c,277 :: 			}
$2A48	$	L_pushChar_6:
;extruder.c,280 :: 			cmdBuffer[txtPos] = ch;
$2A48	$0EF5	    			MOVLW	_cmdBuffer
$2A4A	$6EE1	    			MOVWF	FSR1L, 0
$2A4C	$0E00	    			MOVLW	@_cmdBuffer
$2A4E	$6EE2	    			MOVWF	FSR1L+1, 0
$2A50	$5054	    			MOVF	_txtPos, 0, 0
$2A52	$26E1	    			ADDWF	FSR1L, 1, 0
$2A54	$B0D8	    			BTFSC	STATUS, C, 0
$2A56	$2AE2	    			INCF	FSR1L+1, 1, 0
$2A58	$C060	FFE6			MOVFF	FARG_pushChar+0, POSTINC1
;extruder.c,281 :: 			txtPos++;
$2A5C	$2A54	    			INCF	_txtPos, 1, 0
;extruder.c,282 :: 			return 0;
$2A5E	$6A00	    			CLRF	STACK_0, 0
$2A60	$6A01	    			CLRF	STACK_0+1, 0
;extruder.c,284 :: 			}
$2A62	$0012	    			RETURN
$2A64	$	_commandMatches:
;extruder.c,917 :: 			unsigned short commandMatches(const char *source ){
;extruder.c,918 :: 			char *cmdptr = cmdBuffer;
$2A64	$0EF5	    			MOVLW	_cmdBuffer
$2A66	$0101	    			MOVLB	1
$2A68	$6FA9	    			MOVWF	commandMatches_cmdptr_L0, 1
$2A6A	$0E00	    			MOVLW	@_cmdBuffer
$2A6C	$6FAA	    			MOVWF	commandMatches_cmdptr_L0+1, 1
;extruder.c,919 :: 			while(*source && *cmdptr ){
$2A6E	$	L_commandMatches_56:
$2A6E	$C1A6	FFF6			MOVFF	FARG_commandMatches+0, TBLPTRL
$2A72	$C1A7	FFF7			MOVFF	FARG_commandMatches+1, TBLPTRH
$2A76	$C1A8	FFF8			MOVFF	FARG_commandMatches+2, TBLPTRU
$2A7A	$0009	    			TBLRD*+
$2A7C	$CFF5	F000			MOVFF	TABLAT, STACK_0
$2A80	$5200	    			MOVF	STACK_0, 1, 0
$2A82	$E025	    			BZ	L_commandMatches_57
$2A84	$C1A9	FFE9			MOVFF	commandMatches_cmdptr_L0, FSR0L
$2A88	$C1AA	FFEA			MOVFF	commandMatches_cmdptr_L0+1, FSR0H
$2A8C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2A90	$5200	    			MOVF	STACK_0, 1, 0
$2A92	$E01D	    			BZ	L_commandMatches_57
$2A94	$	L485_ex_L_commandMatches_57:
;extruder.c,920 :: 			if ( *cmdptr != *source )
$2A94	$C1A9	FFE9			MOVFF	commandMatches_cmdptr_L0, FSR0L
$2A98	$C1AA	FFEA			MOVFF	commandMatches_cmdptr_L0+1, FSR0H
$2A9C	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$2AA0	$C1A6	FFF6			MOVFF	FARG_commandMatches+0, TBLPTRL
$2AA4	$C1A7	FFF7			MOVFF	FARG_commandMatches+1, TBLPTRH
$2AA8	$C1A8	FFF8			MOVFF	FARG_commandMatches+2, TBLPTRU
$2AAC	$0009	    			TBLRD*+
$2AAE	$CFF5	F001			MOVFF	TABLAT, STACK_1
$2AB2	$5002	    			MOVF	STACK_2, 0, 0
$2AB4	$1801	    			XORWF	STACK_1, 0, 0
$2AB6	$E002	    			BZ	L_commandMatches_60
;extruder.c,921 :: 			return 0;
$2AB8	$6A00	    			CLRF	STACK_0, 0
$2ABA	$0012	    			RETURN
$2ABC	$	L_commandMatches_60:
;extruder.c,922 :: 			cmdptr++;
$2ABC	$0101	    			MOVLB	1
$2ABE	$4BA9	    			INFSNZ	commandMatches_cmdptr_L0, 1, 1
$2AC0	$2BAA	    			INCF	commandMatches_cmdptr_L0+1, 1, 1
;extruder.c,923 :: 			source++;
$2AC2	$0E01	    			MOVLW	1
$2AC4	$27A6	    			ADDWF	FARG_commandMatches+0, 1, 1
$2AC6	$0E00	    			MOVLW	0
$2AC8	$23A7	    			ADDWFC	FARG_commandMatches+1, 1, 1
$2ACA	$23A8	    			ADDWFC	FARG_commandMatches+2, 1, 1
;extruder.c,924 :: 			}
$2ACC	$D7D0	    			BRA	L_commandMatches_56
$2ACE	$	L_commandMatches_57:
;extruder.c,925 :: 			return 1;
$2ACE	$0E01	    			MOVLW	1
$2AD0	$6E00	    			MOVWF	STACK_0, 0
;extruder.c,926 :: 			}
$2AD2	$0012	    			RETURN
$2AD4	$	_printStatus:
$2AD4	$0E68	    			MOVLW	104
$2AD6	$0101	    			MOVLB	1
$2AD8	$6FA6	    			MOVWF	lstr26_extruder+0, 1
$2ADA	$0E74	    			MOVLW	116
$2ADC	$6FA7	    			MOVWF	lstr26_extruder+1, 1
$2ADE	$0E3D	    			MOVLW	61
$2AE0	$6FA8	    			MOVWF	lstr26_extruder+2, 1
$2AE2	$6BA9	    			CLRF	lstr26_extruder+3, 1
$2AE4	$0E2C	    			MOVLW	44
$2AE6	$6FAA	    			MOVWF	lstr27_extruder+0, 1
$2AE8	$0E68	    			MOVLW	104
$2AEA	$6FAB	    			MOVWF	lstr27_extruder+1, 1
$2AEC	$0E76	    			MOVLW	118
$2AEE	$6FAC	    			MOVWF	lstr27_extruder+2, 1
$2AF0	$0E3D	    			MOVLW	61
$2AF2	$6FAD	    			MOVWF	lstr27_extruder+3, 1
$2AF4	$6BAE	    			CLRF	lstr27_extruder+4, 1
$2AF6	$0E2C	    			MOVLW	44
$2AF8	$6FAF	    			MOVWF	lstr28_extruder+0, 1
$2AFA	$0E68	    			MOVLW	104
$2AFC	$6FB0	    			MOVWF	lstr28_extruder+1, 1
$2AFE	$0E70	    			MOVLW	112
$2B00	$6FB1	    			MOVWF	lstr28_extruder+2, 1
$2B02	$0E3D	    			MOVLW	61
$2B04	$6FB2	    			MOVWF	lstr28_extruder+3, 1
$2B06	$6BB3	    			CLRF	lstr28_extruder+4, 1
$2B08	$0E2C	    			MOVLW	44
$2B0A	$6FB4	    			MOVWF	lstr29_extruder+0, 1
$2B0C	$0E68	    			MOVLW	104
$2B0E	$6FB5	    			MOVWF	lstr29_extruder+1, 1
$2B10	$0E69	    			MOVLW	105
$2B12	$6FB6	    			MOVWF	lstr29_extruder+2, 1
$2B14	$0E3D	    			MOVLW	61
$2B16	$6FB7	    			MOVWF	lstr29_extruder+3, 1
$2B18	$6BB8	    			CLRF	lstr29_extruder+4, 1
$2B1A	$0E2C	    			MOVLW	44
$2B1C	$6FB9	    			MOVWF	lstr30_extruder+0, 1
$2B1E	$0E68	    			MOVLW	104
$2B20	$6FBA	    			MOVWF	lstr30_extruder+1, 1
$2B22	$0E64	    			MOVLW	100
$2B24	$6FBB	    			MOVWF	lstr30_extruder+2, 1
$2B26	$0E3D	    			MOVLW	61
$2B28	$6FBC	    			MOVWF	lstr30_extruder+3, 1
$2B2A	$6BBD	    			CLRF	lstr30_extruder+4, 1
$2B2C	$0E2C	    			MOVLW	44
$2B2E	$6FBE	    			MOVWF	lstr31_extruder+0, 1
$2B30	$0E68	    			MOVLW	104
$2B32	$6FBF	    			MOVWF	lstr31_extruder+1, 1
$2B34	$0E66	    			MOVLW	102
$2B36	$6FC0	    			MOVWF	lstr31_extruder+2, 1
$2B38	$0E67	    			MOVLW	103
$2B3A	$6FC1	    			MOVWF	lstr31_extruder+3, 1
$2B3C	$0E30	    			MOVLW	48
$2B3E	$6FC2	    			MOVWF	lstr31_extruder+4, 1
$2B40	$0E3D	    			MOVLW	61
$2B42	$6FC3	    			MOVWF	lstr31_extruder+5, 1
$2B44	$6BC4	    			CLRF	lstr31_extruder+6, 1
$2B46	$0E2C	    			MOVLW	44
$2B48	$6FC5	    			MOVWF	lstr32_extruder+0, 1
$2B4A	$0E68	    			MOVLW	104
$2B4C	$6FC6	    			MOVWF	lstr32_extruder+1, 1
$2B4E	$0E6F	    			MOVLW	111
$2B50	$6FC7	    			MOVWF	lstr32_extruder+2, 1
$2B52	$0E75	    			MOVLW	117
$2B54	$6FC8	    			MOVWF	lstr32_extruder+3, 1
$2B56	$0E74	    			MOVLW	116
$2B58	$6FC9	    			MOVWF	lstr32_extruder+4, 1
$2B5A	$0E3D	    			MOVLW	61
$2B5C	$6FCA	    			MOVWF	lstr32_extruder+5, 1
$2B5E	$6BCB	    			CLRF	lstr32_extruder+6, 1
$2B60	$0E2C	    			MOVLW	44
$2B62	$6FCC	    			MOVWF	lstr33_extruder+0, 1
$2B64	$0E68	    			MOVLW	104
$2B66	$6FCD	    			MOVWF	lstr33_extruder+1, 1
$2B68	$0E65	    			MOVLW	101
$2B6A	$6FCE	    			MOVWF	lstr33_extruder+2, 1
$2B6C	$0E72	    			MOVLW	114
$2B6E	$6FCF	    			MOVWF	lstr33_extruder+3, 1
$2B70	$0E72	    			MOVLW	114
$2B72	$6FD0	    			MOVWF	lstr33_extruder+4, 1
$2B74	$0E3D	    			MOVLW	61
$2B76	$6FD1	    			MOVWF	lstr33_extruder+5, 1
$2B78	$6BD2	    			CLRF	lstr33_extruder+6, 1
$2B7A	$0E2C	    			MOVLW	44
$2B7C	$6FD3	    			MOVWF	lstr34_extruder+0, 1
$2B7E	$0E68	    			MOVLW	104
$2B80	$6FD4	    			MOVWF	lstr34_extruder+1, 1
$2B82	$0E65	    			MOVLW	101
$2B84	$6FD5	    			MOVWF	lstr34_extruder+2, 1
$2B86	$0E72	    			MOVLW	114
$2B88	$6FD6	    			MOVWF	lstr34_extruder+3, 1
$2B8A	$0E72	    			MOVLW	114
$2B8C	$6FD7	    			MOVWF	lstr34_extruder+4, 1
$2B8E	$0E69	    			MOVLW	105
$2B90	$6FD8	    			MOVWF	lstr34_extruder+5, 1
$2B92	$0E3D	    			MOVLW	61
$2B94	$6FD9	    			MOVWF	lstr34_extruder+6, 1
$2B96	$6BDA	    			CLRF	lstr34_extruder+7, 1
$2B98	$0E2C	    			MOVLW	44
$2B9A	$6FDB	    			MOVWF	lstr35_extruder+0, 1
$2B9C	$0E68	    			MOVLW	104
$2B9E	$6FDC	    			MOVWF	lstr35_extruder+1, 1
$2BA0	$0E65	    			MOVLW	101
$2BA2	$6FDD	    			MOVWF	lstr35_extruder+2, 1
$2BA4	$0E72	    			MOVLW	114
$2BA6	$6FDE	    			MOVWF	lstr35_extruder+3, 1
$2BA8	$0E72	    			MOVLW	114
$2BAA	$6FDF	    			MOVWF	lstr35_extruder+4, 1
$2BAC	$0E64	    			MOVLW	100
$2BAE	$6FE0	    			MOVWF	lstr35_extruder+5, 1
$2BB0	$0E3D	    			MOVLW	61
$2BB2	$6FE1	    			MOVWF	lstr35_extruder+6, 1
$2BB4	$6BE2	    			CLRF	lstr35_extruder+7, 1
$2BB6	$0E2C	    			MOVLW	44
$2BB8	$6FE3	    			MOVWF	lstr36_extruder+0, 1
$2BBA	$0E68	    			MOVLW	104
$2BBC	$6FE4	    			MOVWF	lstr36_extruder+1, 1
$2BBE	$0E65	    			MOVLW	101
$2BC0	$6FE5	    			MOVWF	lstr36_extruder+2, 1
$2BC2	$0E3D	    			MOVLW	61
$2BC4	$6FE6	    			MOVWF	lstr36_extruder+3, 1
$2BC6	$6BE7	    			CLRF	lstr36_extruder+4, 1
$2BC8	$0E2C	    			MOVLW	44
$2BCA	$6FE8	    			MOVWF	lstr37_extruder+0, 1
$2BCC	$0E6D	    			MOVLW	109
$2BCE	$6FE9	    			MOVWF	lstr37_extruder+1, 1
$2BD0	$0E63	    			MOVLW	99
$2BD2	$6FEA	    			MOVWF	lstr37_extruder+2, 1
$2BD4	$0E6D	    			MOVLW	109
$2BD6	$6FEB	    			MOVWF	lstr37_extruder+3, 1
$2BD8	$0E64	    			MOVLW	100
$2BDA	$6FEC	    			MOVWF	lstr37_extruder+4, 1
$2BDC	$0E3D	    			MOVLW	61
$2BDE	$6FED	    			MOVWF	lstr37_extruder+5, 1
$2BE0	$6BEE	    			CLRF	lstr37_extruder+6, 1
$2BE2	$0E2C	    			MOVLW	44
$2BE4	$6FEF	    			MOVWF	lstr38_extruder+0, 1
$2BE6	$0E6D	    			MOVLW	109
$2BE8	$6FF0	    			MOVWF	lstr38_extruder+1, 1
$2BEA	$0E76	    			MOVLW	118
$2BEC	$6FF1	    			MOVWF	lstr38_extruder+2, 1
$2BEE	$0E3D	    			MOVLW	61
$2BF0	$6FF2	    			MOVWF	lstr38_extruder+3, 1
$2BF2	$6BF3	    			CLRF	lstr38_extruder+4, 1
$2BF4	$0E2C	    			MOVLW	44
$2BF6	$6FF4	    			MOVWF	lstr39_extruder+0, 1
$2BF8	$0E6D	    			MOVLW	109
$2BFA	$6FF5	    			MOVWF	lstr39_extruder+1, 1
$2BFC	$0E70	    			MOVLW	112
$2BFE	$6FF6	    			MOVWF	lstr39_extruder+2, 1
$2C00	$0E3D	    			MOVLW	61
$2C02	$6FF7	    			MOVWF	lstr39_extruder+3, 1
$2C04	$6BF8	    			CLRF	lstr39_extruder+4, 1
$2C06	$0E2C	    			MOVLW	44
$2C08	$6FF9	    			MOVWF	lstr40_extruder+0, 1
$2C0A	$0E6D	    			MOVLW	109
$2C0C	$6FFA	    			MOVWF	lstr40_extruder+1, 1
$2C0E	$0E69	    			MOVLW	105
$2C10	$6FFB	    			MOVWF	lstr40_extruder+2, 1
$2C12	$0E3D	    			MOVLW	61
$2C14	$6FFC	    			MOVWF	lstr40_extruder+3, 1
$2C16	$6BFD	    			CLRF	lstr40_extruder+4, 1
$2C18	$0E2C	    			MOVLW	44
$2C1A	$6FFE	    			MOVWF	lstr41_extruder+0, 1
$2C1C	$0E6D	    			MOVLW	109
$2C1E	$6FFF	    			MOVWF	lstr41_extruder+1, 1
$2C20	$0E64	    			MOVLW	100
$2C22	$0102	    			MOVLB	2
$2C24	$6F00	    			MOVWF	lstr41_extruder+2, 1
$2C26	$0E3D	    			MOVLW	61
$2C28	$6F01	    			MOVWF	lstr41_extruder+3, 1
$2C2A	$6B02	    			CLRF	lstr41_extruder+4, 1
$2C2C	$0E2C	    			MOVLW	44
$2C2E	$6F03	    			MOVWF	lstr42_extruder+0, 1
$2C30	$0E6D	    			MOVLW	109
$2C32	$6F04	    			MOVWF	lstr42_extruder+1, 1
$2C34	$0E66	    			MOVLW	102
$2C36	$6F05	    			MOVWF	lstr42_extruder+2, 1
$2C38	$0E67	    			MOVLW	103
$2C3A	$6F06	    			MOVWF	lstr42_extruder+3, 1
$2C3C	$0E3D	    			MOVLW	61
$2C3E	$6F07	    			MOVWF	lstr42_extruder+4, 1
$2C40	$6B08	    			CLRF	lstr42_extruder+5, 1
$2C42	$0E2C	    			MOVLW	44
$2C44	$6F09	    			MOVWF	lstr43_extruder+0, 1
$2C46	$0E6D	    			MOVLW	109
$2C48	$6F0A	    			MOVWF	lstr43_extruder+1, 1
$2C4A	$0E6F	    			MOVLW	111
$2C4C	$6F0B	    			MOVWF	lstr43_extruder+2, 1
$2C4E	$0E75	    			MOVLW	117
$2C50	$6F0C	    			MOVWF	lstr43_extruder+3, 1
$2C52	$0E74	    			MOVLW	116
$2C54	$6F0D	    			MOVWF	lstr43_extruder+4, 1
$2C56	$0E3D	    			MOVLW	61
$2C58	$6F0E	    			MOVWF	lstr43_extruder+5, 1
$2C5A	$6B0F	    			CLRF	lstr43_extruder+6, 1
$2C5C	$0E2C	    			MOVLW	44
$2C5E	$6F10	    			MOVWF	lstr44_extruder+0, 1
$2C60	$0E6D	    			MOVLW	109
$2C62	$6F11	    			MOVWF	lstr44_extruder+1, 1
$2C64	$0E65	    			MOVLW	101
$2C66	$6F12	    			MOVWF	lstr44_extruder+2, 1
$2C68	$0E72	    			MOVLW	114
$2C6A	$6F13	    			MOVWF	lstr44_extruder+3, 1
$2C6C	$0E72	    			MOVLW	114
$2C6E	$6F14	    			MOVWF	lstr44_extruder+4, 1
$2C70	$0E3D	    			MOVLW	61
$2C72	$6F15	    			MOVWF	lstr44_extruder+5, 1
$2C74	$6B16	    			CLRF	lstr44_extruder+6, 1
$2C76	$0E2C	    			MOVLW	44
$2C78	$6F17	    			MOVWF	lstr45_extruder+0, 1
$2C7A	$0E6D	    			MOVLW	109
$2C7C	$6F18	    			MOVWF	lstr45_extruder+1, 1
$2C7E	$0E65	    			MOVLW	101
$2C80	$6F19	    			MOVWF	lstr45_extruder+2, 1
$2C82	$0E72	    			MOVLW	114
$2C84	$6F1A	    			MOVWF	lstr45_extruder+3, 1
$2C86	$0E72	    			MOVLW	114
$2C88	$6F1B	    			MOVWF	lstr45_extruder+4, 1
$2C8A	$0E69	    			MOVLW	105
$2C8C	$6F1C	    			MOVWF	lstr45_extruder+5, 1
$2C8E	$0E3D	    			MOVLW	61
$2C90	$6F1D	    			MOVWF	lstr45_extruder+6, 1
$2C92	$6B1E	    			CLRF	lstr45_extruder+7, 1
$2C94	$0E2C	    			MOVLW	44
$2C96	$6F1F	    			MOVWF	lstr46_extruder+0, 1
$2C98	$0E6D	    			MOVLW	109
$2C9A	$6F20	    			MOVWF	lstr46_extruder+1, 1
$2C9C	$0E65	    			MOVLW	101
$2C9E	$6F21	    			MOVWF	lstr46_extruder+2, 1
$2CA0	$0E72	    			MOVLW	114
$2CA2	$6F22	    			MOVWF	lstr46_extruder+3, 1
$2CA4	$0E72	    			MOVLW	114
$2CA6	$6F23	    			MOVWF	lstr46_extruder+4, 1
$2CA8	$0E64	    			MOVLW	100
$2CAA	$6F24	    			MOVWF	lstr46_extruder+5, 1
$2CAC	$0E3D	    			MOVLW	61
$2CAE	$6F25	    			MOVWF	lstr46_extruder+6, 1
$2CB0	$6B26	    			CLRF	lstr46_extruder+7, 1
$2CB2	$0E2C	    			MOVLW	44
$2CB4	$6F27	    			MOVWF	lstr47_extruder+0, 1
$2CB6	$0E6D	    			MOVLW	109
$2CB8	$6F28	    			MOVWF	lstr47_extruder+1, 1
$2CBA	$0E65	    			MOVLW	101
$2CBC	$6F29	    			MOVWF	lstr47_extruder+2, 1
$2CBE	$0E3D	    			MOVLW	61
$2CC0	$6F2A	    			MOVWF	lstr47_extruder+3, 1
$2CC2	$6B2B	    			CLRF	lstr47_extruder+4, 1
$2CC4	$0E2C	    			MOVLW	44
$2CC6	$6F2C	    			MOVWF	lstr48_extruder+0, 1
$2CC8	$0E6D	    			MOVLW	109
$2CCA	$6F2D	    			MOVWF	lstr48_extruder+1, 1
$2CCC	$0E54	    			MOVLW	84
$2CCE	$6F2E	    			MOVWF	lstr48_extruder+2, 1
$2CD0	$0E75	    			MOVLW	117
$2CD2	$6F2F	    			MOVWF	lstr48_extruder+3, 1
$2CD4	$0E72	    			MOVLW	114
$2CD6	$6F30	    			MOVWF	lstr48_extruder+4, 1
$2CD8	$0E6E	    			MOVLW	110
$2CDA	$6F31	    			MOVWF	lstr48_extruder+5, 1
$2CDC	$0E73	    			MOVLW	115
$2CDE	$6F32	    			MOVWF	lstr48_extruder+6, 1
$2CE0	$0E3D	    			MOVLW	61
$2CE2	$6F33	    			MOVWF	lstr48_extruder+7, 1
$2CE4	$6B34	    			CLRF	lstr48_extruder+8, 1
$2CE6	$0E2C	    			MOVLW	44
$2CE8	$6F35	    			MOVWF	lstr49_extruder+0, 1
$2CEA	$0E6D	    			MOVLW	109
$2CEC	$6F36	    			MOVWF	lstr49_extruder+1, 1
$2CEE	$0E67	    			MOVLW	103
$2CF0	$6F37	    			MOVWF	lstr49_extruder+2, 1
$2CF2	$0E65	    			MOVLW	101
$2CF4	$6F38	    			MOVWF	lstr49_extruder+3, 1
$2CF6	$0E3D	    			MOVLW	61
$2CF8	$6F39	    			MOVWF	lstr49_extruder+4, 1
$2CFA	$6B3A	    			CLRF	lstr49_extruder+5, 1
$2CFC	$0E2C	    			MOVLW	44
$2CFE	$6F3B	    			MOVWF	lstr50_extruder+0, 1
$2D00	$0E68	    			MOVLW	104
$2D02	$6F3C	    			MOVWF	lstr50_extruder+1, 1
$2D04	$0E67	    			MOVLW	103
$2D06	$6F3D	    			MOVWF	lstr50_extruder+2, 1
$2D08	$0E65	    			MOVLW	101
$2D0A	$6F3E	    			MOVWF	lstr50_extruder+3, 1
$2D0C	$0E3D	    			MOVLW	61
$2D0E	$6F3F	    			MOVWF	lstr50_extruder+4, 1
$2D10	$6B40	    			CLRF	lstr50_extruder+5, 1
$2D12	$0E2C	    			MOVLW	44
$2D14	$6F41	    			MOVWF	lstr51_extruder+0, 1
$2D16	$0E64	    			MOVLW	100
$2D18	$6F42	    			MOVWF	lstr51_extruder+1, 1
$2D1A	$0E69	    			MOVLW	105
$2D1C	$6F43	    			MOVWF	lstr51_extruder+2, 1
$2D1E	$0E72	    			MOVLW	114
$2D20	$6F44	    			MOVWF	lstr51_extruder+3, 1
$2D22	$0E73	    			MOVLW	115
$2D24	$6F45	    			MOVWF	lstr51_extruder+4, 1
$2D26	$0E77	    			MOVLW	119
$2D28	$6F46	    			MOVWF	lstr51_extruder+5, 1
$2D2A	$0E69	    			MOVLW	105
$2D2C	$6F47	    			MOVWF	lstr51_extruder+6, 1
$2D2E	$0E74	    			MOVLW	116
$2D30	$6F48	    			MOVWF	lstr51_extruder+7, 1
$2D32	$0E63	    			MOVLW	99
$2D34	$6F49	    			MOVWF	lstr51_extruder+8, 1
$2D36	$0E68	    			MOVLW	104
$2D38	$6F4A	    			MOVWF	lstr51_extruder+9, 1
$2D3A	$0E73	    			MOVLW	115
$2D3C	$6F4B	    			MOVWF	lstr51_extruder+10, 1
$2D3E	$0E3D	    			MOVLW	61
$2D40	$6F4C	    			MOVWF	lstr51_extruder+11, 1
$2D42	$6B4D	    			CLRF	lstr51_extruder+12, 1
;extruder.c,703 :: 			void printStatus(){
;extruder.c,704 :: 			printFloat("ht=",pid_heater.command);
$2D44	$0EA6	    			MOVLW	lstr26_extruder
$2D46	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2D48	$0E01	    			MOVLW	@lstr26_extruder
$2D4A	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2D4C	$C061	F000			MOVFF	_pid_heater+0, STACK_0
$2D50	$C062	F001			MOVFF	_pid_heater+1, STACK_0+1
$2D54	$C063	F002			MOVFF	_pid_heater+2, STACK_0+2
$2D58	$C064	F003			MOVFF	_pid_heater+3, STACK_0+3
$2D5C	$EC05	F003			CALL	_longint2double
$2D60	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2D64	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2D68	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2D6C	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2D70	$EC0A	F013			CALL	_printFloat
;extruder.c,705 :: 			printFloat(",hv=",pid_heater.feedback);
$2D74	$0EAA	    			MOVLW	lstr27_extruder
$2D76	$0102	    			MOVLB	2
$2D78	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2D7A	$0E01	    			MOVLW	@lstr27_extruder
$2D7C	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2D7E	$C065	F000			MOVFF	_pid_heater+4, STACK_0
$2D82	$C066	F001			MOVFF	_pid_heater+5, STACK_0+1
$2D86	$C067	F002			MOVFF	_pid_heater+6, STACK_0+2
$2D8A	$C068	F003			MOVFF	_pid_heater+7, STACK_0+3
$2D8E	$EC05	F003			CALL	_longint2double
$2D92	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2D96	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2D9A	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2D9E	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2DA2	$EC0A	F013			CALL	_printFloat
;extruder.c,706 :: 			printFloat(",hp=",pid_heater.pgain);
$2DA6	$0EAF	    			MOVLW	lstr28_extruder
$2DA8	$0102	    			MOVLB	2
$2DAA	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2DAC	$0E01	    			MOVLW	@lstr28_extruder
$2DAE	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2DB0	$C091	F250			MOVFF	_pid_heater+48, FARG_printFloat+2
$2DB4	$C092	F251			MOVFF	_pid_heater+49, FARG_printFloat+3
$2DB8	$C093	F252			MOVFF	_pid_heater+50, FARG_printFloat+4
$2DBC	$C094	F253			MOVFF	_pid_heater+51, FARG_printFloat+5
$2DC0	$EC0A	F013			CALL	_printFloat
;extruder.c,707 :: 			printFloat(",hi=",pid_heater.igain);
$2DC4	$0EB4	    			MOVLW	lstr29_extruder
$2DC6	$0102	    			MOVLB	2
$2DC8	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2DCA	$0E01	    			MOVLW	@lstr29_extruder
$2DCC	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2DCE	$C095	F250			MOVFF	_pid_heater+52, FARG_printFloat+2
$2DD2	$C096	F251			MOVFF	_pid_heater+53, FARG_printFloat+3
$2DD6	$C097	F252			MOVFF	_pid_heater+54, FARG_printFloat+4
$2DDA	$C098	F253			MOVFF	_pid_heater+55, FARG_printFloat+5
$2DDE	$EC0A	F013			CALL	_printFloat
;extruder.c,708 :: 			printFloat(",hd=",pid_heater.dgain);
$2DE2	$0EB9	    			MOVLW	lstr30_extruder
$2DE4	$0102	    			MOVLB	2
$2DE6	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2DE8	$0E01	    			MOVLW	@lstr30_extruder
$2DEA	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2DEC	$C099	F250			MOVFF	_pid_heater+56, FARG_printFloat+2
$2DF0	$C09A	F251			MOVFF	_pid_heater+57, FARG_printFloat+3
$2DF4	$C09B	F252			MOVFF	_pid_heater+58, FARG_printFloat+4
$2DF8	$C09C	F253			MOVFF	_pid_heater+59, FARG_printFloat+5
$2DFC	$EC0A	F013			CALL	_printFloat
;extruder.c,709 :: 			printFloat(",hfg0=",pid_heater.ff0gain);
$2E00	$0EBE	    			MOVLW	lstr31_extruder
$2E02	$0102	    			MOVLB	2
$2E04	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2E06	$0E01	    			MOVLW	@lstr31_extruder
$2E08	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2E0A	$C09D	F250			MOVFF	_pid_heater+60, FARG_printFloat+2
$2E0E	$C09E	F251			MOVFF	_pid_heater+61, FARG_printFloat+3
$2E12	$C09F	F252			MOVFF	_pid_heater+62, FARG_printFloat+4
$2E16	$C0A0	F253			MOVFF	_pid_heater+63, FARG_printFloat+5
$2E1A	$EC0A	F013			CALL	_printFloat
;extruder.c,710 :: 			printFloat(",hout=",pid_heater.output);
$2E1E	$0EC5	    			MOVLW	lstr32_extruder
$2E20	$0102	    			MOVLB	2
$2E22	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2E24	$0E01	    			MOVLW	@lstr32_extruder
$2E26	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2E28	$C0A7	F000			MOVFF	_pid_heater+70, STACK_0
$2E2C	$C0A8	F001			MOVFF	_pid_heater+71, STACK_0+1
$2E30	$ECE3	F002			CALL	_int2double
$2E34	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2E38	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2E3C	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2E40	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2E44	$EC0A	F013			CALL	_printFloat
;extruder.c,711 :: 			printFloat(",herr=",pid_heater.error);
$2E48	$0ECC	    			MOVLW	lstr33_extruder
$2E4A	$0102	    			MOVLB	2
$2E4C	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2E4E	$0E01	    			MOVLW	@lstr33_extruder
$2E50	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2E52	$C069	F000			MOVFF	_pid_heater+8, STACK_0
$2E56	$C06A	F001			MOVFF	_pid_heater+9, STACK_0+1
$2E5A	$C06B	F002			MOVFF	_pid_heater+10, STACK_0+2
$2E5E	$C06C	F003			MOVFF	_pid_heater+11, STACK_0+3
$2E62	$EC05	F003			CALL	_longint2double
$2E66	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2E6A	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2E6E	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2E72	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2E76	$EC0A	F013			CALL	_printFloat
;extruder.c,712 :: 			printFloat(",herri=",pid_heater.error_i);
$2E7A	$0ED3	    			MOVLW	lstr34_extruder
$2E7C	$0102	    			MOVLB	2
$2E7E	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2E80	$0E01	    			MOVLW	@lstr34_extruder
$2E82	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2E84	$C07D	F000			MOVFF	_pid_heater+28, STACK_0
$2E88	$C07E	F001			MOVFF	_pid_heater+29, STACK_0+1
$2E8C	$ECE3	F002			CALL	_int2double
$2E90	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2E94	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2E98	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2E9C	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2EA0	$EC0A	F013			CALL	_printFloat
;extruder.c,713 :: 			printFloat(",herrd=",pid_heater.error_d);
$2EA4	$0EDB	    			MOVLW	lstr35_extruder
$2EA6	$0102	    			MOVLB	2
$2EA8	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2EAA	$0E01	    			MOVLW	@lstr35_extruder
$2EAC	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2EAE	$C083	F000			MOVFF	_pid_heater+34, STACK_0
$2EB2	$C084	F001			MOVFF	_pid_heater+35, STACK_0+1
$2EB6	$C085	F002			MOVFF	_pid_heater+36, STACK_0+2
$2EBA	$C086	F003			MOVFF	_pid_heater+37, STACK_0+3
$2EBE	$EC05	F003			CALL	_longint2double
$2EC2	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2EC6	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2ECA	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2ECE	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2ED2	$EC0A	F013			CALL	_printFloat
;extruder.c,714 :: 			printFloat(",he=",pid_heater.enable);
$2ED6	$0EE3	    			MOVLW	lstr36_extruder
$2ED8	$0102	    			MOVLB	2
$2EDA	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2EDC	$0E01	    			MOVLW	@lstr36_extruder
$2EDE	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2EE0	$C0A9	F000			MOVFF	_pid_heater+72, STACK_0
$2EE4	$EC27	F013			CALL	_byte2double
$2EE8	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2EEC	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2EF0	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2EF4	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2EF8	$EC0A	F013			CALL	_printFloat
;extruder.c,715 :: 			printFloat(",mcmd=",pid_motor.command);
$2EFC	$0EE8	    			MOVLW	lstr37_extruder
$2EFE	$0102	    			MOVLB	2
$2F00	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2F02	$0E01	    			MOVLW	@lstr37_extruder
$2F04	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2F06	$C0AB	F000			MOVFF	_pid_motor+0, STACK_0
$2F0A	$C0AC	F001			MOVFF	_pid_motor+1, STACK_0+1
$2F0E	$C0AD	F002			MOVFF	_pid_motor+2, STACK_0+2
$2F12	$C0AE	F003			MOVFF	_pid_motor+3, STACK_0+3
$2F16	$EC05	F003			CALL	_longint2double
$2F1A	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2F1E	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2F22	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2F26	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2F2A	$EC0A	F013			CALL	_printFloat
;extruder.c,716 :: 			printFloat(",mv=",pid_motor.feedback);
$2F2E	$0EEF	    			MOVLW	lstr38_extruder
$2F30	$0102	    			MOVLB	2
$2F32	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2F34	$0E01	    			MOVLW	@lstr38_extruder
$2F36	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2F38	$C0AF	F000			MOVFF	_pid_motor+4, STACK_0
$2F3C	$C0B0	F001			MOVFF	_pid_motor+5, STACK_0+1
$2F40	$C0B1	F002			MOVFF	_pid_motor+6, STACK_0+2
$2F44	$C0B2	F003			MOVFF	_pid_motor+7, STACK_0+3
$2F48	$EC05	F003			CALL	_longint2double
$2F4C	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2F50	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2F54	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2F58	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2F5C	$EC0A	F013			CALL	_printFloat
;extruder.c,717 :: 			printFloat(",mp=",pid_motor.pgain);
$2F60	$0EF4	    			MOVLW	lstr39_extruder
$2F62	$0102	    			MOVLB	2
$2F64	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2F66	$0E01	    			MOVLW	@lstr39_extruder
$2F68	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2F6A	$C0DB	F250			MOVFF	_pid_motor+48, FARG_printFloat+2
$2F6E	$C0DC	F251			MOVFF	_pid_motor+49, FARG_printFloat+3
$2F72	$C0DD	F252			MOVFF	_pid_motor+50, FARG_printFloat+4
$2F76	$C0DE	F253			MOVFF	_pid_motor+51, FARG_printFloat+5
$2F7A	$EC0A	F013			CALL	_printFloat
;extruder.c,718 :: 			printFloat(",mi=",pid_motor.igain);
$2F7E	$0EF9	    			MOVLW	lstr40_extruder
$2F80	$0102	    			MOVLB	2
$2F82	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2F84	$0E01	    			MOVLW	@lstr40_extruder
$2F86	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2F88	$C0DF	F250			MOVFF	_pid_motor+52, FARG_printFloat+2
$2F8C	$C0E0	F251			MOVFF	_pid_motor+53, FARG_printFloat+3
$2F90	$C0E1	F252			MOVFF	_pid_motor+54, FARG_printFloat+4
$2F94	$C0E2	F253			MOVFF	_pid_motor+55, FARG_printFloat+5
$2F98	$EC0A	F013			CALL	_printFloat
;extruder.c,719 :: 			printFloat(",md=",pid_motor.dgain);
$2F9C	$0EFE	    			MOVLW	lstr41_extruder
$2F9E	$0102	    			MOVLB	2
$2FA0	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2FA2	$0E01	    			MOVLW	@lstr41_extruder
$2FA4	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2FA6	$C0E3	F250			MOVFF	_pid_motor+56, FARG_printFloat+2
$2FAA	$C0E4	F251			MOVFF	_pid_motor+57, FARG_printFloat+3
$2FAE	$C0E5	F252			MOVFF	_pid_motor+58, FARG_printFloat+4
$2FB2	$C0E6	F253			MOVFF	_pid_motor+59, FARG_printFloat+5
$2FB6	$EC0A	F013			CALL	_printFloat
;extruder.c,720 :: 			printFloat(",mfg=",pid_motor.ff1gain);
$2FBA	$0E03	    			MOVLW	lstr42_extruder
$2FBC	$0102	    			MOVLB	2
$2FBE	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2FC0	$0E02	    			MOVLW	@lstr42_extruder
$2FC2	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2FC4	$C0EB	F250			MOVFF	_pid_motor+64, FARG_printFloat+2
$2FC8	$C0EC	F251			MOVFF	_pid_motor+65, FARG_printFloat+3
$2FCC	$C0ED	F252			MOVFF	_pid_motor+66, FARG_printFloat+4
$2FD0	$C0EE	F253			MOVFF	_pid_motor+67, FARG_printFloat+5
$2FD4	$EC0A	F013			CALL	_printFloat
;extruder.c,721 :: 			printFloat(",mout=",pid_motor.output);
$2FD8	$0E09	    			MOVLW	lstr43_extruder
$2FDA	$0102	    			MOVLB	2
$2FDC	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$2FDE	$0E02	    			MOVLW	@lstr43_extruder
$2FE0	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$2FE2	$C0F1	F000			MOVFF	_pid_motor+70, STACK_0
$2FE6	$C0F2	F001			MOVFF	_pid_motor+71, STACK_0+1
$2FEA	$ECE3	F002			CALL	_int2double
$2FEE	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$2FF2	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$2FF6	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$2FFA	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$2FFE	$EC0A	F013			CALL	_printFloat
;extruder.c,722 :: 			printFloat(",merr=",pid_motor.error);
$3002	$0E10	    			MOVLW	lstr44_extruder
$3004	$0102	    			MOVLB	2
$3006	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$3008	$0E02	    			MOVLW	@lstr44_extruder
$300A	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$300C	$C0B3	F000			MOVFF	_pid_motor+8, STACK_0
$3010	$C0B4	F001			MOVFF	_pid_motor+9, STACK_0+1
$3014	$C0B5	F002			MOVFF	_pid_motor+10, STACK_0+2
$3018	$C0B6	F003			MOVFF	_pid_motor+11, STACK_0+3
$301C	$EC05	F003			CALL	_longint2double
$3020	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$3024	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$3028	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$302C	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$3030	$EC0A	F013			CALL	_printFloat
;extruder.c,723 :: 			printFloat(",merri=",pid_motor.error_i);
$3034	$0E17	    			MOVLW	lstr45_extruder
$3036	$0102	    			MOVLB	2
$3038	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$303A	$0E02	    			MOVLW	@lstr45_extruder
$303C	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$303E	$C0C7	F000			MOVFF	_pid_motor+28, STACK_0
$3042	$C0C8	F001			MOVFF	_pid_motor+29, STACK_0+1
$3046	$ECE3	F002			CALL	_int2double
$304A	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$304E	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$3052	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$3056	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$305A	$EC0A	F013			CALL	_printFloat
;extruder.c,724 :: 			printFloat(",merrd=",pid_motor.error_d);
$305E	$0E1F	    			MOVLW	lstr46_extruder
$3060	$0102	    			MOVLB	2
$3062	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$3064	$0E02	    			MOVLW	@lstr46_extruder
$3066	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$3068	$C0CD	F000			MOVFF	_pid_motor+34, STACK_0
$306C	$C0CE	F001			MOVFF	_pid_motor+35, STACK_0+1
$3070	$C0CF	F002			MOVFF	_pid_motor+36, STACK_0+2
$3074	$C0D0	F003			MOVFF	_pid_motor+37, STACK_0+3
$3078	$EC05	F003			CALL	_longint2double
$307C	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$3080	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$3084	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$3088	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$308C	$EC0A	F013			CALL	_printFloat
;extruder.c,725 :: 			printFloat(",me=",pid_motor.enable);
$3090	$0E27	    			MOVLW	lstr47_extruder
$3092	$0102	    			MOVLB	2
$3094	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$3096	$0E02	    			MOVLW	@lstr47_extruder
$3098	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$309A	$C0F3	F000			MOVFF	_pid_motor+72, STACK_0
$309E	$EC27	F013			CALL	_byte2double
$30A2	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$30A6	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$30AA	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$30AE	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$30B2	$EC0A	F013			CALL	_printFloat
;extruder.c,726 :: 			printFloat(",mTurns=",motorTurns);
$30B6	$0E2C	    			MOVLW	lstr48_extruder
$30B8	$0102	    			MOVLB	2
$30BA	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$30BC	$0E02	    			MOVLW	@lstr48_extruder
$30BE	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$30C0	$C01A	F000			MOVFF	_motorTurns, STACK_0
$30C4	$C01B	F001			MOVFF	_motorTurns+1, STACK_0+1
$30C8	$C01C	F002			MOVFF	_motorTurns+2, STACK_0+2
$30CC	$C01D	F003			MOVFF	_motorTurns+3, STACK_0+3
$30D0	$EC05	F003			CALL	_longint2double
$30D4	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$30D8	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$30DC	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$30E0	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$30E4	$EC0A	F013			CALL	_printFloat
;extruder.c,727 :: 			printFloat(",mge=",motorGlobalEnable);
$30E8	$0E35	    			MOVLW	lstr49_extruder
$30EA	$0102	    			MOVLB	2
$30EC	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$30EE	$0E02	    			MOVLW	@lstr49_extruder
$30F0	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$30F2	$C02A	F000			MOVFF	_motorGlobalEnable, STACK_0
$30F6	$EC27	F013			CALL	_byte2double
$30FA	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$30FE	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$3102	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$3106	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$310A	$EC0A	F013			CALL	_printFloat
;extruder.c,728 :: 			printFloat(",hge=",heaterGlobalEnable);
$310E	$0E3B	    			MOVLW	lstr50_extruder
$3110	$0102	    			MOVLB	2
$3112	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$3114	$0E02	    			MOVLW	@lstr50_extruder
$3116	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$3118	$C021	F000			MOVFF	_heaterGlobalEnable, STACK_0
$311C	$EC27	F013			CALL	_byte2double
$3120	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$3124	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$3128	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$312C	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$3130	$EC0A	F013			CALL	_printFloat
;extruder.c,729 :: 			printFloat(",dirswitchs=",motorDirSwitches);
$3134	$0E41	    			MOVLW	lstr51_extruder
$3136	$0102	    			MOVLB	2
$3138	$6F4E	    			MOVWF	FARG_printFloat+0, 1
$313A	$0E02	    			MOVLW	@lstr51_extruder
$313C	$6F4F	    			MOVWF	FARG_printFloat+1, 1
$313E	$C023	F000			MOVFF	_motorDirSwitches, STACK_0
$3142	$EC27	F013			CALL	_byte2double
$3146	$C000	F250			MOVFF	STACK_0, FARG_printFloat+2
$314A	$C001	F251			MOVFF	STACK_0+1, FARG_printFloat+3
$314E	$C002	F252			MOVFF	STACK_0+2, FARG_printFloat+4
$3152	$C003	F253			MOVFF	STACK_0+3, FARG_printFloat+5
$3156	$EC0A	F013			CALL	_printFloat
;extruder.c,730 :: 			}
$315A	$0012	    			RETURN
$315C	$	_writeMemory:
;extruder.c,311 :: 			void writeMemory(){
;extruder.c,312 :: 			unsigned short pidSize = sizeof( pid_heater );
$315C	$0E4A	    			MOVLW	74
$315E	$0100	    			MOVLB	0
$3160	$6F60	    			MOVWF	writeMemory_pidSize_L0, 1
;extruder.c,314 :: 			EEprom_Write_Obj(0,&EEPROM_VERSION_ID,1);
$3162	$0102	    			MOVLB	2
$3164	$6B4E	    			CLRF	FARG_Eeprom_Write_Obj+0, 1
$3166	$6B4F	    			CLRF	FARG_Eeprom_Write_Obj+1, 1
$3168	$0E53	    			MOVLW	_EEPROM_VERSION_ID
$316A	$6F50	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$316C	$0E00	    			MOVLW	@_EEPROM_VERSION_ID
$316E	$6F51	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$3170	$0E01	    			MOVLW	1
$3172	$6F52	    			MOVWF	FARG_Eeprom_Write_Obj+4, 1
$3174	$EC37	F013			CALL	_Eeprom_Write_Obj
;extruder.c,317 :: 			EEprom_Write_Obj(1,&pid_heater,pidSize);
$3178	$0E01	    			MOVLW	1
$317A	$0102	    			MOVLB	2
$317C	$6F4E	    			MOVWF	FARG_Eeprom_Write_Obj+0, 1
$317E	$0E00	    			MOVLW	0
$3180	$6F4F	    			MOVWF	FARG_Eeprom_Write_Obj+1, 1
$3182	$0E61	    			MOVLW	_pid_heater
$3184	$6F50	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$3186	$0E00	    			MOVLW	@_pid_heater
$3188	$6F51	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$318A	$C060	F252			MOVFF	writeMemory_pidSize_L0, FARG_Eeprom_Write_Obj+4
$318E	$EC37	F013			CALL	_Eeprom_Write_Obj
;extruder.c,318 :: 			EEprom_Write_Obj(pidSize+2,&pid_motor,pidSize);
$3192	$0E02	    			MOVLW	2
$3194	$0100	    			MOVLB	0
$3196	$2560	    			ADDWF	writeMemory_pidSize_L0, 0, 1
$3198	$0102	    			MOVLB	2
$319A	$6F4E	    			MOVWF	FARG_Eeprom_Write_Obj+0, 1
$319C	$6B4F	    			CLRF	FARG_Eeprom_Write_Obj+1, 1
$319E	$0E00	    			MOVLW	0
$31A0	$234F	    			ADDWFC	FARG_Eeprom_Write_Obj+1, 1, 1
$31A2	$0EAB	    			MOVLW	_pid_motor
$31A4	$6F50	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$31A6	$0E00	    			MOVLW	@_pid_motor
$31A8	$6F51	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$31AA	$C060	F252			MOVFF	writeMemory_pidSize_L0, FARG_Eeprom_Write_Obj+4
$31AE	$EC37	F013			CALL	_Eeprom_Write_Obj
;extruder.c,319 :: 			}
$31B2	$0012	    			RETURN
$31B4	$	_findIntValue:
;extruder.c,934 :: 			int findIntValue ( char *buffer){
;extruder.c,937 :: 			char *ptr = strchr(buffer,'=');
$31B4	$C1A6	F24E			MOVFF	FARG_findIntValue+0, FARG_strchr+0
$31B8	$C1A7	F24F			MOVFF	FARG_findIntValue+1, FARG_strchr+1
$31BC	$0E3D	    			MOVLW	61
$31BE	$0102	    			MOVLB	2
$31C0	$6F50	    			MOVWF	FARG_strchr+2, 1
$31C2	$EC53	F013			CALL	_strchr
$31C6	$C000	F1A8			MOVFF	STACK_0, findIntValue_ptr_L0
$31CA	$C001	F1A9			MOVFF	STACK_0+1, findIntValue_ptr_L0+1
;extruder.c,938 :: 			return atoi(++ptr);
$31CE	$0E01	    			MOVLW	1
$31D0	$2400	    			ADDWF	STACK_0, 0, 0
$31D2	$0101	    			MOVLB	1
$31D4	$6FA8	    			MOVWF	findIntValue_ptr_L0, 1
$31D6	$0E00	    			MOVLW	0
$31D8	$2001	    			ADDWFC	STACK_0+1, 0, 0
$31DA	$6FA9	    			MOVWF	findIntValue_ptr_L0+1, 1
$31DC	$C1A8	F24E			MOVFF	findIntValue_ptr_L0, FARG_atoi+0
$31E0	$C1A9	F24F			MOVFF	findIntValue_ptr_L0+1, FARG_atoi+1
$31E4	$EC70	F013			CALL	_atoi
;extruder.c,939 :: 			}
$31E8	$0012	    			RETURN
$31EA	$	_clearMemory:
;extruder.c,321 :: 			void clearMemory(){
;extruder.c,324 :: 			unsigned short blank = 0xFF;
$31EA	$0EFF	    			MOVLW	255
$31EC	$0100	    			MOVLB	0
$31EE	$6F60	    			MOVWF	clearMemory_blank_L0, 1
;extruder.c,325 :: 			EEprom_Write_Obj(0,&blank,1);
$31F0	$0102	    			MOVLB	2
$31F2	$6B4E	    			CLRF	FARG_Eeprom_Write_Obj+0, 1
$31F4	$6B4F	    			CLRF	FARG_Eeprom_Write_Obj+1, 1
$31F6	$0E60	    			MOVLW	clearMemory_blank_L0
$31F8	$6F50	    			MOVWF	FARG_Eeprom_Write_Obj+2, 1
$31FA	$0E00	    			MOVLW	@clearMemory_blank_L0
$31FC	$6F51	    			MOVWF	FARG_Eeprom_Write_Obj+3, 1
$31FE	$0E01	    			MOVLW	1
$3200	$6F52	    			MOVWF	FARG_Eeprom_Write_Obj+4, 1
$3202	$EC37	F013			CALL	_Eeprom_Write_Obj
;extruder.c,326 :: 			}
$3206	$0012	    			RETURN
$3208	$	_findFloatValue:
;extruder.c,928 :: 			float findFloatValue ( char *buffer){
;extruder.c,931 :: 			char *ptr = strchr(buffer,'=');
$3208	$C1A6	F24E			MOVFF	FARG_findFloatValue+0, FARG_strchr+0
$320C	$C1A7	F24F			MOVFF	FARG_findFloatValue+1, FARG_strchr+1
$3210	$0E3D	    			MOVLW	61
$3212	$0102	    			MOVLB	2
$3214	$6F50	    			MOVWF	FARG_strchr+2, 1
$3216	$EC53	F013			CALL	_strchr
$321A	$C000	F1A8			MOVFF	STACK_0, findFloatValue_ptr_L0
$321E	$C001	F1A9			MOVFF	STACK_0+1, findFloatValue_ptr_L0+1
;extruder.c,932 :: 			return atof(++ptr);
$3222	$0E01	    			MOVLW	1
$3224	$2400	    			ADDWF	STACK_0, 0, 0
$3226	$0101	    			MOVLB	1
$3228	$6FA8	    			MOVWF	findFloatValue_ptr_L0, 1
$322A	$0E00	    			MOVLW	0
$322C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$322E	$6FA9	    			MOVWF	findFloatValue_ptr_L0+1, 1
$3230	$C1A8	F24E			MOVFF	findFloatValue_ptr_L0, FARG_atof+0
$3234	$C1A9	F24F			MOVFF	findFloatValue_ptr_L0+1, FARG_atof+1
$3238	$ECCC	F013			CALL	_atof
;extruder.c,933 :: 			}
$323C	$0012	    			RETURN
$323E	$	_findLongValue:
;extruder.c,940 :: 			long findLongValue ( char *buffer){
;extruder.c,943 :: 			char *ptr = strchr(buffer,'=');
$323E	$C1A6	F24E			MOVFF	FARG_findLongValue+0, FARG_strchr+0
$3242	$C1A7	F24F			MOVFF	FARG_findLongValue+1, FARG_strchr+1
$3246	$0E3D	    			MOVLW	61
$3248	$0102	    			MOVLB	2
$324A	$6F50	    			MOVWF	FARG_strchr+2, 1
$324C	$EC53	F013			CALL	_strchr
$3250	$C000	F1A8			MOVFF	STACK_0, findLongValue_ptr_L0
$3254	$C001	F1A9			MOVFF	STACK_0+1, findLongValue_ptr_L0+1
;extruder.c,944 :: 			return atol(++ptr);
$3258	$0E01	    			MOVLW	1
$325A	$2400	    			ADDWF	STACK_0, 0, 0
$325C	$0101	    			MOVLB	1
$325E	$6FA8	    			MOVWF	findLongValue_ptr_L0, 1
$3260	$0E00	    			MOVLW	0
$3262	$2001	    			ADDWFC	STACK_0+1, 0, 0
$3264	$6FA9	    			MOVWF	findLongValue_ptr_L0+1, 1
$3266	$C1A8	F24E			MOVFF	findLongValue_ptr_L0, FARG_atol+0
$326A	$C1A9	F24F			MOVFF	findLongValue_ptr_L0+1, FARG_atol+1
$326E	$ECD6	F013			CALL	_atol
;extruder.c,945 :: 			}
$3272	$0012	    			RETURN
$3274	$	GlobalIniextruder:
$3274	$0EFF	    			MOVLW	255
$3276	$6E55	    			MOVWF	_buffer+0, 0
$3278	$0E00	    			MOVLW	0
$327A	$6E54	    			MOVWF	_txtPos+0, 0
$327C	$0E00	    			MOVLW	0
$327E	$6E24	    			MOVWF	_tempCount+0, 0
$3280	$0E28	    			MOVLW	40
$3282	$6E19	    			MOVWF	_stepMultiplier+0, 0
$3284	$0E00	    			MOVLW	0
$3286	$6E21	    			MOVWF	_heaterGlobalEnable+0, 0
$3288	$0E00	    			MOVLW	0
$328A	$6E2A	    			MOVWF	_motorGlobalEnable+0, 0
$328C	$0E00	    			MOVLW	0
$328E	$6E27	    			MOVWF	_velocityControlMode+0, 0
$3290	$0E00	    			MOVLW	0
$3292	$6E22	    			MOVWF	_meltFlowComp+0, 0
$3294	$0E00	    			MOVLW	0
$3296	$6E23	    			MOVWF	_motorDirSwitches+0, 0
$3298	$0E00	    			MOVLW	0
$329A	$6E56	    			MOVWF	_qMf+0, 0
$329C	$0E00	    			MOVLW	0
$329E	$6E57	    			MOVWF	_qMf+1, 0
$32A0	$0E00	    			MOVLW	0
$32A2	$6E58	    			MOVWF	_qMf+2, 0
$32A4	$0E00	    			MOVLW	0
$32A6	$6E59	    			MOVWF	_qMf+3, 0
$32A8	$0E00	    			MOVLW	0
$32AA	$6E25	    			MOVWF	_debugHeaterDuty+0, 0
$32AC	$0E00	    			MOVLW	0
$32AE	$6E26	    			MOVWF	_debugHeaterDuty+1, 0
$32B0	$0E00	    			MOVLW	0
$32B2	$6E5A	    			MOVWF	_debugMotorDuty+0, 0
$32B4	$0E00	    			MOVLW	0
$32B6	$6E5B	    			MOVWF	_debugMotorDuty+1, 0
$32B8	$0E00	    			MOVLW	0
$32BA	$6E28	    			MOVWF	_debugMotorSpeed+0, 0
$32BC	$0E00	    			MOVLW	0
$32BE	$6E29	    			MOVWF	_debugMotorSpeed+1, 0
$32C0	$0E00	    			MOVLW	0
$32C2	$6E15	    			MOVWF	_motorPulses+0, 0
$32C4	$0E00	    			MOVLW	0
$32C6	$6E16	    			MOVWF	_motorPulses+1, 0
$32C8	$0E00	    			MOVLW	0
$32CA	$6E17	    			MOVWF	_motorPulses+2, 0
$32CC	$0E00	    			MOVLW	0
$32CE	$6E18	    			MOVWF	_motorPulses+3, 0
$32D0	$0E00	    			MOVLW	0
$32D2	$6E1A	    			MOVWF	_motorTurns+0, 0
$32D4	$0E00	    			MOVLW	0
$32D6	$6E1B	    			MOVWF	_motorTurns+1, 0
$32D8	$0E00	    			MOVLW	0
$32DA	$6E1C	    			MOVWF	_motorTurns+2, 0
$32DC	$0E00	    			MOVLW	0
$32DE	$6E1D	    			MOVWF	_motorTurns+3, 0
$32E0	$0E32	    			MOVLW	50
$32E2	$0100	    			MOVLB	0
$32E4	$6F61	    			MOVWF	_pid_heater+0, 1
$32E6	$0E00	    			MOVLW	0
$32E8	$6F62	    			MOVWF	_pid_heater+1, 1
$32EA	$0E00	    			MOVLW	0
$32EC	$6F63	    			MOVWF	_pid_heater+2, 1
$32EE	$0E00	    			MOVLW	0
$32F0	$6F64	    			MOVWF	_pid_heater+3, 1
$32F2	$0E00	    			MOVLW	0
$32F4	$6F65	    			MOVWF	_pid_heater+4, 1
$32F6	$0E00	    			MOVLW	0
$32F8	$6F66	    			MOVWF	_pid_heater+5, 1
$32FA	$0E00	    			MOVLW	0
$32FC	$6F67	    			MOVWF	_pid_heater+6, 1
$32FE	$0E00	    			MOVLW	0
$3300	$6F68	    			MOVWF	_pid_heater+7, 1
$3302	$0E00	    			MOVLW	0
$3304	$6F69	    			MOVWF	_pid_heater+8, 1
$3306	$0E00	    			MOVLW	0
$3308	$6F6A	    			MOVWF	_pid_heater+9, 1
$330A	$0E00	    			MOVLW	0
$330C	$6F6B	    			MOVWF	_pid_heater+10, 1
$330E	$0E00	    			MOVLW	0
$3310	$6F6C	    			MOVWF	_pid_heater+11, 1
$3312	$0E00	    			MOVLW	0
$3314	$6F6D	    			MOVWF	_pid_heater+12, 1
$3316	$0E00	    			MOVLW	0
$3318	$6F6E	    			MOVWF	_pid_heater+13, 1
$331A	$0E00	    			MOVLW	0
$331C	$6F6F	    			MOVWF	_pid_heater+14, 1
$331E	$0E00	    			MOVLW	0
$3320	$6F70	    			MOVWF	_pid_heater+15, 1
$3322	$0E00	    			MOVLW	0
$3324	$6F71	    			MOVWF	_pid_heater+16, 1
$3326	$0E00	    			MOVLW	0
$3328	$6F72	    			MOVWF	_pid_heater+17, 1
$332A	$0EF4	    			MOVLW	244
$332C	$6F73	    			MOVWF	_pid_heater+18, 1
$332E	$0E01	    			MOVLW	1
$3330	$6F74	    			MOVWF	_pid_heater+19, 1
$3332	$0E00	    			MOVLW	0
$3334	$6F75	    			MOVWF	_pid_heater+20, 1
$3336	$0E00	    			MOVLW	0
$3338	$6F76	    			MOVWF	_pid_heater+21, 1
$333A	$0E00	    			MOVLW	0
$333C	$6F77	    			MOVWF	_pid_heater+22, 1
$333E	$0E00	    			MOVLW	0
$3340	$6F78	    			MOVWF	_pid_heater+23, 1
$3342	$0E00	    			MOVLW	0
$3344	$6F79	    			MOVWF	_pid_heater+24, 1
$3346	$0E00	    			MOVLW	0
$3348	$6F7A	    			MOVWF	_pid_heater+25, 1
$334A	$0E00	    			MOVLW	0
$334C	$6F7B	    			MOVWF	_pid_heater+26, 1
$334E	$0E00	    			MOVLW	0
$3350	$6F7C	    			MOVWF	_pid_heater+27, 1
$3352	$0E00	    			MOVLW	0
$3354	$6F7D	    			MOVWF	_pid_heater+28, 1
$3356	$0E00	    			MOVLW	0
$3358	$6F7E	    			MOVWF	_pid_heater+29, 1
$335A	$0E00	    			MOVLW	0
$335C	$6F7F	    			MOVWF	_pid_heater+30, 1
$335E	$0E00	    			MOVLW	0
$3360	$6F80	    			MOVWF	_pid_heater+31, 1
$3362	$0E00	    			MOVLW	0
$3364	$6F81	    			MOVWF	_pid_heater+32, 1
$3366	$0E00	    			MOVLW	0
$3368	$6F82	    			MOVWF	_pid_heater+33, 1
$336A	$0E00	    			MOVLW	0
$336C	$6F83	    			MOVWF	_pid_heater+34, 1
$336E	$0E00	    			MOVLW	0
$3370	$6F84	    			MOVWF	_pid_heater+35, 1
$3372	$0E00	    			MOVLW	0
$3374	$6F85	    			MOVWF	_pid_heater+36, 1
$3376	$0E00	    			MOVLW	0
$3378	$6F86	    			MOVWF	_pid_heater+37, 1
$337A	$0E00	    			MOVLW	0
$337C	$6F87	    			MOVWF	_pid_heater+38, 1
$337E	$0E00	    			MOVLW	0
$3380	$6F88	    			MOVWF	_pid_heater+39, 1
$3382	$0E00	    			MOVLW	0
$3384	$6F89	    			MOVWF	_pid_heater+40, 1
$3386	$0E00	    			MOVLW	0
$3388	$6F8A	    			MOVWF	_pid_heater+41, 1
$338A	$0E00	    			MOVLW	0
$338C	$6F8B	    			MOVWF	_pid_heater+42, 1
$338E	$0E00	    			MOVLW	0
$3390	$6F8C	    			MOVWF	_pid_heater+43, 1
$3392	$0E00	    			MOVLW	0
$3394	$6F8D	    			MOVWF	_pid_heater+44, 1
$3396	$0E00	    			MOVLW	0
$3398	$6F8E	    			MOVWF	_pid_heater+45, 1
$339A	$0E00	    			MOVLW	0
$339C	$6F8F	    			MOVWF	_pid_heater+46, 1
$339E	$0E00	    			MOVLW	0
$33A0	$6F90	    			MOVWF	_pid_heater+47, 1
$33A2	$0E00	    			MOVLW	0
$33A4	$6F91	    			MOVWF	_pid_heater+48, 1
$33A6	$0E00	    			MOVLW	0
$33A8	$6F92	    			MOVWF	_pid_heater+49, 1
$33AA	$0E60	    			MOVLW	96
$33AC	$6F93	    			MOVWF	_pid_heater+50, 1
$33AE	$0E80	    			MOVLW	128
$33B0	$6F94	    			MOVWF	_pid_heater+51, 1
$33B2	$0ECD	    			MOVLW	205
$33B4	$6F95	    			MOVWF	_pid_heater+52, 1
$33B6	$0ECC	    			MOVLW	204
$33B8	$6F96	    			MOVWF	_pid_heater+53, 1
$33BA	$0E4C	    			MOVLW	76
$33BC	$6F97	    			MOVWF	_pid_heater+54, 1
$33BE	$0E7E	    			MOVLW	126
$33C0	$6F98	    			MOVWF	_pid_heater+55, 1
$33C2	$0E00	    			MOVLW	0
$33C4	$6F99	    			MOVWF	_pid_heater+56, 1
$33C6	$0E00	    			MOVLW	0
$33C8	$6F9A	    			MOVWF	_pid_heater+57, 1
$33CA	$0E00	    			MOVLW	0
$33CC	$6F9B	    			MOVWF	_pid_heater+58, 1
$33CE	$0E00	    			MOVLW	0
$33D0	$6F9C	    			MOVWF	_pid_heater+59, 1
$33D2	$0ECD	    			MOVLW	205
$33D4	$6F9D	    			MOVWF	_pid_heater+60, 1
$33D6	$0ECC	    			MOVLW	204
$33D8	$6F9E	    			MOVWF	_pid_heater+61, 1
$33DA	$0E4C	    			MOVLW	76
$33DC	$6F9F	    			MOVWF	_pid_heater+62, 1
$33DE	$0E7D	    			MOVLW	125
$33E0	$6FA0	    			MOVWF	_pid_heater+63, 1
$33E2	$0E00	    			MOVLW	0
$33E4	$6FA1	    			MOVWF	_pid_heater+64, 1
$33E6	$0E00	    			MOVLW	0
$33E8	$6FA2	    			MOVWF	_pid_heater+65, 1
$33EA	$0E00	    			MOVLW	0
$33EC	$6FA3	    			MOVWF	_pid_heater+66, 1
$33EE	$0E00	    			MOVLW	0
$33F0	$6FA4	    			MOVWF	_pid_heater+67, 1
$33F2	$0EFE	    			MOVLW	254
$33F4	$6FA5	    			MOVWF	_pid_heater+68, 1
$33F6	$0E00	    			MOVLW	0
$33F8	$6FA6	    			MOVWF	_pid_heater+69, 1
$33FA	$0E00	    			MOVLW	0
$33FC	$6FA7	    			MOVWF	_pid_heater+70, 1
$33FE	$0E00	    			MOVLW	0
$3400	$6FA8	    			MOVWF	_pid_heater+71, 1
$3402	$0E00	    			MOVLW	0
$3404	$6FA9	    			MOVWF	_pid_heater+72, 1
$3406	$0E00	    			MOVLW	0
$3408	$6FAA	    			MOVWF	_pid_heater+73, 1
$340A	$0E00	    			MOVLW	0
$340C	$6FAB	    			MOVWF	_pid_motor+0, 1
$340E	$0E00	    			MOVLW	0
$3410	$6FAC	    			MOVWF	_pid_motor+1, 1
$3412	$0E00	    			MOVLW	0
$3414	$6FAD	    			MOVWF	_pid_motor+2, 1
$3416	$0E00	    			MOVLW	0
$3418	$6FAE	    			MOVWF	_pid_motor+3, 1
$341A	$0E00	    			MOVLW	0
$341C	$6FAF	    			MOVWF	_pid_motor+4, 1
$341E	$0E00	    			MOVLW	0
$3420	$6FB0	    			MOVWF	_pid_motor+5, 1
$3422	$0E00	    			MOVLW	0
$3424	$6FB1	    			MOVWF	_pid_motor+6, 1
$3426	$0E00	    			MOVLW	0
$3428	$6FB2	    			MOVWF	_pid_motor+7, 1
$342A	$0E00	    			MOVLW	0
$342C	$6FB3	    			MOVWF	_pid_motor+8, 1
$342E	$0E00	    			MOVLW	0
$3430	$6FB4	    			MOVWF	_pid_motor+9, 1
$3432	$0E00	    			MOVLW	0
$3434	$6FB5	    			MOVWF	_pid_motor+10, 1
$3436	$0E00	    			MOVLW	0
$3438	$6FB6	    			MOVWF	_pid_motor+11, 1
$343A	$0EC8	    			MOVLW	200
$343C	$6FB7	    			MOVWF	_pid_motor+12, 1
$343E	$0E00	    			MOVLW	0
$3440	$6FB8	    			MOVWF	_pid_motor+13, 1
$3442	$0E80	    			MOVLW	128
$3444	$6FB9	    			MOVWF	_pid_motor+14, 1
$3446	$0EF0	    			MOVLW	240
$3448	$6FBA	    			MOVWF	_pid_motor+15, 1
$344A	$0EFA	    			MOVLW	250
$344C	$6FBB	    			MOVWF	_pid_motor+16, 1
$344E	$0E02	    			MOVLW	2
$3450	$6FBC	    			MOVWF	_pid_motor+17, 1
$3452	$0ED0	    			MOVLW	208
$3454	$6FBD	    			MOVWF	_pid_motor+18, 1
$3456	$0E07	    			MOVLW	7
$3458	$6FBE	    			MOVWF	_pid_motor+19, 1
$345A	$0E20	    			MOVLW	32
$345C	$6FBF	    			MOVWF	_pid_motor+20, 1
$345E	$0E4E	    			MOVLW	78
$3460	$6FC0	    			MOVWF	_pid_motor+21, 1
$3462	$0E00	    			MOVLW	0
$3464	$6FC1	    			MOVWF	_pid_motor+22, 1
$3466	$0E00	    			MOVLW	0
$3468	$6FC2	    			MOVWF	_pid_motor+23, 1
$346A	$0E00	    			MOVLW	0
$346C	$6FC3	    			MOVWF	_pid_motor+24, 1
$346E	$0E00	    			MOVLW	0
$3470	$6FC4	    			MOVWF	_pid_motor+25, 1
$3472	$0E00	    			MOVLW	0
$3474	$6FC5	    			MOVWF	_pid_motor+26, 1
$3476	$0E00	    			MOVLW	0
$3478	$6FC6	    			MOVWF	_pid_motor+27, 1
$347A	$0E00	    			MOVLW	0
$347C	$6FC7	    			MOVWF	_pid_motor+28, 1
$347E	$0E00	    			MOVLW	0
$3480	$6FC8	    			MOVWF	_pid_motor+29, 1
$3482	$0E00	    			MOVLW	0
$3484	$6FC9	    			MOVWF	_pid_motor+30, 1
$3486	$0E00	    			MOVLW	0
$3488	$6FCA	    			MOVWF	_pid_motor+31, 1
$348A	$0E00	    			MOVLW	0
$348C	$6FCB	    			MOVWF	_pid_motor+32, 1
$348E	$0E00	    			MOVLW	0
$3490	$6FCC	    			MOVWF	_pid_motor+33, 1
$3492	$0E00	    			MOVLW	0
$3494	$6FCD	    			MOVWF	_pid_motor+34, 1
$3496	$0E00	    			MOVLW	0
$3498	$6FCE	    			MOVWF	_pid_motor+35, 1
$349A	$0E00	    			MOVLW	0
$349C	$6FCF	    			MOVWF	_pid_motor+36, 1
$349E	$0E00	    			MOVLW	0
$34A0	$6FD0	    			MOVWF	_pid_motor+37, 1
$34A2	$0E00	    			MOVLW	0
$34A4	$6FD1	    			MOVWF	_pid_motor+38, 1
$34A6	$0E00	    			MOVLW	0
$34A8	$6FD2	    			MOVWF	_pid_motor+39, 1
$34AA	$0E00	    			MOVLW	0
$34AC	$6FD3	    			MOVWF	_pid_motor+40, 1
$34AE	$0E00	    			MOVLW	0
$34B0	$6FD4	    			MOVWF	_pid_motor+41, 1
$34B2	$0E00	    			MOVLW	0
$34B4	$6FD5	    			MOVWF	_pid_motor+42, 1
$34B6	$0E00	    			MOVLW	0
$34B8	$6FD6	    			MOVWF	_pid_motor+43, 1
$34BA	$0E00	    			MOVLW	0
$34BC	$6FD7	    			MOVWF	_pid_motor+44, 1
$34BE	$0E00	    			MOVLW	0
$34C0	$6FD8	    			MOVWF	_pid_motor+45, 1
$34C2	$0E00	    			MOVLW	0
$34C4	$6FD9	    			MOVWF	_pid_motor+46, 1
$34C6	$0E00	    			MOVLW	0
$34C8	$6FDA	    			MOVWF	_pid_motor+47, 1
$34CA	$0E66	    			MOVLW	102
$34CC	$6FDB	    			MOVWF	_pid_motor+48, 1
$34CE	$0E66	    			MOVLW	102
$34D0	$6FDC	    			MOVWF	_pid_motor+49, 1
$34D2	$0E66	    			MOVLW	102
$34D4	$6FDD	    			MOVWF	_pid_motor+50, 1
$34D6	$0E7E	    			MOVLW	126
$34D8	$6FDE	    			MOVWF	_pid_motor+51, 1
$34DA	$0E0A	    			MOVLW	10
$34DC	$6FDF	    			MOVWF	_pid_motor+52, 1
$34DE	$0ED7	    			MOVLW	215
$34E0	$6FE0	    			MOVWF	_pid_motor+53, 1
$34E2	$0E23	    			MOVLW	35
$34E4	$6FE1	    			MOVWF	_pid_motor+54, 1
$34E6	$0E7B	    			MOVLW	123
$34E8	$6FE2	    			MOVWF	_pid_motor+55, 1
$34EA	$0ECD	    			MOVLW	205
$34EC	$6FE3	    			MOVWF	_pid_motor+56, 1
$34EE	$0ECC	    			MOVLW	204
$34F0	$6FE4	    			MOVWF	_pid_motor+57, 1
$34F2	$0E4C	    			MOVLW	76
$34F4	$6FE5	    			MOVWF	_pid_motor+58, 1
$34F6	$0E7C	    			MOVLW	124
$34F8	$6FE6	    			MOVWF	_pid_motor+59, 1
$34FA	$0E00	    			MOVLW	0
$34FC	$6FE7	    			MOVWF	_pid_motor+60, 1
$34FE	$0E00	    			MOVLW	0
$3500	$6FE8	    			MOVWF	_pid_motor+61, 1
$3502	$0E00	    			MOVLW	0
$3504	$6FE9	    			MOVWF	_pid_motor+62, 1
$3506	$0E00	    			MOVLW	0
$3508	$6FEA	    			MOVWF	_pid_motor+63, 1
$350A	$0E00	    			MOVLW	0
$350C	$6FEB	    			MOVWF	_pid_motor+64, 1
$350E	$0E00	    			MOVLW	0
$3510	$6FEC	    			MOVWF	_pid_motor+65, 1
$3512	$0E00	    			MOVLW	0
$3514	$6FED	    			MOVWF	_pid_motor+66, 1
$3516	$0E80	    			MOVLW	128
$3518	$6FEE	    			MOVWF	_pid_motor+67, 1
$351A	$0EFC	    			MOVLW	252
$351C	$6FEF	    			MOVWF	_pid_motor+68, 1
$351E	$0E03	    			MOVLW	3
$3520	$6FF0	    			MOVWF	_pid_motor+69, 1
$3522	$0E00	    			MOVLW	0
$3524	$6FF1	    			MOVWF	_pid_motor+70, 1
$3526	$0E00	    			MOVLW	0
$3528	$6FF2	    			MOVWF	_pid_motor+71, 1
$352A	$0E00	    			MOVLW	0
$352C	$6FF3	    			MOVWF	_pid_motor+72, 1
$352E	$0E00	    			MOVLW	0
$3530	$6FF4	    			MOVWF	_pid_motor+73, 1
$3532	$0EFA	    			MOVLW	#lstr_1_extruder
$3534	$6E5C	    			MOVWF	_splash+0, 0
$3536	$0E3A	    			MOVLW	@#lstr_1_extruder
$3538	$6E5D	    			MOVWF	_splash+1, 0
$353A	$0E00	    			MOVLW	@@#lstr_1_extruder
$353C	$6E5E	    			MOVWF	_splash+2, 0
$353E	$0E0A	    			MOVLW	#lstr_2_extruder
$3540	$0101	    			MOVLB	1
$3542	$6F1D	    			MOVWF	_cmdPrompt+0, 1
$3544	$0E3B	    			MOVLW	@#lstr_2_extruder
$3546	$6F1E	    			MOVWF	_cmdPrompt+1, 1
$3548	$0E00	    			MOVLW	@@#lstr_2_extruder
$354A	$6F1F	    			MOVWF	_cmdPrompt+2, 1
$354C	$0E12	    			MOVLW	#lstr_3_extruder
$354E	$6F20	    			MOVWF	_noEeprom+0, 1
$3550	$0E3B	    			MOVLW	@#lstr_3_extruder
$3552	$6F21	    			MOVWF	_noEeprom+1, 1
$3554	$0E00	    			MOVLW	@@#lstr_3_extruder
$3556	$6F22	    			MOVWF	_noEeprom+2, 1
$3558	$0E24	    			MOVLW	#lstr_4_extruder
$355A	$6F23	    			MOVWF	_unknownCommand+0, 1
$355C	$0E3B	    			MOVLW	@#lstr_4_extruder
$355E	$6F24	    			MOVWF	_unknownCommand+1, 1
$3560	$0E00	    			MOVLW	@@#lstr_4_extruder
$3562	$6F25	    			MOVWF	_unknownCommand+2, 1
$3564	$0EAC	    			MOVLW	172
$3566	$6E53	    			MOVWF	_EEPROM_VERSION_ID+0, 0
$3568	$0E28	    			MOVLW	#lstr_5_extruder
$356A	$6F26	    			MOVWF	_cmd_status+0, 1
$356C	$0E3B	    			MOVLW	@#lstr_5_extruder
$356E	$6F27	    			MOVWF	_cmd_status+1, 1
$3570	$0E00	    			MOVLW	@@#lstr_5_extruder
$3572	$6F28	    			MOVWF	_cmd_status+2, 1
$3574	$0E2A	    			MOVLW	#lstr_6_extruder
$3576	$6F29	    			MOVWF	_cmd_saveEEprom+0, 1
$3578	$0E3B	    			MOVLW	@#lstr_6_extruder
$357A	$6F2A	    			MOVWF	_cmd_saveEEprom+1, 1
$357C	$0E00	    			MOVLW	@@#lstr_6_extruder
$357E	$6F2B	    			MOVWF	_cmd_saveEEprom+2, 1
$3580	$0E2C	    			MOVLW	#lstr_7_extruder
$3582	$6F2C	    			MOVWF	_cmd_readEEprom+0, 1
$3584	$0E3B	    			MOVLW	@#lstr_7_extruder
$3586	$6F2D	    			MOVWF	_cmd_readEEprom+1, 1
$3588	$0E00	    			MOVLW	@@#lstr_7_extruder
$358A	$6F2E	    			MOVWF	_cmd_readEEprom+2, 1
$358C	$0E30	    			MOVLW	#lstr_8_extruder
$358E	$6F2F	    			MOVWF	_cmd_defaults+0, 1
$3590	$0E3B	    			MOVLW	@#lstr_8_extruder
$3592	$6F30	    			MOVWF	_cmd_defaults+1, 1
$3594	$0E00	    			MOVLW	@@#lstr_8_extruder
$3596	$6F31	    			MOVWF	_cmd_defaults+2, 1
$3598	$0E34	    			MOVLW	#lstr_9_extruder
$359A	$6F32	    			MOVWF	_cmd_globalHeaterEnable+0, 1
$359C	$0E3B	    			MOVLW	@#lstr_9_extruder
$359E	$6F33	    			MOVWF	_cmd_globalHeaterEnable+1, 1
$35A0	$0E00	    			MOVLW	@@#lstr_9_extruder
$35A2	$6F34	    			MOVWF	_cmd_globalHeaterEnable+2, 1
$35A4	$0E38	    			MOVLW	#lstr_10_extruder
$35A6	$6F35	    			MOVWF	_cmd_globalMotorEnable+0, 1
$35A8	$0E3B	    			MOVLW	@#lstr_10_extruder
$35AA	$6F36	    			MOVWF	_cmd_globalMotorEnable+1, 1
$35AC	$0E00	    			MOVLW	@@#lstr_10_extruder
$35AE	$6F37	    			MOVWF	_cmd_globalMotorEnable+2, 1
$35B0	$0E3C	    			MOVLW	#lstr_11_extruder
$35B2	$6F38	    			MOVWF	_cmd_heater_Kp+0, 1
$35B4	$0E3B	    			MOVLW	@#lstr_11_extruder
$35B6	$6F39	    			MOVWF	_cmd_heater_Kp+1, 1
$35B8	$0E00	    			MOVLW	@@#lstr_11_extruder
$35BA	$6F3A	    			MOVWF	_cmd_heater_Kp+2, 1
$35BC	$0E40	    			MOVLW	#lstr_12_extruder
$35BE	$6F3B	    			MOVWF	_cmd_heater_Ki+0, 1
$35C0	$0E3B	    			MOVLW	@#lstr_12_extruder
$35C2	$6F3C	    			MOVWF	_cmd_heater_Ki+1, 1
$35C4	$0E00	    			MOVLW	@@#lstr_12_extruder
$35C6	$6F3D	    			MOVWF	_cmd_heater_Ki+2, 1
$35C8	$0E44	    			MOVLW	#lstr_13_extruder
$35CA	$6F3E	    			MOVWF	_cmd_heater_Kd+0, 1
$35CC	$0E3B	    			MOVLW	@#lstr_13_extruder
$35CE	$6F3F	    			MOVWF	_cmd_heater_Kd+1, 1
$35D0	$0E00	    			MOVLW	@@#lstr_13_extruder
$35D2	$6F40	    			MOVWF	_cmd_heater_Kd+2, 1
$35D4	$0E48	    			MOVLW	#lstr_14_extruder
$35D6	$6F41	    			MOVWF	_cmd_heater_kff0+0, 1
$35D8	$0E3B	    			MOVLW	@#lstr_14_extruder
$35DA	$6F42	    			MOVWF	_cmd_heater_kff0+1, 1
$35DC	$0E00	    			MOVLW	@@#lstr_14_extruder
$35DE	$6F43	    			MOVWF	_cmd_heater_kff0+2, 1
$35E0	$0E4E	    			MOVLW	#lstr_15_extruder
$35E2	$6F44	    			MOVWF	_cmd_heater_duty+0, 1
$35E4	$0E3B	    			MOVLW	@#lstr_15_extruder
$35E6	$6F45	    			MOVWF	_cmd_heater_duty+1, 1
$35E8	$0E00	    			MOVLW	@@#lstr_15_extruder
$35EA	$6F46	    			MOVWF	_cmd_heater_duty+2, 1
$35EC	$0E52	    			MOVLW	#lstr_16_extruder
$35EE	$6F47	    			MOVWF	_cmd_heater_SetTemp+0, 1
$35F0	$0E3B	    			MOVLW	@#lstr_16_extruder
$35F2	$6F48	    			MOVWF	_cmd_heater_SetTemp+1, 1
$35F4	$0E00	    			MOVLW	@@#lstr_16_extruder
$35F6	$6F49	    			MOVWF	_cmd_heater_SetTemp+2, 1
$35F8	$0E56	    			MOVLW	#lstr_17_extruder
$35FA	$6F4A	    			MOVWF	_cmd_heater_SetFeedback+0, 1
$35FC	$0E3B	    			MOVLW	@#lstr_17_extruder
$35FE	$6F4B	    			MOVWF	_cmd_heater_SetFeedback+1, 1
$3600	$0E00	    			MOVLW	@@#lstr_17_extruder
$3602	$6F4C	    			MOVWF	_cmd_heater_SetFeedback+2, 1
$3604	$0E5A	    			MOVLW	#lstr_18_extruder
$3606	$6F4D	    			MOVWF	_cmd_motor_Kp+0, 1
$3608	$0E3B	    			MOVLW	@#lstr_18_extruder
$360A	$6F4E	    			MOVWF	_cmd_motor_Kp+1, 1
$360C	$0E00	    			MOVLW	@@#lstr_18_extruder
$360E	$6F4F	    			MOVWF	_cmd_motor_Kp+2, 1
$3610	$0E5E	    			MOVLW	#lstr_19_extruder
$3612	$6F50	    			MOVWF	_cmd_motor_Ki+0, 1
$3614	$0E3B	    			MOVLW	@#lstr_19_extruder
$3616	$6F51	    			MOVWF	_cmd_motor_Ki+1, 1
$3618	$0E00	    			MOVLW	@@#lstr_19_extruder
$361A	$6F52	    			MOVWF	_cmd_motor_Ki+2, 1
$361C	$0E62	    			MOVLW	#lstr_20_extruder
$361E	$6F53	    			MOVWF	_cmd_motor_Kd+0, 1
$3620	$0E3B	    			MOVLW	@#lstr_20_extruder
$3622	$6F54	    			MOVWF	_cmd_motor_Kd+1, 1
$3624	$0E00	    			MOVLW	@@#lstr_20_extruder
$3626	$6F55	    			MOVWF	_cmd_motor_Kd+2, 1
$3628	$0E66	    			MOVLW	#lstr_21_extruder
$362A	$6F56	    			MOVWF	_cmd_motor_duty+0, 1
$362C	$0E3B	    			MOVLW	@#lstr_21_extruder
$362E	$6F57	    			MOVWF	_cmd_motor_duty+1, 1
$3630	$0E00	    			MOVLW	@@#lstr_21_extruder
$3632	$6F58	    			MOVWF	_cmd_motor_duty+2, 1
$3634	$0E6A	    			MOVLW	#lstr_22_extruder
$3636	$6F59	    			MOVWF	_cmd_motor_Kff1+0, 1
$3638	$0E3B	    			MOVLW	@#lstr_22_extruder
$363A	$6F5A	    			MOVWF	_cmd_motor_Kff1+1, 1
$363C	$0E00	    			MOVLW	@@#lstr_22_extruder
$363E	$6F5B	    			MOVWF	_cmd_motor_Kff1+2, 1
$3640	$0E6E	    			MOVLW	#lstr_23_extruder
$3642	$6F5C	    			MOVWF	_cmd_motor_SetPos+0, 1
$3644	$0E3B	    			MOVLW	@#lstr_23_extruder
$3646	$6F5D	    			MOVWF	_cmd_motor_SetPos+1, 1
$3648	$0E00	    			MOVLW	@@#lstr_23_extruder
$364A	$6F5E	    			MOVWF	_cmd_motor_SetPos+2, 1
$364C	$0E74	    			MOVLW	#lstr_24_extruder
$364E	$6F5F	    			MOVWF	_cmd_motor_Speed+0, 1
$3650	$0E3B	    			MOVLW	@#lstr_24_extruder
$3652	$6F60	    			MOVWF	_cmd_motor_Speed+1, 1
$3654	$0E00	    			MOVLW	@@#lstr_24_extruder
$3656	$6F61	    			MOVWF	_cmd_motor_Speed+2, 1
$3658	$0E78	    			MOVLW	#lstr_25_extruder
$365A	$6F62	    			MOVWF	_cmd_motor_SetFeedback+0, 1
$365C	$0E3B	    			MOVLW	@#lstr_25_extruder
$365E	$6F63	    			MOVWF	_cmd_motor_SetFeedback+1, 1
$3660	$0E00	    			MOVLW	@@#lstr_25_extruder
$3662	$6F64	    			MOVWF	_cmd_motor_SetFeedback+2, 1
;extruder.c,240 :: 			const char *cmd_motor_SetFeedback = "mf";
$3664	$0012	    			RETURN
$3666	$	_Usart_Init:
$3666	$8AAC	    			BSF	TXSTA, 5, 0
$3668	$0E90	    			MOVLW	144
$366A	$6EAB	    			MOVWF	RCSTA, 0
$366C	$8E94	    			BSF	TRISC, 7, 0
$366E	$9C94	    			BCF	TRISC, 6, 0
$3670	$	L_Usart_Init_0:
$3670	$AA9E	    			BTFSS	PIR1, 5, 0
$3672	$D003	    			BRA	L_Usart_Init_1
$3674	$CFAE	F060			MOVFF	RCREG, Usart_Init_tmp_L0
$3678	$D7FB	    			BRA	L_Usart_Init_0
$367A	$	L_Usart_Init_1:
$367A	$0012	    			RETURN
$367C	$	_main:
;extruder.c,952 :: 			void main() {
;extruder.c,956 :: 			txtPos = 0;
$367C	$EC3A	F019			CALL	GlobalIniextruder, 1
$3680	$6A54	    			CLRF	_txtPos, 0
;extruder.c,959 :: 			Usart_Init(38400);
$3682	$0E40	    			MOVLW	64
$3684	$6EAF	    			MOVWF	SPBRG, 0
$3686	$84AC	    			BSF	TXSTA, BRGH, 0
$3688	$EC33	F01B			CALL	_Usart_Init
;extruder.c,960 :: 			initDuty(120);
$368C	$0E78	    			MOVLW	120
$368E	$0100	    			MOVLB	0
$3690	$6F60	    			MOVWF	FARG_initDuty+0, 1
$3692	$EC5C	F014			CALL	_initDuty
;extruder.c,961 :: 			initRegisters();
$3696	$EC62	F014			CALL	_initRegisters
;extruder.c,962 :: 			resetPosition();
$369A	$EC9A	F014			CALL	_resetPosition
;extruder.c,966 :: 			printMessage(splash);
$369E	$C05C	F1A6			MOVFF	_splash, FARG_printMessage+0
$36A2	$C05D	F1A7			MOVFF	_splash+1, FARG_printMessage+1
$36A6	$C05E	F1A8			MOVFF	_splash+2, FARG_printMessage+2
$36AA	$ECAA	F014			CALL	_printMessage
;extruder.c,969 :: 			if ( ! readMemory() ){
$36AE	$ECC4	F014			CALL	_readMemory
$36B2	$5200	    			MOVF	STACK_0, 1, 0
$36B4	$E108	    			BNZ	L_main_61
;extruder.c,970 :: 			printMessage(noEeprom);
$36B6	$C120	F1A6			MOVFF	_noEeprom, FARG_printMessage+0
$36BA	$C121	F1A7			MOVFF	_noEeprom+1, FARG_printMessage+1
$36BE	$C122	F1A8			MOVFF	_noEeprom+2, FARG_printMessage+2
$36C2	$ECAA	F014			CALL	_printMessage
;extruder.c,971 :: 			}
$36C6	$	L_main_61:
;extruder.c,972 :: 			printMessage(cmdPrompt);
$36C6	$C11D	F1A6			MOVFF	_cmdPrompt, FARG_printMessage+0
$36CA	$C11E	F1A7			MOVFF	_cmdPrompt+1, FARG_printMessage+1
$36CE	$C11F	F1A8			MOVFF	_cmdPrompt+2, FARG_printMessage+2
$36D2	$ECAA	F014			CALL	_printMessage
;extruder.c,977 :: 			RCON.IPEN = 1;
$36D6	$8ED0	    			BSF	RCON, 7, 0
;extruder.c,978 :: 			INTCON.GIE = 1;
$36D8	$8EF2	    			BSF	INTCON, 7, 0
;extruder.c,979 :: 			INTCON.PEIE = 1;
$36DA	$8CF2	    			BSF	INTCON, 6, 0
;extruder.c,980 :: 			MOTOR_BRAKE_PIN = 0;
$36DC	$9081	    			BCF	PORTB, 0, 0
;extruder.c,981 :: 			while(1) {
$36DE	$	L_main_62:
;extruder.c,982 :: 			CPU_BANDWIDTH_PIN = ~CPU_BANDWIDTH_PIN;
$36DE	$6A04	    			CLRF	STACK_4, 0
$36E0	$BC83	    			BTFSC	PORTD, 6, 0
$36E2	$2A04	    			INCF	STACK_4, 1, 0
$36E4	$1C04	    			COMF	STACK_4, 0, 0
$36E6	$6E00	    			MOVWF	STACK_0, 0
$36E8	$0E00	    			MOVLW	0
$36EA	$B000	    			BTFSC	STACK_0, 0, 0
$36EC	$0E40	    			MOVLW	64
$36EE	$1883	    			XORWF	PORTD, 0, 0
$36F0	$0B40	    			ANDLW	64
$36F2	$1A83	    			XORWF	PORTD, 1, 0
;extruder.c,985 :: 			while ( Usart_Data_Ready() ) {
$36F4	$	L_main_64:
$36F4	$ECF8	F014			CALL	_Usart_Data_Ready
$36F8	$5200	    			MOVF	STACK_0, 1, 0
$36FA	$B4D8	    			BTFSC	STATUS, Z, 0
$36FC	$D1FC	    			BRA	L_main_65
;extruder.c,986 :: 			x = Usart_Read();
$36FE	$ECFE	F014			CALL	_Usart_Read
;extruder.c,992 :: 			if ( pushChar(x) ){
$3702	$C000	F060			MOVFF	STACK_0, FARG_pushChar+0
$3706	$EC07	F015			CALL	_pushChar
$370A	$5000	    			MOVF	STACK_0, 0, 0
$370C	$1001	    			IORWF	STACK_0+1, 0, 0
$370E	$B4D8	    			BTFSC	STATUS, Z, 0
$3710	$D1F1	    			BRA	L_main_66
;extruder.c,995 :: 			if ( commandMatches(cmd_status ) ){
$3712	$C126	F1A6			MOVFF	_cmd_status, FARG_commandMatches+0
$3716	$C127	F1A7			MOVFF	_cmd_status+1, FARG_commandMatches+1
$371A	$C128	F1A8			MOVFF	_cmd_status+2, FARG_commandMatches+2
$371E	$EC32	F015			CALL	_commandMatches
$3722	$5200	    			MOVF	STACK_0, 1, 0
$3724	$E003	    			BZ	L_main_67
;extruder.c,996 :: 			printStatus();
$3726	$EC6A	F015			CALL	_printStatus
;extruder.c,997 :: 			}
$372A	$D1DC	    			BRA	L_main_68
$372C	$	L_main_67:
;extruder.c,998 :: 			else if ( commandMatches(cmd_saveEEprom )){
$372C	$C129	F1A6			MOVFF	_cmd_saveEEprom, FARG_commandMatches+0
$3730	$C12A	F1A7			MOVFF	_cmd_saveEEprom+1, FARG_commandMatches+1
$3734	$C12B	F1A8			MOVFF	_cmd_saveEEprom+2, FARG_commandMatches+2
$3738	$EC32	F015			CALL	_commandMatches
$373C	$5200	    			MOVF	STACK_0, 1, 0
$373E	$E003	    			BZ	L_main_69
;extruder.c,999 :: 			writeMemory();
$3740	$ECAE	F018			CALL	_writeMemory
;extruder.c,1000 :: 			}
$3744	$D1CF	    			BRA	L_main_70
$3746	$	L_main_69:
;extruder.c,1001 :: 			else if ( commandMatches(cmd_readEEprom )){
$3746	$C12C	F1A6			MOVFF	_cmd_readEEprom, FARG_commandMatches+0
$374A	$C12D	F1A7			MOVFF	_cmd_readEEprom+1, FARG_commandMatches+1
$374E	$C12E	F1A8			MOVFF	_cmd_readEEprom+2, FARG_commandMatches+2
$3752	$EC32	F015			CALL	_commandMatches
$3756	$5200	    			MOVF	STACK_0, 1, 0
$3758	$E003	    			BZ	L_main_71
;extruder.c,1002 :: 			readMemory();
$375A	$ECC4	F014			CALL	_readMemory
;extruder.c,1003 :: 			}
$375E	$D1C2	    			BRA	L_main_72
$3760	$	L_main_71:
;extruder.c,1004 :: 			else if ( commandMatches(cmd_globalMotorEnable)){
$3760	$C135	F1A6			MOVFF	_cmd_globalMotorEnable, FARG_commandMatches+0
$3764	$C136	F1A7			MOVFF	_cmd_globalMotorEnable+1, FARG_commandMatches+1
$3768	$C137	F1A8			MOVFF	_cmd_globalMotorEnable+2, FARG_commandMatches+2
$376C	$EC32	F015			CALL	_commandMatches
$3770	$5200	    			MOVF	STACK_0, 1, 0
$3772	$E00A	    			BZ	L_main_73
;extruder.c,1005 :: 			motorGlobalEnable = findIntValue(cmdBuffer);
$3774	$0EF5	    			MOVLW	_cmdBuffer
$3776	$0101	    			MOVLB	1
$3778	$6FA6	    			MOVWF	FARG_findIntValue+0, 1
$377A	$0E00	    			MOVLW	@_cmdBuffer
$377C	$6FA7	    			MOVWF	FARG_findIntValue+1, 1
$377E	$ECDA	F018			CALL	_findIntValue
$3782	$C000	F02A			MOVFF	STACK_0, _motorGlobalEnable
;extruder.c,1012 :: 			}
$3786	$D1AE	    			BRA	L_main_74
$3788	$	L_main_73:
;extruder.c,1013 :: 			else if ( commandMatches(cmd_globalHeaterEnable)){
$3788	$C132	F1A6			MOVFF	_cmd_globalHeaterEnable, FARG_commandMatches+0
$378C	$C133	F1A7			MOVFF	_cmd_globalHeaterEnable+1, FARG_commandMatches+1
$3790	$C134	F1A8			MOVFF	_cmd_globalHeaterEnable+2, FARG_commandMatches+2
$3794	$EC32	F015			CALL	_commandMatches
$3798	$5200	    			MOVF	STACK_0, 1, 0
$379A	$E00A	    			BZ	L_main_75
;extruder.c,1014 :: 			heaterGlobalEnable = findIntValue(cmdBuffer);
$379C	$0EF5	    			MOVLW	_cmdBuffer
$379E	$0101	    			MOVLB	1
$37A0	$6FA6	    			MOVWF	FARG_findIntValue+0, 1
$37A2	$0E00	    			MOVLW	@_cmdBuffer
$37A4	$6FA7	    			MOVWF	FARG_findIntValue+1, 1
$37A6	$ECDA	F018			CALL	_findIntValue
$37AA	$C000	F021			MOVFF	STACK_0, _heaterGlobalEnable
;extruder.c,1015 :: 			}
$37AE	$D19A	    			BRA	L_main_76
$37B0	$	L_main_75:
;extruder.c,1016 :: 			else if ( commandMatches(cmd_defaults)){
$37B0	$C12F	F1A6			MOVFF	_cmd_defaults, FARG_commandMatches+0
$37B4	$C130	F1A7			MOVFF	_cmd_defaults+1, FARG_commandMatches+1
$37B8	$C131	F1A8			MOVFF	_cmd_defaults+2, FARG_commandMatches+2
$37BC	$EC32	F015			CALL	_commandMatches
$37C0	$5200	    			MOVF	STACK_0, 1, 0
$37C2	$E003	    			BZ	L_main_77
;extruder.c,1018 :: 			clearMemory();
$37C4	$ECF5	F018			CALL	_clearMemory
;extruder.c,1019 :: 			}
$37C8	$D18D	    			BRA	L_main_78
$37CA	$	L_main_77:
;extruder.c,1020 :: 			else if ( commandMatches(cmd_heater_kff0)){
$37CA	$C141	F1A6			MOVFF	_cmd_heater_kff0, FARG_commandMatches+0
$37CE	$C142	F1A7			MOVFF	_cmd_heater_kff0+1, FARG_commandMatches+1
$37D2	$C143	F1A8			MOVFF	_cmd_heater_kff0+2, FARG_commandMatches+2
$37D6	$EC32	F015			CALL	_commandMatches
$37DA	$5200	    			MOVF	STACK_0, 1, 0
$37DC	$E010	    			BZ	L_main_79
;extruder.c,1021 :: 			pid_heater.ff0gain = findFloatValue(cmdBuffer);
$37DE	$0EF5	    			MOVLW	_cmdBuffer
$37E0	$0101	    			MOVLB	1
$37E2	$6FA6	    			MOVWF	FARG_findFloatValue+0, 1
$37E4	$0E00	    			MOVLW	@_cmdBuffer
$37E6	$6FA7	    			MOVWF	FARG_findFloatValue+1, 1
$37E8	$EC04	F019			CALL	_findFloatValue
$37EC	$C000	F09D			MOVFF	STACK_0, _pid_heater+60
$37F0	$C001	F09E			MOVFF	STACK_0+1, _pid_heater+61
$37F4	$C002	F09F			MOVFF	STACK_0+2, _pid_heater+62
$37F8	$C003	F0A0			MOVFF	STACK_0+3, _pid_heater+63
;extruder.c,1022 :: 			}
$37FC	$D173	    			BRA	L_main_80
$37FE	$	L_main_79:
;extruder.c,1023 :: 			else if ( commandMatches(cmd_heater_SetFeedback)){
$37FE	$C14A	F1A6			MOVFF	_cmd_heater_SetFeedback, FARG_commandMatches+0
$3802	$C14B	F1A7			MOVFF	_cmd_heater_SetFeedback+1, FARG_commandMatches+1
$3806	$C14C	F1A8			MOVFF	_cmd_heater_SetFeedback+2, FARG_commandMatches+2
$380A	$EC32	F015			CALL	_commandMatches
$380E	$5200	    			MOVF	STACK_0, 1, 0
$3810	$E012	    			BZ	L_main_81
;extruder.c,1024 :: 			pid_heater.feedback = findIntValue(cmdBuffer);
$3812	$0EF5	    			MOVLW	_cmdBuffer
$3814	$0101	    			MOVLB	1
$3816	$6FA6	    			MOVWF	FARG_findIntValue+0, 1
$3818	$0E00	    			MOVLW	@_cmdBuffer
$381A	$6FA7	    			MOVWF	FARG_findIntValue+1, 1
$381C	$ECDA	F018			CALL	_findIntValue
$3820	$C000	F065			MOVFF	STACK_0, _pid_heater+4
$3824	$C001	F066			MOVFF	STACK_0+1, _pid_heater+5
$3828	$0E00	    			MOVLW	0
$382A	$BE01	    			BTFSC	STACK_0+1, 7, 0
$382C	$0EFF	    			MOVLW	255
$382E	$0100	    			MOVLB	0
$3830	$6F67	    			MOVWF	_pid_heater+6, 1
$3832	$6F68	    			MOVWF	_pid_heater+7, 1
;extruder.c,1025 :: 			}
$3834	$D157	    			BRA	L_main_82
$3836	$	L_main_81:
;extruder.c,1026 :: 			else if ( commandMatches(cmd_heater_Kp )){
$3836	$C138	F1A6			MOVFF	_cmd_heater_Kp, FARG_commandMatches+0
$383A	$C139	F1A7			MOVFF	_cmd_heater_Kp+1, FARG_commandMatches+1
$383E	$C13A	F1A8			MOVFF	_cmd_heater_Kp+2, FARG_commandMatches+2
$3842	$EC32	F015			CALL	_commandMatches
$3846	$5200	    			MOVF	STACK_0, 1, 0
$3848	$E010	    			BZ	L_main_83
;extruder.c,1027 :: 			pid_heater.pgain = findFloatValue(cmdBuffer);
$384A	$0EF5	    			MOVLW	_cmdBuffer
$384C	$0101	    			MOVLB	1
$384E	$6FA6	    			MOVWF	FARG_findFloatValue+0, 1
$3850	$0E00	    			MOVLW	@_cmdBuffer
$3852	$6FA7	    			MOVWF	FARG_findFloatValue+1, 1
$3854	$EC04	F019			CALL	_findFloatValue
$3858	$C000	F091			MOVFF	STACK_0, _pid_heater+48
$385C	$C001	F092			MOVFF	STACK_0+1, _pid_heater+49
$3860	$C002	F093			MOVFF	STACK_0+2, _pid_heater+50
$3864	$C003	F094			MOVFF	STACK_0+3, _pid_heater+51
;extruder.c,1028 :: 			}
$3868	$D13D	    			BRA	L_main_84
$386A	$	L_main_83:
;extruder.c,1029 :: 			else if ( commandMatches(cmd_heater_Ki )){
$386A	$C13B	F1A6			MOVFF	_cmd_heater_Ki, FARG_commandMatches+0
$386E	$C13C	F1A7			MOVFF	_cmd_heater_Ki+1, FARG_commandMatches+1
$3872	$C13D	F1A8			MOVFF	_cmd_heater_Ki+2, FARG_commandMatches+2
$3876	$EC32	F015			CALL	_commandMatches
$387A	$5200	    			MOVF	STACK_0, 1, 0
$387C	$E010	    			BZ	L_main_85
;extruder.c,1030 :: 			pid_heater.igain = findFloatValue(cmdBuffer);
$387E	$0EF5	    			MOVLW	_cmdBuffer
$3880	$0101	    			MOVLB	1
$3882	$6FA6	    			MOVWF	FARG_findFloatValue+0, 1
$3884	$0E00	    			MOVLW	@_cmdBuffer
$3886	$6FA7	    			MOVWF	FARG_findFloatValue+1, 1
$3888	$EC04	F019			CALL	_findFloatValue
$388C	$C000	F095			MOVFF	STACK_0, _pid_heater+52
$3890	$C001	F096			MOVFF	STACK_0+1, _pid_heater+53
$3894	$C002	F097			MOVFF	STACK_0+2, _pid_heater+54
$3898	$C003	F098			MOVFF	STACK_0+3, _pid_heater+55
;extruder.c,1031 :: 			}
$389C	$D123	    			BRA	L_main_86
$389E	$	L_main_85:
;extruder.c,1032 :: 			else if ( commandMatches(cmd_heater_Kd )){
$389E	$C13E	F1A6			MOVFF	_cmd_heater_Kd, FARG_commandMatches+0
$38A2	$C13F	F1A7			MOVFF	_cmd_heater_Kd+1, FARG_commandMatches+1
$38A6	$C140	F1A8			MOVFF	_cmd_heater_Kd+2, FARG_commandMatches+2
$38AA	$EC32	F015			CALL	_commandMatches
$38AE	$5200	    			MOVF	STACK_0, 1, 0
$38B0	$E010	    			BZ	L_main_87
;extruder.c,1033 :: 			pid_heater.dgain = findFloatValue(cmdBuffer);
$38B2	$0EF5	    			MOVLW	_cmdBuffer
$38B4	$0101	    			MOVLB	1
$38B6	$6FA6	    			MOVWF	FARG_findFloatValue+0, 1
$38B8	$0E00	    			MOVLW	@_cmdBuffer
$38BA	$6FA7	    			MOVWF	FARG_findFloatValue+1, 1
$38BC	$EC04	F019			CALL	_findFloatValue
$38C0	$C000	F099			MOVFF	STACK_0, _pid_heater+56
$38C4	$C001	F09A			MOVFF	STACK_0+1, _pid_heater+57
$38C8	$C002	F09B			MOVFF	STACK_0+2, _pid_heater+58
$38CC	$C003	F09C			MOVFF	STACK_0+3, _pid_heater+59
;extruder.c,1034 :: 			}
$38D0	$D109	    			BRA	L_main_88
$38D2	$	L_main_87:
;extruder.c,1035 :: 			else if ( commandMatches(cmd_heater_duty )){
$38D2	$C144	F1A6			MOVFF	_cmd_heater_duty, FARG_commandMatches+0
$38D6	$C145	F1A7			MOVFF	_cmd_heater_duty+1, FARG_commandMatches+1
$38DA	$C146	F1A8			MOVFF	_cmd_heater_duty+2, FARG_commandMatches+2
$38DE	$EC32	F015			CALL	_commandMatches
$38E2	$5200	    			MOVF	STACK_0, 1, 0
$38E4	$E00C	    			BZ	L_main_89
;extruder.c,1036 :: 			debugHeaterDuty = findIntValue(cmdBuffer);
$38E6	$0EF5	    			MOVLW	_cmdBuffer
$38E8	$0101	    			MOVLB	1
$38EA	$6FA6	    			MOVWF	FARG_findIntValue+0, 1
$38EC	$0E00	    			MOVLW	@_cmdBuffer
$38EE	$6FA7	    			MOVWF	FARG_findIntValue+1, 1
$38F0	$ECDA	F018			CALL	_findIntValue
$38F4	$C000	F025			MOVFF	STACK_0, _debugHeaterDuty
$38F8	$C001	F026			MOVFF	STACK_0+1, _debugHeaterDuty+1
;extruder.c,1037 :: 			}
$38FC	$D0F3	    			BRA	L_main_90
$38FE	$	L_main_89:
;extruder.c,1039 :: 			else if ( commandMatches(cmd_heater_SetTemp )){
$38FE	$C147	F1A6			MOVFF	_cmd_heater_SetTemp, FARG_commandMatches+0
$3902	$C148	F1A7			MOVFF	_cmd_heater_SetTemp+1, FARG_commandMatches+1
$3906	$C149	F1A8			MOVFF	_cmd_heater_SetTemp+2, FARG_commandMatches+2
$390A	$EC32	F015			CALL	_commandMatches
$390E	$5200	    			MOVF	STACK_0, 1, 0
$3910	$E012	    			BZ	L_main_91
;extruder.c,1040 :: 			pid_heater.command = findIntValue(cmdBuffer);
$3912	$0EF5	    			MOVLW	_cmdBuffer
$3914	$0101	    			MOVLB	1
$3916	$6FA6	    			MOVWF	FARG_findIntValue+0, 1
$3918	$0E00	    			MOVLW	@_cmdBuffer
$391A	$6FA7	    			MOVWF	FARG_findIntValue+1, 1
$391C	$ECDA	F018			CALL	_findIntValue
$3920	$C000	F061			MOVFF	STACK_0, _pid_heater+0
$3924	$C001	F062			MOVFF	STACK_0+1, _pid_heater+1
$3928	$0E00	    			MOVLW	0
$392A	$BE01	    			BTFSC	STACK_0+1, 7, 0
$392C	$0EFF	    			MOVLW	255
$392E	$0100	    			MOVLB	0
$3930	$6F63	    			MOVWF	_pid_heater+2, 1
$3932	$6F64	    			MOVWF	_pid_heater+3, 1
;extruder.c,1041 :: 			}
$3934	$D0D7	    			BRA	L_main_92
$3936	$	L_main_91:
;extruder.c,1042 :: 			else if ( commandMatches(cmd_motor_Kp )){
$3936	$C14D	F1A6			MOVFF	_cmd_motor_Kp, FARG_commandMatches+0
$393A	$C14E	F1A7			MOVFF	_cmd_motor_Kp+1, FARG_commandMatches+1
$393E	$C14F	F1A8			MOVFF	_cmd_motor_Kp+2, FARG_commandMatches+2
$3942	$EC32	F015			CALL	_commandMatches
$3946	$5200	    			MOVF	STACK_0, 1, 0
$3948	$E010	    			BZ	L_main_93
;extruder.c,1043 :: 			pid_motor.pgain = findFloatValue(cmdBuffer);
$394A	$0EF5	    			MOVLW	_cmdBuffer
$394C	$0101	    			MOVLB	1
$394E	$6FA6	    			MOVWF	FARG_findFloatValue+0, 1
$3950	$0E00	    			MOVLW	@_cmdBuffer
$3952	$6FA7	    			MOVWF	FARG_findFloatValue+1, 1
$3954	$EC04	F019			CALL	_findFloatValue
$3958	$C000	F0DB			MOVFF	STACK_0, _pid_motor+48
$395C	$C001	F0DC			MOVFF	STACK_0+1, _pid_motor+49
$3960	$C002	F0DD			MOVFF	STACK_0+2, _pid_motor+50
$3964	$C003	F0DE			MOVFF	STACK_0+3, _pid_motor+51
;extruder.c,1044 :: 			}
$3968	$D0BD	    			BRA	L_main_94
$396A	$	L_main_93:
;extruder.c,1045 :: 			else if ( commandMatches(cmd_motor_Ki )){
$396A	$C150	F1A6			MOVFF	_cmd_motor_Ki, FARG_commandMatches+0
$396E	$C151	F1A7			MOVFF	_cmd_motor_Ki+1, FARG_commandMatches+1
$3972	$C152	F1A8			MOVFF	_cmd_motor_Ki+2, FARG_commandMatches+2
$3976	$EC32	F015			CALL	_commandMatches
$397A	$5200	    			MOVF	STACK_0, 1, 0
$397C	$E010	    			BZ	L_main_95
;extruder.c,1046 :: 			pid_motor.igain = findFloatValue(cmdBuffer);
$397E	$0EF5	    			MOVLW	_cmdBuffer
$3980	$0101	    			MOVLB	1
$3982	$6FA6	    			MOVWF	FARG_findFloatValue+0, 1
$3984	$0E00	    			MOVLW	@_cmdBuffer
$3986	$6FA7	    			MOVWF	FARG_findFloatValue+1, 1
$3988	$EC04	F019			CALL	_findFloatValue
$398C	$C000	F0DF			MOVFF	STACK_0, _pid_motor+52
$3990	$C001	F0E0			MOVFF	STACK_0+1, _pid_motor+53
$3994	$C002	F0E1			MOVFF	STACK_0+2, _pid_motor+54
$3998	$C003	F0E2			MOVFF	STACK_0+3, _pid_motor+55
;extruder.c,1047 :: 			}
$399C	$D0A3	    			BRA	L_main_96
$399E	$	L_main_95:
;extruder.c,1048 :: 			else if ( commandMatches(cmd_motor_Kd )){
$399E	$C153	F1A6			MOVFF	_cmd_motor_Kd, FARG_commandMatches+0
$39A2	$C154	F1A7			MOVFF	_cmd_motor_Kd+1, FARG_commandMatches+1
$39A6	$C155	F1A8			MOVFF	_cmd_motor_Kd+2, FARG_commandMatches+2
$39AA	$EC32	F015			CALL	_commandMatches
$39AE	$5200	    			MOVF	STACK_0, 1, 0
$39B0	$E010	    			BZ	L_main_97
;extruder.c,1049 :: 			pid_motor.dgain = findFloatValue(cmdBuffer);
$39B2	$0EF5	    			MOVLW	_cmdBuffer
$39B4	$0101	    			MOVLB	1
$39B6	$6FA6	    			MOVWF	FARG_findFloatValue+0, 1
$39B8	$0E00	    			MOVLW	@_cmdBuffer
$39BA	$6FA7	    			MOVWF	FARG_findFloatValue+1, 1
$39BC	$EC04	F019			CALL	_findFloatValue
$39C0	$C000	F0E3			MOVFF	STACK_0, _pid_motor+56
$39C4	$C001	F0E4			MOVFF	STACK_0+1, _pid_motor+57
$39C8	$C002	F0E5			MOVFF	STACK_0+2, _pid_motor+58
$39CC	$C003	F0E6			MOVFF	STACK_0+3, _pid_motor+59
;extruder.c,1050 :: 			}
$39D0	$D089	    			BRA	L_main_98
$39D2	$	L_main_97:
;extruder.c,1051 :: 			else if ( commandMatches(cmd_motor_Kff1 )){
$39D2	$C159	F1A6			MOVFF	_cmd_motor_Kff1, FARG_commandMatches+0
$39D6	$C15A	F1A7			MOVFF	_cmd_motor_Kff1+1, FARG_commandMatches+1
$39DA	$C15B	F1A8			MOVFF	_cmd_motor_Kff1+2, FARG_commandMatches+2
$39DE	$EC32	F015			CALL	_commandMatches
$39E2	$5200	    			MOVF	STACK_0, 1, 0
$39E4	$E010	    			BZ	L_main_99
;extruder.c,1052 :: 			pid_motor.ff1gain = findFloatValue(cmdBuffer);
$39E6	$0EF5	    			MOVLW	_cmdBuffer
$39E8	$0101	    			MOVLB	1
$39EA	$6FA6	    			MOVWF	FARG_findFloatValue+0, 1
$39EC	$0E00	    			MOVLW	@_cmdBuffer
$39EE	$6FA7	    			MOVWF	FARG_findFloatValue+1, 1
$39F0	$EC04	F019			CALL	_findFloatValue
$39F4	$C000	F0EB			MOVFF	STACK_0, _pid_motor+64
$39F8	$C001	F0EC			MOVFF	STACK_0+1, _pid_motor+65
$39FC	$C002	F0ED			MOVFF	STACK_0+2, _pid_motor+66
$3A00	$C003	F0EE			MOVFF	STACK_0+3, _pid_motor+67
;extruder.c,1053 :: 			}
$3A04	$D06F	    			BRA	L_main_100
$3A06	$	L_main_99:
;extruder.c,1054 :: 			else if ( commandMatches(cmd_motor_duty )){
$3A06	$C156	F1A6			MOVFF	_cmd_motor_duty, FARG_commandMatches+0
$3A0A	$C157	F1A7			MOVFF	_cmd_motor_duty+1, FARG_commandMatches+1
$3A0E	$C158	F1A8			MOVFF	_cmd_motor_duty+2, FARG_commandMatches+2
$3A12	$EC32	F015			CALL	_commandMatches
$3A16	$5200	    			MOVF	STACK_0, 1, 0
$3A18	$E00C	    			BZ	L_main_101
;extruder.c,1055 :: 			debugMotorDuty = findIntValue(cmdBuffer);
$3A1A	$0EF5	    			MOVLW	_cmdBuffer
$3A1C	$0101	    			MOVLB	1
$3A1E	$6FA6	    			MOVWF	FARG_findIntValue+0, 1
$3A20	$0E00	    			MOVLW	@_cmdBuffer
$3A22	$6FA7	    			MOVWF	FARG_findIntValue+1, 1
$3A24	$ECDA	F018			CALL	_findIntValue
$3A28	$C000	F05A			MOVFF	STACK_0, _debugMotorDuty
$3A2C	$C001	F05B			MOVFF	STACK_0+1, _debugMotorDuty+1
;extruder.c,1057 :: 			}
$3A30	$D059	    			BRA	L_main_102
$3A32	$	L_main_101:
;extruder.c,1058 :: 			else if ( commandMatches(cmd_motor_SetPos )){
$3A32	$C15C	F1A6			MOVFF	_cmd_motor_SetPos, FARG_commandMatches+0
$3A36	$C15D	F1A7			MOVFF	_cmd_motor_SetPos+1, FARG_commandMatches+1
$3A3A	$C15E	F1A8			MOVFF	_cmd_motor_SetPos+2, FARG_commandMatches+2
$3A3E	$EC32	F015			CALL	_commandMatches
$3A42	$5200	    			MOVF	STACK_0, 1, 0
$3A44	$E010	    			BZ	L_main_103
;extruder.c,1059 :: 			pid_motor.command = findLongValue(cmdBuffer);
$3A46	$0EF5	    			MOVLW	_cmdBuffer
$3A48	$0101	    			MOVLB	1
$3A4A	$6FA6	    			MOVWF	FARG_findLongValue+0, 1
$3A4C	$0E00	    			MOVLW	@_cmdBuffer
$3A4E	$6FA7	    			MOVWF	FARG_findLongValue+1, 1
$3A50	$EC1F	F019			CALL	_findLongValue
$3A54	$C000	F0AB			MOVFF	STACK_0, _pid_motor+0
$3A58	$C001	F0AC			MOVFF	STACK_0+1, _pid_motor+1
$3A5C	$C002	F0AD			MOVFF	STACK_0+2, _pid_motor+2
$3A60	$C003	F0AE			MOVFF	STACK_0+3, _pid_motor+3
;extruder.c,1060 :: 			}
$3A64	$D03F	    			BRA	L_main_104
$3A66	$	L_main_103:
;extruder.c,1061 :: 			else if ( commandMatches(cmd_motor_Speed )){
$3A66	$C15F	F1A6			MOVFF	_cmd_motor_Speed, FARG_commandMatches+0
$3A6A	$C160	F1A7			MOVFF	_cmd_motor_Speed+1, FARG_commandMatches+1
$3A6E	$C161	F1A8			MOVFF	_cmd_motor_Speed+2, FARG_commandMatches+2
$3A72	$EC32	F015			CALL	_commandMatches
$3A76	$5200	    			MOVF	STACK_0, 1, 0
$3A78	$E00C	    			BZ	L_main_105
;extruder.c,1062 :: 			debugMotorSpeed = findIntValue(cmdBuffer);
$3A7A	$0EF5	    			MOVLW	_cmdBuffer
$3A7C	$0101	    			MOVLB	1
$3A7E	$6FA6	    			MOVWF	FARG_findIntValue+0, 1
$3A80	$0E00	    			MOVLW	@_cmdBuffer
$3A82	$6FA7	    			MOVWF	FARG_findIntValue+1, 1
$3A84	$ECDA	F018			CALL	_findIntValue
$3A88	$C000	F028			MOVFF	STACK_0, _debugMotorSpeed
$3A8C	$C001	F029			MOVFF	STACK_0+1, _debugMotorSpeed+1
;extruder.c,1063 :: 			}
$3A90	$D029	    			BRA	L_main_106
$3A92	$	L_main_105:
;extruder.c,1064 :: 			else if ( commandMatches(cmd_motor_SetFeedback)){
$3A92	$C162	F1A6			MOVFF	_cmd_motor_SetFeedback, FARG_commandMatches+0
$3A96	$C163	F1A7			MOVFF	_cmd_motor_SetFeedback+1, FARG_commandMatches+1
$3A9A	$C164	F1A8			MOVFF	_cmd_motor_SetFeedback+2, FARG_commandMatches+2
$3A9E	$EC32	F015			CALL	_commandMatches
$3AA2	$5200	    			MOVF	STACK_0, 1, 0
$3AA4	$E010	    			BZ	L_main_107
;extruder.c,1065 :: 			pid_motor.feedback = findLongValue(cmdBuffer);
$3AA6	$0EF5	    			MOVLW	_cmdBuffer
$3AA8	$0101	    			MOVLB	1
$3AAA	$6FA6	    			MOVWF	FARG_findLongValue+0, 1
$3AAC	$0E00	    			MOVLW	@_cmdBuffer
$3AAE	$6FA7	    			MOVWF	FARG_findLongValue+1, 1
$3AB0	$EC1F	F019			CALL	_findLongValue
$3AB4	$C000	F0AF			MOVFF	STACK_0, _pid_motor+4
$3AB8	$C001	F0B0			MOVFF	STACK_0+1, _pid_motor+5
$3ABC	$C002	F0B1			MOVFF	STACK_0+2, _pid_motor+6
$3AC0	$C003	F0B2			MOVFF	STACK_0+3, _pid_motor+7
;extruder.c,1067 :: 			}
$3AC4	$D00F	    			BRA	L_main_108
$3AC6	$	L_main_107:
;extruder.c,1070 :: 			printMessage(unknownCommand);
$3AC6	$C123	F1A6			MOVFF	_unknownCommand, FARG_printMessage+0
$3ACA	$C124	F1A7			MOVFF	_unknownCommand+1, FARG_printMessage+1
$3ACE	$C125	F1A8			MOVFF	_unknownCommand+2, FARG_printMessage+2
$3AD2	$ECAA	F014			CALL	_printMessage
;extruder.c,1071 :: 			USART_Send_String(cmdBuffer);
$3AD6	$0EF5	    			MOVLW	_cmdBuffer
$3AD8	$0102	    			MOVLB	2
$3ADA	$6F61	    			MOVWF	FARG_USART_Send_String+0, 1
$3ADC	$0E00	    			MOVLW	@_cmdBuffer
$3ADE	$6F62	    			MOVWF	FARG_USART_Send_String+1, 1
$3AE0	$ECF5	F00D			CALL	_USART_Send_String
;extruder.c,1073 :: 			}
$3AE4	$	L_main_108:
$3AE4	$	L_main_106:
$3AE4	$	L_main_104:
$3AE4	$	L_main_102:
$3AE4	$	L_main_100:
$3AE4	$	L_main_98:
$3AE4	$	L_main_96:
$3AE4	$	L_main_94:
$3AE4	$	L_main_92:
$3AE4	$	L_main_90:
$3AE4	$	L_main_88:
$3AE4	$	L_main_86:
$3AE4	$	L_main_84:
$3AE4	$	L_main_82:
$3AE4	$	L_main_80:
$3AE4	$	L_main_78:
$3AE4	$	L_main_76:
$3AE4	$	L_main_74:
$3AE4	$	L_main_72:
$3AE4	$	L_main_70:
$3AE4	$	L_main_68:
;extruder.c,1074 :: 			printMessage(cmdPrompt);
$3AE4	$C11D	F1A6			MOVFF	_cmdPrompt, FARG_printMessage+0
$3AE8	$C11E	F1A7			MOVFF	_cmdPrompt+1, FARG_printMessage+1
$3AEC	$C11F	F1A8			MOVFF	_cmdPrompt+2, FARG_printMessage+2
$3AF0	$ECAA	F014			CALL	_printMessage
;extruder.c,1075 :: 			}
$3AF4	$	L_main_66:
;extruder.c,1078 :: 			}
$3AF4	$D5FF	    			BRA	L_main_64
$3AF6	$	L_main_65:
;extruder.c,1079 :: 			};
$3AF6	$D5F3	    			BRA	L_main_62
;extruder.c,1081 :: 			}//~!
$3AF8	$D7FF	    			BRA	$
$3AFA	$7845	    			DATA	DATA lstr_1_extruder
$3AFC	$7274	    			DATA	DATA lstr_1_extruder
$3AFE	$6475	    			DATA	DATA lstr_1_extruder
$3B00	$7265	    			DATA	DATA lstr_1_extruder
$3B02	$7620	    			DATA	DATA lstr_1_extruder
$3B04	$2E30	    			DATA	DATA lstr_1_extruder
$3B06	$0031	    			DATA	DATA lstr_1_extruder
$3B08	$FF00	    			DATA	DATA
$3B0A	$430A	    			DATA	DATA lstr_2_extruder
$3B0C	$646D	    			DATA	DATA lstr_2_extruder
$3B0E	$3E3A	    			DATA	DATA lstr_2_extruder
$3B10	$FF00	    			DATA	DATA
$3B12	$4E0A	    			DATA	DATA lstr_3_extruder
$3B14	$206F	    			DATA	DATA lstr_3_extruder
$3B16	$4545	    			DATA	DATA lstr_3_extruder
$3B18	$5250	    			DATA	DATA lstr_3_extruder
$3B1A	$4D4F	    			DATA	DATA lstr_3_extruder
$3B1C	$4420	    			DATA	DATA lstr_3_extruder
$3B1E	$7461	    			DATA	DATA lstr_3_extruder
$3B20	$2E61	    			DATA	DATA lstr_3_extruder
$3B22	$FF00	    			DATA	DATA
$3B24	$3F0A	    			DATA	DATA lstr_4_extruder
$3B26	$003A	    			DATA	DATA lstr_4_extruder
$3B28	$0073	    			DATA	DATA lstr_5_extruder
$3B2A	$0076	    			DATA	DATA lstr_6_extruder
$3B2C	$6472	    			DATA	DATA lstr_7_extruder
$3B2E	$FF00	    			DATA	DATA
$3B30	$6564	    			DATA	DATA lstr_8_extruder
$3B32	$FF00	    			DATA	DATA
$3B34	$6768	    			DATA	DATA lstr_9_extruder
$3B36	$0065	    			DATA	DATA lstr_9_extruder
$3B38	$676D	    			DATA	DATA lstr_10_extruder
$3B3A	$0065	    			DATA	DATA lstr_10_extruder
$3B3C	$7068	    			DATA	DATA lstr_11_extruder
$3B3E	$FF00	    			DATA	DATA
$3B40	$6968	    			DATA	DATA lstr_12_extruder
$3B42	$FF00	    			DATA	DATA
$3B44	$6468	    			DATA	DATA lstr_13_extruder
$3B46	$FF00	    			DATA	DATA
$3B48	$6668	    			DATA	DATA lstr_14_extruder
$3B4A	$3067	    			DATA	DATA lstr_14_extruder
$3B4C	$FF00	    			DATA	DATA
$3B4E	$7968	    			DATA	DATA lstr_15_extruder
$3B50	$FF00	    			DATA	DATA
$3B52	$7468	    			DATA	DATA lstr_16_extruder
$3B54	$FF00	    			DATA	DATA
$3B56	$6668	    			DATA	DATA lstr_17_extruder
$3B58	$FF00	    			DATA	DATA
$3B5A	$706D	    			DATA	DATA lstr_18_extruder
$3B5C	$FF00	    			DATA	DATA
$3B5E	$696D	    			DATA	DATA lstr_19_extruder
$3B60	$FF00	    			DATA	DATA
$3B62	$646D	    			DATA	DATA lstr_20_extruder
$3B64	$FF00	    			DATA	DATA
$3B66	$796D	    			DATA	DATA lstr_21_extruder
$3B68	$FF00	    			DATA	DATA
$3B6A	$666D	    			DATA	DATA lstr_22_extruder
$3B6C	$0067	    			DATA	DATA lstr_22_extruder
$3B6E	$636D	    			DATA	DATA lstr_23_extruder
$3B70	$646D	    			DATA	DATA lstr_23_extruder
$3B72	$FF00	    			DATA	DATA
$3B74	$736D	    			DATA	DATA lstr_24_extruder
$3B76	$0070	    			DATA	DATA lstr_24_extruder
$3B78	$666D	    			DATA	DATA lstr_25_extruder
$3B7A	$FF00	    			DATA	DATA


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$000C		FIXSIGN32
$0018		interrupt_low
$0204		interrupt
$02A0		RES032
$02B0		SETFUN32
$02CC		SETFOV32
$02E6		NRM3232
$0360		NRM4032
$054C		SETIOV3224
$056A		Mul_32x32_U
$05C6		Int2Double
$060A		Longint2Double
$0650		Mul_32x32_FP
$0778		Add_32x32_FP
$0BA0		Compare_Double
$0C70		Double2Int
$0D46		Mul_32x32_S
$0DAE		dutyInterruptProc
$0DCA		readTemp
$0E7C		calc_pid
$17F4		setDuty
$1808		calcMotorVelocity
$18AA		calcMotorPosition
$1A8C		setMotorDuty
$1AEC		Usart_Write
$1B02		strcpy
$1B4E		Div_8x8_U
$1B72		isspace
$1B90		isdigit
$1BAA		Equals_Double
$1BDA		Eeprom_Read
$1BEA		USART_Send_String
$1C16		FloatToStr
$1FFC		Eeprom_Write
$2024		Mul_16x16_S
$208C		c_stdlib_strtod
$2588		strConstCpy
$25DA		Eeprom_Read_Obj
$2614		printFloat
$264E		Byte2Double
$266E		Eeprom_Write_Obj
$26A6		strchr
$26E0		atoi
$2798		atof
$27AC		atol
$28B8		initDuty
$28C4		initRegisters
$2934		resetPosition
$2954		printMessage
$2988		readMemory
$29F0		Usart_Data_Ready
$29FC		Usart_Read
$2A0E		pushChar
$2A64		commandMatches
$2AD4		printStatus
$315C		writeMemory
$31B4		findIntValue
$31EA		clearMemory
$3208		findFloatValue
$323E		findLongValue
$3274		GlobalIniextruder
$3666		Usart_Init
$367C		main


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$000C		_FIXSIGN32:
$0018		_interrupt_low:
$00AA		L_interrupt_low_121:
$00B2		L271_ex_L_interrupt_low_42:
$00BC		L_interrupt_low_42:
$00C2		L_interrupt_low_39:
$00C2		L_interrupt_low_43:
$00CC		L_interrupt_low_122:
$00D6		L_interrupt_low_44:
$00E0		L_interrupt_low_38:
$00F0		L_interrupt_low_46:
$00F6		L_interrupt_low_47:
$0102		L_interrupt_low_123:
$0118		L311_ex_L_interrupt_low_50:
$012A		L_interrupt_low_50:
$014E		L_interrupt_low_124:
$0156		L_interrupt_low_52:
$015A		L_interrupt_low_53:
$015C		L_interrupt_low_51:
$0162		L_interrupt_low_54:
$019C		L_interrupt_low_55:
$01A8		L_interrupt_low_45:
$01A8		L_Low_Interrupt_end:
$0204		_interrupt:
$023A		L_interrupt_33:
$0256		L_interrupt_34:
$0258		L_interrupt_32:
$0270		L_interrupt_36:
$027C		L_interrupt_37:
$027E		L_interrupt_35:
$027E		L_Interrupt_end:
$02A0		_RES032:
$02B0		_SETFUN32:
$02C8		SETFUN32EEE:
$02CC		_SETFOV32:
$02E2		SETFOV32EEE:
$02E6		_NRM3232:
$031A		NORM3232:
$0328		NORM3232A:
$033E		JPNRES032:
$034A		JPNSETFUN32:
$0356		JMPNFIXSIGN32:
$035E		NORM32EEE:
$0360		_NRM4032:
$036E		NRM4032:
$0378		TNIB4032:
$03AA		NORM4032:
$03DC		TNORMUN4032:
$03E6		NRMRND4032:
$0414		NRM4032A:
$042C		TNIB4032A:
$0452		NORM4032A:
$0482		NRM4032B:
$0498		TNIB4032B:
$04B2		NORM4032B:
$04DC		NRM4032C:
$04EC		TNIB4032C:
$04FA		NORM4032C:
$051E		NRM40JPSETFUN32:
$052A		NRM40JPFIXSIGN32:
$0536		NRM40JPSETFOV32:
$0542		NRM40JPRES032:
$054A		NRM40EEE:
$054C		_SETIOV3224:
$0566		SETIOV3224EEE:
$056A		_Mul_32x32_U:
$0578		_NEXT:
$0582		_LOOP:
$05B4		_EXIT1:
$05C4		_EXIT2:
$05C6		_Int2Double:
$05D6		FLO1632:
$05F8		FLO1632EEE:
$060A		_Longint2Double:
$061E		FLO3232:
$0646		FLO3232EEE:
$0650		_Mul_32x32_FP:
$0652		FPM32:
$0660		M32BNE0:
$067E		MTUN32:
$0686		MOK32:
$072C		MROUND32:
$0752		MUL32OK:
$075C		MULJPRES032:
$0766		MULJPSETFOV32:
$0770		MULJPSETFUN32:
$0776		MULEEE:
$0778		_Add_32x32_FP:
$077A		FPA32:
$078E		USEB32:
$0800		BRETURN32:
$0812		BNIB32C:
$0828		BLOOP32C:
$0844		BNIB32B:
$0866		BLOOP32B:
$0888		BNIB32A:
$08B6		BLOOP32A:
$08DE		BNIB32:
$0918		BLOOP32:
$0942		BLIGNED32:
$0960		USEA32:
$096C		BNE032:
$09E0		ANIB32C:
$09F6		ALOOP32C:
$0A12		ANIB32B:
$0A34		ALOOP32B:
$0A56		ANIB32A:
$0A84		ALOOP32A:
$0AAC		ANIB32:
$0AE6		ALOOP32:
$0B10		ALIGNED32:
$0B2A		AOK32:
$0B58		ACOMP32:
$0B76		ADDJPNRMRND4032:
$0B82		ADDJPNRM4032:
$0B8E		ADDJPSETFOV32:
$0B9A		ADDEOK:
$0B9E		ADDEEE:
$0BA0		_Compare_Double:
$0BC6		COMPARE_YNOTZERO:
$0BD0		COMPARE_XNOTZERO:
$0BDA		COMPARE_NOTZERO:
$0BFC		COMPARE_TESTALL:
$0C10		COMPARE_C1:
$0C24		COMPARE_C2:
$0C38		COMPARE_C3:
$0C48		GT_FALSE:
$0C54		GT_TRUE:
$0C60		COMPARE_GT:
$0C64		COMPARE_LT:
$0C68		COMPARE_EQU:
$0C70		_Double2Int:
$0C72		INT3216:
$0CBC		TSHIFT3216:
$0CC4		SHIFT3216:
$0CD0		SHIFT3216OK:
$0CEA		INT3216OK:
$0CFE		IRES016:
$0D06		SETIOV16:
$0D24		JPJSETIOV3224:
$0D30		INT3216EOK:
$0D38		INT3216EER:
$0D3C		INT3216EEE:
$0D46		_Mul_32x32_S:
$0D4A		_IF_FIRST:
$0D50		_INVERCE_FIRST:
$0D66		_IF_SECOND:
$0D6C		_INBERSE_SECOND:
$0D80		_MULT:
$0DAC		_EXIT:
$0DAE		_dutyInterruptProc:
$0DBC		L_dutyInterruptProc_0:
$0DBE		L_dutyInterruptProc_1:
$0DC8		L_dutyInterruptProc_2:
$0DCA		_readTemp:
$0DD6		L_readTemp_12:
$0DE4		L_readTemp_13:
$0DEC		L_readTemp_14:
$0DFA		L_readTemp_15:
$0E18		L_readTemp_16:
$0E24		L_readTemp_18:
$0E28		L_readTemp_19:
$0E36		L_readTemp_109:
$0E42		L_readTemp_110:
$0E7A		L_readTemp_17:
$0E7C		_calc_pid:
$0FCA		L_calc_pid_29:
$0FEA		L_calc_pid_30:
$100C		L_calc_pid_1:
$1044		L_calc_pid_31:
$106C		L_calc_pid_0:
$106C		L_calc_pid_2:
$106C		L_calc_pid_3:
$1098		L_calc_pid_32:
$10BE		L_calc_pid_4:
$10F6		L_calc_pid_33:
$110C		L_calc_pid_6:
$1126		L_calc_pid_5:
$1126		L_calc_pid_7:
$117C		L_calc_pid_9:
$1194		L_calc_pid_34:
$11B4		L_calc_pid_35:
$11C8		L_calc_pid_11:
$1200		L_calc_pid_36:
$121A		L_calc_pid_10:
$121A		L_calc_pid_12:
$121A		L_calc_pid_13:
$1222		L_calc_pid_8:
$122A		L_calc_pid_14:
$12B4		L_calc_pid_37:
$12D4		L_calc_pid_38:
$12E8		L_calc_pid_16:
$1320		L_calc_pid_39:
$133A		L_calc_pid_15:
$133A		L_calc_pid_17:
$133A		L_calc_pid_18:
$13F0		L_calc_pid_40:
$1410		L_calc_pid_41:
$1424		L_calc_pid_20:
$145C		L_calc_pid_42:
$1476		L_calc_pid_19:
$1476		L_calc_pid_21:
$1476		L_calc_pid_22:
$1746		L_calc_pid_24:
$17A0		L_calc_pid_26:
$17BE		L_calc_pid_25:
$17BE		L_calc_pid_27:
$17C4		L_calc_pid_23:
$17CC		L_calc_pid_28:
$17F4		_setDuty:
$1808		_calcMotorVelocity:
$180E		L_calcMotorVelocity_31:
$184E		L_calcMotorVelocity_119:
$185C		L_calcMotorVelocity_120:
$18AA		_calcMotorPosition:
$18DC		L_calcMotorPosition_112:
$18FE		L_calcMotorPosition_113:
$1900		L179_ex_L_calcMotorPosition_26:
$1922		L_calcMotorPosition_26:
$1942		L_calcMotorPosition_114:
$1964		L_calcMotorPosition_115:
$1966		L193_ex_L_calcMotorPosition_29:
$1988		L_calcMotorPosition_29:
$19A2		L_calcMotorPosition_116:
$19F6		L_calcMotorPosition_30:
$1A40		L_calcMotorPosition_117:
$1A4E		L_calcMotorPosition_118:
$1A8C		_setMotorDuty:
$1AA2		L_setMotorDuty_111:
$1AB2		L_setMotorDuty_21:
$1AC6		L_setMotorDuty_20:
$1AD6		L_setMotorDuty_23:
$1AE2		L_setMotorDuty_22:
$1AEC		_Usart_Write:
$1AEC		L_Usart_Write_3:
$1AFC		L_Usart_Write_4:
$1B02		_strcpy:
$1B0A		L_strcpy_31:
$1B44		L_strcpy_32:
$1B4E		_Div_8x8_U:
$1B72		_isspace:
$1B86		L95_ex_L_isspace_15:
$1B8A		L_isspace_15:
$1B8E		L_isspace_14:
$1B90		_isdigit:
$1BA6		L_isdigit_9:
$1BA8		L_isdigit_8:
$1BAA		_Equals_Double:
$1BD4		EQU_FALSE:
$1BDA		_Eeprom_Read:
$1BEA		_USART_Send_String:
$1BEA		L_USART_Send_String_2:
$1C14		L_USART_Send_String_3:
$1C16		_FloatToStr:
$1C64		L_FloatToStr_59:
$1C82		L_FloatToStr_29:
$1CA0		L_FloatToStr_30:
$1CBA		L_FloatToStr_60:
$1CD6		L_FloatToStr_31:
$1CEE		L_FloatToStr_61:
$1D0C		L_FloatToStr_32:
$1D0C		L_FloatToStr_33:
$1D76		L_FloatToStr_34:
$1D76		L_FloatToStr_35:
$1DE2		L_FloatToStr_36:
$1E46		L_FloatToStr_62:
$1E56		L_FloatToStr_63:
$1E8A		L358_ex_L_FloatToStr_39:
$1E9E		L_FloatToStr_39:
$1EA2		L_FloatToStr_40:
$1F20		L_FloatToStr_42:
$1F20		L_FloatToStr_43:
$1F20		L_FloatToStr_44:
$1F24		L_FloatToStr_41:
$1F24		L_FloatToStr_45:
$1F44		L_FloatToStr_46:
$1F62		L_FloatToStr_47:
$1F9C		L_FloatToStr_49:
$1FC8		L_FloatToStr_50:
$1FEE		L_FloatToStr_48:
$1FFC		_Eeprom_Write:
$1FFC		L_Eeprom_Write_0:
$2004		L_Eeprom_Write_1:
$2024		_Mul_16x16_S:
$208C		c_stdlib_strtod:
$20A4		L_c_stdlib_strtod_1:
$20A4		L_c_stdlib_strtod_2:
$20C8		L_c_stdlib_strtod_3:
$20DC		L_c_stdlib_strtod_4:
$20E8		L_c_stdlib_strtod_5:
$20E8		L_c_stdlib_strtod_6:
$20F6		L_c_stdlib_strtod_7:
$210E		L52_ex_L_c_stdlib_strtod_12:
$2118		L_c_stdlib_strtod_12:
$212C		L_c_stdlib_strtod_13:
$213A		L_c_stdlib_strtod_15:
$21A2		L_c_stdlib_strtod_14:
$21A8		L_c_stdlib_strtod_16:
$21A8		L_c_stdlib_strtod_17:
$21AE		L_c_stdlib_strtod_9:
$21B0		L_c_stdlib_strtod_8:
$21DA		L114_ex_L_c_stdlib_strtod_20:
$21FA		L_c_stdlib_strtod_21:
$2212		L_c_stdlib_strtod_22:
$2212		L_c_stdlib_strtod_23:
$2212		L_c_stdlib_strtod_24:
$222E		L_c_stdlib_strtod_25:
$22C4		L_c_stdlib_strtod_26:
$22C4		L_c_stdlib_strtod_27:
$22C4		L_c_stdlib_strtod_28:
$22D4		L_c_stdlib_strtod_20:
$22D4		L_c_stdlib_strtod_29:
$22E4		L_strtod_88:
$22EC		L191_ex_L_c_stdlib_strtod_32:
$22FC		L_c_stdlib_strtod_32:
$2354		L_c_stdlib_strtod_33:
$236C		L_c_stdlib_strtod_35:
$23B8		L_c_stdlib_strtod_36:
$23B8		L_c_stdlib_strtod_37:
$23FA		L_c_stdlib_strtod_38:
$2446		L_c_stdlib_strtod_40:
$2458		L_c_stdlib_strtod_39:
$245C		L_c_stdlib_strtod_34:
$246C		L_c_stdlib_strtod_44:
$24B0		L_c_stdlib_strtod_45:
$24B0		L_c_stdlib_strtod_46:
$24F2		L_c_stdlib_strtod_47:
$253E		L_c_stdlib_strtod_49:
$2550		L_c_stdlib_strtod_42:
$2550		L_c_stdlib_strtod_43:
$2550		L_c_stdlib_strtod_48:
$2576		L_c_stdlib_strtod_51:
$2588		_strConstCpy:
$2588		L_strConstCpy_0:
$25D8		L_strConstCpy_1:
$25DA		_Eeprom_Read_Obj:
$25E6		L_Eeprom_Read_Obj_3:
$260C		L_Eeprom_Read_Obj_5:
$2612		L_Eeprom_Read_Obj_4:
$2614		_printFloat:
$264E		_Byte2Double:
$2654		FLO08U32:
$266E		_Eeprom_Write_Obj:
$267A		L_Eeprom_Write_Obj_0:
$269E		L_Eeprom_Write_Obj_2:
$26A4		L_Eeprom_Write_Obj_1:
$26A6		_strchr:
$26A6		L_strchr_24:
$26C4		L_strchr_26:
$26DA		L_strchr_25:
$26E0		___atoi_skipws_atoi:
$26E0		_atoi:
$26FE		L256_ex_L_atoi_55:
$2706		L_atoi_55:
$271C		L_atoi_56:
$2728		___atoi_conv_atoi:
$2728		L_atoi_57:
$2728		L_atoi_58:
$2778		L_atoi_59:
$278E		L_atoi_60:
$2798		_atof:
$27AC		___atol_skipws_atol:
$27AC		_atol:
$27CA		L303_ex_L_atol_63:
$27D2		L_atol_63:
$27F8		L_atol_64:
$2810		___atol_conv_atol:
$2810		L_atol_65:
$2810		L_atol_66:
$2886		L_atol_67:
$28A6		L_atol_68:
$28B8		_initDuty:
$28C4		_initRegisters:
$2934		_resetPosition:
$2954		_printMessage:
$2988		_readMemory:
$29EC		L_readMemory_10:
$29F0		_Usart_Data_Ready:
$29FC		_Usart_Read:
$2A08		L_Usart_Read_2:
$2A0E		_pushChar:
$2A1C		L36_ex_L_pushChar_6:
$2A40		L_pushChar_7:
$2A48		L_pushChar_6:
$2A64		_commandMatches:
$2A6E		L_commandMatches_56:
$2A94		L485_ex_L_commandMatches_57:
$2ABC		L_commandMatches_60:
$2ACE		L_commandMatches_57:
$2AD4		_printStatus:
$315C		_writeMemory:
$31B4		_findIntValue:
$31EA		_clearMemory:
$3208		_findFloatValue:
$323E		_findLongValue:
$3274		GlobalIniextruder:
$3666		_Usart_Init:
$3670		L_Usart_Init_0:
$367A		L_Usart_Init_1:
$367C		_main:
$36C6		L_main_61:
$36DE		L_main_62:
$36F4		L_main_64:
$372C		L_main_67:
$3746		L_main_69:
$3760		L_main_71:
$3788		L_main_73:
$37B0		L_main_75:
$37CA		L_main_77:
$37FE		L_main_79:
$3836		L_main_81:
$386A		L_main_83:
$389E		L_main_85:
$38D2		L_main_87:
$38FE		L_main_89:
$3936		L_main_91:
$396A		L_main_93:
$399E		L_main_95:
$39D2		L_main_97:
$3A06		L_main_99:
$3A32		L_main_101:
$3A66		L_main_103:
$3A92		L_main_105:
$3AC6		L_main_107:
$3AE4		L_main_100:
$3AE4		L_main_102:
$3AE4		L_main_104:
$3AE4		L_main_106:
$3AE4		L_main_108:
$3AE4		L_main_68:
$3AE4		L_main_70:
$3AE4		L_main_72:
$3AE4		L_main_74:
$3AE4		L_main_76:
$3AE4		L_main_78:
$3AE4		L_main_80:
$3AE4		L_main_82:
$3AE4		L_main_84:
$3AE4		L_main_86:
$3AE4		L_main_88:
$3AE4		L_main_90:
$3AE4		L_main_92:
$3AE4		L_main_94:
$3AE4		L_main_96:
$3AE4		L_main_98:
$3AF4		L_main_66:
$3AF6		L_main_65:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		STACK_0
$0001		STACK_1
$0002		STACK_2
$0003		STACK_3
$0004		STACK_4
$0005		STACK_5
$0006		STACK_6
$0007		STACK_7
$0008		STACK_8
$0009		STACK_9
$000A		STACK_10
$000B		STACK_11
$000C		STACK_12
$000D		STACK_13
$000E		STACK_14
$000F		STACK_15
$0010		STACK_16
$0011		STACK_17
$0012		STACK_18
$0013		STACK_19
$0014		STACK_20
$0015		_motorPulses
$0019		_stepMultiplier
$001A		_motorTurns
$001E		_duty_count
$001F		_setpoint
$0020		_duty_period
$0021		_heaterGlobalEnable
$0022		_meltFlowComp
$0023		_motorDirSwitches
$0024		_tempCount
$0025		_debugHeaterDuty
$0027		_velocityControlMode
$0028		_debugMotorSpeed
$002A		_motorGlobalEnable
$002B		_txtBuffer
$0053		_EEPROM_VERSION_ID
$0054		_txtPos
$0055		_buffer
$0056		_qMf
$005A		_debugMotorDuty
$005C		_splash
$005F		FARG_setDuty+0
$0060		clearMemory_blank_L0
$0060		FARG_initDuty+0
$0060		FARG_pushChar+0
$0060		Usart_Init_tmp_L0
$0060		Usart_Read_tmp_L0
$0060		writeMemory_pidSize_L0
$0061		_pid_heater
$00AB		_pid_motor
$00F5		_cmdBuffer
$011D		_cmdPrompt
$0120		_noEeprom
$0123		_unknownCommand
$0126		_cmd_status
$0129		_cmd_saveEEprom
$012C		_cmd_readEEprom
$012F		_cmd_defaults
$0132		_cmd_globalHeaterEnable
$0135		_cmd_globalMotorEnable
$0138		_cmd_heater_Kp
$013B		_cmd_heater_Ki
$013E		_cmd_heater_Kd
$0141		_cmd_heater_kff0
$0144		_cmd_heater_duty
$0147		_cmd_heater_SetTemp
$014A		_cmd_heater_SetFeedback
$014D		_cmd_motor_Kp
$0150		_cmd_motor_Ki
$0153		_cmd_motor_Kd
$0156		_cmd_motor_duty
$0159		_cmd_motor_Kff1
$015C		_cmd_motor_SetPos
$015F		_cmd_motor_Speed
$0162		_cmd_motor_SetFeedback
$0165		?saveFSR0
$0167		?saveFSR1
$0169		?Low_saveWERG
$016A		?Low_saveSTATUS
$016B		?Low_saveBSR
$016C		?Low_saveFSR0
$016E		?Low_saveFSR1
$0170		calcMotorPosition_axis_adjust_L0
$0170		FARG_calc_pid+0
$0170		FARG_setMotorDuty+0
$0170		readTemp_res_h_L0
$0171		readTemp_res_l_L0
$0172		calc_pid_tmp1_L0
$0172		setMotorDuty_tmp2_L0
$0174		calcMotorPosition_turn_adjust_L0
$0176		calc_pid_tmp2_L0
$017A		calc_pid_maxerror_L0
$017E		calc_pid_maxerror_i_L0
$0182		calc_pid_maxerror_d_L0
$0186		calc_pid_error_i_L0
$018A		calc_pid_error_d_L0
$018E		calc_pid_maxcmd_d_L0
$0192		calc_pid_cmd_d_L0
$0196		calc_pid_enable_L0
$0197		calc_pid_deadband_L0
$0199		calc_pid_maxoutput_L0
$019B		calc_pid_output_L0
$019D		calc_pid_limitstate_L0
$019E		
$01A6		FARG_commandMatches+0
$01A6		FARG_findFloatValue+0
$01A6		FARG_findIntValue+0
$01A6		FARG_findLongValue+0
$01A6		FARG_printMessage+0
$01A6		FARG_Usart_Init+0
$01A6		lstr26_extruder
$01A6		readMemory_pidSize_L0
$01A7		readMemory_versionId_L0
$01A8		findFloatValue_ptr_L0
$01A8		findIntValue_ptr_L0
$01A8		findLongValue_ptr_L0
$01A9		commandMatches_cmdptr_L0
$01AA		lstr27_extruder
$01AF		lstr28_extruder
$01B4		lstr29_extruder
$01B9		lstr30_extruder
$01BE		lstr31_extruder
$01C5		lstr32_extruder
$01CC		lstr33_extruder
$01D3		lstr34_extruder
$01DB		lstr35_extruder
$01E3		lstr36_extruder
$01E8		lstr37_extruder
$01EF		lstr38_extruder
$01F4		lstr39_extruder
$01F9		lstr40_extruder
$01FE		lstr41_extruder
$0203		lstr42_extruder
$0209		lstr43_extruder
$0210		lstr44_extruder
$0217		lstr45_extruder
$021F		lstr46_extruder
$0227		lstr47_extruder
$022C		lstr48_extruder
$0235		lstr49_extruder
$023B		lstr50_extruder
$0241		lstr51_extruder
$024E		FARG_atof+0
$024E		FARG_atoi+0
$024E		FARG_atol+0
$024E		FARG_Eeprom_Read_Obj+0
$024E		FARG_Eeprom_Write_Obj+0
$024E		FARG_printFloat+0
$024E		FARG_strchr+0
$024E		FARG_strConstCpy+0
$0250		atoi_c_L0
$0250		atol_c_L0
$0250		FARG_Eeprom_Read_Obj+2
$0250		FARG_Eeprom_Write_Obj+2
$0250		FARG_printFloat+2
$0250		FARG_strchr+2
$0250		FARG_strConstCpy+2
$0251		atoi_a_L0
$0251		atol_a_L0
$0252		FARG_Eeprom_Read_Obj+4
$0252		FARG_Eeprom_Write_Obj+4
$0253		atoi_sign_L0
$0253		Eeprom_Read_Obj_i_L0
$0253		Eeprom_Write_Obj_i_L0
$0254		Eeprom_Read_Obj_ptr_L0
$0254		Eeprom_Write_Obj_ptr_L0
$0254		printFloat_floatTxt_L0
$0255		atol_sign_L0
$0261		FARG_c_stdlib_strtod+0
$0261		FARG_Eeprom_Read+0
$0261		FARG_Eeprom_Write+0
$0261		FARG_FloatToStr+0
$0261		FARG_USART_Send_String+0
$0262		FARG_Eeprom_Write+1
$0263		FARG_c_stdlib_strtod+2
$0265		c_stdlib_strtod_flags_L0
$0265		FARG_FloatToStr+4
$0266		c_stdlib_strtod_expon_L0
$0267		c_stdlib_strtod_eexp_L0
$0267		lstr1_conv
$0268		c_stdlib_strtod__u_L0
$026B		lstr2_conv
$026D		lstr3_conv
$0271		FloatToStr_bpoint_L0
$0272		FloatToStr_i_L0
$0273		FloatToStr_d_L0
$0274		FloatToStr_dexpon_L0
$0275		FloatToStr_un_L0
$0279		FARG_isdigit+0
$0279		FARG_isspace+0
$0279		FARG_strcpy+0
$0279		FARG_Usart_Write+0
$027B		FARG_strcpy+2
$027D		strcpy_cp_L0
$0F60		DFLTCON
$0F64		MAXCNTL
$0F65		MAXCNTH
$0F66		POSCNTL
$0F67		POSCNTH
$0F68		VELRL
$0F69		VELRH
$0F6E		PWMCON1
$0F6F		PWMCON0
$0F78		PDC0H
$0F79		PDC0L
$0F7A		PTPERH
$0F7B		PTPERL
$0F7E		PTCON1
$0F7F		PTCON0
$0F81		PORTB
$0F82		PORTC
$0F83		PORTD
$0F92		TRISA
$0F93		TRISB
$0F94		TRISC
$0F95		TRISD
$0F9D		PIE1
$0F9E		PIR1
$0F9F		IPR1
$0FA3		PIE3
$0FA4		PIR3
$0FA6		EECON1
$0FA7		EECON2
$0FA8		EEDATA
$0FA9		EEADR
$0FAB		RCSTA
$0FAC		TXSTA
$0FAD		TXREG
$0FAE		RCREG
$0FAF		SPBRG
$0FB6		QEICON
$0FB7		T5CON
$0FB8		ANSEL0
$0FC1		ADCON1
$0FC6		SSPCON
$0FC7		SSPSTAT
$0FC9		SSPBUF
$0FCD		T1CON
$0FCE		TMR1L
$0FCF		TMR1H
$0FD0		RCON
$0FD5		T0CON
$0FD6		TMR0L
$0FD7		TMR0H
$0FD8		STATUS
$0FD9		FSR2L
$0FDA		FSR2H
$0FDB		PLUSW2
$0FDC		PREINC2
$0FDD		POSTDEC2
$0FDE		POSTINC2
$0FDF		INDF2
$0FE0		BSR
$0FE1		FSR1L
$0FE2		FSR1H
$0FE3		PLUSW1
$0FE4		PREINC1
$0FE5		POSTDEC1
$0FE6		POSTINC1
$0FE7		INDF1
$0FE8		WREG
$0FE9		FSR0L
$0FEA		FSR0H
$0FEB		PLUSW0
$0FEC		PREINC0
$0FED		POSTDEC0
$0FEE		POSTINC0
$0FEF		INDF0
$0FF1		INTCON2
$0FF2		INTCON
$0FF3		PRODL
$0FF4		PRODH
$0FF5		TABLAT
$0FF6		TBLPTRL
$0FF7		TBLPTRH
$0FF8		TBLPTRU
$0FF9		PCL
$0FFA		PCLATH
$0FFB		PCLATU
$0FFD		TOSL
$0FFE		TOSH
$0FFF		TOSU


